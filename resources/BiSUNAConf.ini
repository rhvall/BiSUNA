; //
; //  BiSUNAConf.ini
; //  BiSUNAOpenCL
; //
; //  Created by RHVT on 18/7/19.
; //  Copyright Â© 2019 R. All rights reserved.
; //
; //////////////////////////////////////////////////////////
; Licensed to the Apache Software Foundation (ASF) under one
; or more contributor license agreements.  See the NOTICE file
; distributed with this work for additional information
; regarding copyright ownership.  The ASF licenses this file
; to you under the Apache License, Version 2.0 (the
; "License"); you may not use this file except in compliance
; with the License.  You may obtain a copy of the License at
;
;   http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing,
; software distributed under the License is distributed on an
; "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
; KIND, either express or implied.  See the License for the
; specific language governing permissions and limitations
; under the License.
; //////////////////////////////////////////////////////////

; Basic BiSUNA configuration file
;-------------------------------------------------------
[General]

;This value defines the execution type, which could be OpenCL or Thread. Each should have its own section
;ExecutionType = OpenCL
ExecutionType = Thread

; For how many generations this execution will take place
Generations = 500000


;-------------------------------------------------------
[Population]
; Iterations performed to each new agent when the population is created. It only affects initialization
NumberInitialMutations = 200

; This number affects how many changes are going to be performed on agents that are derived from parents
; when the reproduction step stakes place
StepMutations = 5

; Quantity of agents that are grouped as population
PopulationSize = 100

; How many individuals will be considered as "parents" for the next generation, given their "novelty"
; measure, which is the "hamming distance" between agents.
NoveltyMapSize = 20

; The following four elements (add/delete Neuron/Connection) are the probabilities of modifying agents
; in a population every time new selection process takes place. Another consideration is the need to
; sum them up to 1, if that rule is violated, the behavior of new agents is not defined.
; **** Start
; Probability to add a new neuron to agents when performing evolution
ChanceAddNeuron = 0.01

; Probability to delete a current neuron to agents when performing evolution
ChanceDelNeuron = 0.01

; Probability to add a new connection to agents when performing evolution
ChanceAddConnection = 0.49

; Probability to delete a new neuron to agents when performing evolution
ChanceDelConnection = 0.49
; **** End

; The probability of a new neuron to have a neuromodulation effect on other neurons, a value that must
; be between 0 and 1.
ChanceNeuromodulation = 0.1

; The probability of a new neuron to be created directly as the control type, a value that must
; be between 0 and 1.
ChanceControlNeuron = 0.2

; The probability of affecting weights on neuron's connections, a value that must be between 0 and 1.
ChanceWeightMutation = 0.5


;-------------------------------------------------------
[Environment]
; How many trials a single agent will be able to repeat
EpisodesPerAgent = 1

; The name to load/save populations.
BiSUNAFile = bisuna.dat

; Signal the application if the first run should load from a file
LoadFromFile = false

; Signal the application if the first run should load from a file
SaveToFile = false

; Save population every "n" generations, it will have the same "Environment" name, only appending a timestamp
; to when it was saved and the extension as ".dat"
SaveEveryNGenerations = 5000

; What environment name will be used to execute this program and search for the same name section
; inside the configuration file
;EnvironmentName = MountainCar
EnvironmentName = SymmetricEncryption

; Name of the file that contains the values needed to configure that environment
;EnvironmentConf = MountainCar.ini
EnvironmentConf = SymmetricEncryption.ini

;-------------------------------------------------------
[OpenCL]
; This is the folder where OCL kernel files are located
KernelFolder = Kernels/ ; It need "/" at the end

; At this moment, only one "main" kernel is supported, which should be named here
KernelName = process ; processFPGA

; Define the accelerator type to use
DeviceType = CPU ; CPU (2) / GPU (4) / FPGA (8), in OCL terms FPGA means "Accelerator", (x) is the OCL number used

; This is a list of all OCL files being used. In case it is being compiled for the CPU, all ".cl" code
; must be separated by comma, in case of the FPGA, the aocx file must be provided.
OCLFiles =  CLSupportFunctions.cl,CLNetworkStateKernel.cl ; Use this line if CL files are going to be compiled
;OCLFiles =  CLSupportFunctions.cl,FPGANetSt.cl ; This line to test on CPU/GPU
;OCLFiles =  nsk.aocx ; Use this line if OCL-FPGA is being deployed.

; When enabled, it will set OCL profiling flags and show the time it takes to process/read output data.
OCLProfiling = false

; This tells the kernel if it runs on single task or NDRange, at the moment, only single task is enabled.
SingleTask = false


;-------------------------------------------------------
[Thread]
; How many concurrent threads should be executed in parallel. For optimal work division, consider a
; number that matches the core count in the target machine as well as the divisibility against the
; population size, which internally will be represented as "cells per thread", which is a simple
; population size divided by thread number. Lastly, make sure that the number of environments matches
; the thread count, specially when dealing with external connections like the OpenAI Gym.
ThreadNumber = 8
