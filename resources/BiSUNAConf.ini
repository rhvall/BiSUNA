; //
; //  BiSUNAConf.ini
; //  BiSUNAOpenCL
; //
; //  Created by RHVT on 18/7/19.
; //  Copyright Â© 2019 R. All rights reserved.
; //
; //////////////////////////////////////////////////////////
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, version 3 or later.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <http://www.gnu.org/licenses/>.
; //////////////////////////////////////////////////////////

;-------------------------------------------------------
[General]
;-------------------------------------------------------
;This value defines the execution type, which could be OpenCL or Thread. Each should have its own section
;ExecutionType = OpenCL ; default = Thread

; For how many generations this execution will take place
Generations = 500


;-------------------------------------------------------
[Population]
;-------------------------------------------------------
; Iterations performed to each new agent when the population is created. It only affects initialization
NumberInitialMutations = 200

; This number affects how many changes are going to be performed on agents that are derived from parents
; when the reproduction step stakes place
StepMutations = 5

; Quantity of agents that are grouped as population
PopulationSize = 100

; How many individuals will be considered as "parents" for the next generation, given their "novelty"
; measure, which is the "hamming distance" between agents.
NoveltyMapSize = 20

; The following four elements (add/delete Neuron/Connection) are the probabilities of modifying agents
; in a population every time new selection process takes place. Another consideration is the need to
; sum them up to 1, if that rule is violated, the behavior of new agents is not defined.
; **** Start
; Probability to add a new neuron to agents when performing evolution
ChanceAddNeuron = 0.01

; Probability to delete a current neuron to agents when performing evolution
ChanceDelNeuron = 0.01

; Probability to add a new connection to agents when performing evolution
ChanceAddConnection = 0.49

; Probability to delete a new neuron to agents when performing evolution
ChanceDelConnection = 0.49
; **** End

; The probability of a new neuron to have a neuromodulation effect on other neurons, a value that must
; be between 0 and 1.
ChanceNeuromodulation = 0.1

; The probability of a new neuron to be created directly as the control type, a value that must
; be between 0 and 1.
ChanceControlNeuron = 0.2

; The probability of affecting weights on neuron's connections, a value that must be between 0 and 1.
ChanceWeightMutation = 0.5


;-------------------------------------------------------
[Environment]
;-------------------------------------------------------
; How many trials a single agent will be able to repeat
EpisodesPerAgent = 1

; The name to load/save populations.
BiSUNAFile = bisuna.dat

; Signal the application if the first run should load from a file
LoadFromFile = false

; Signal the application if the first run should load from a file
SaveToFile = false

; Save population every "n" generations, it will have the same "Environment" name, only appending a timestamp
; to when it was saved and the extension as ".dat"
SaveEveryNGenerations = 1000

; What environment name will be used to execute this program and search for the same name section
; inside the configuration file
EnvironmentName = MountainCar

; Name of the file that contains the values needed to configure that environment
EnvironmentConf = resources/MountainCar.ini


;-------------------------------------------------------
[OpenCL]
;-------------------------------------------------------
; This is the folder where OCL kernel files are located
KernelFolder = src/OCL/Kernels/ ; It need "/" at the end

; Kernel that will calculate a step, from input -> BNN -> output
KernelStateName = processStateG ;

; This tells the runtime that the kernel "State" uses local variables or all global
KernelStateUseLocalVars = false ;

; Kernel that signals UNM to finish recording rewards
; KernelEndEpisodeName = endCellEpisode ;

; Kernel that will evolve the Unified Neural Model
; KernelEvolveName = spectrumDiversityEvolve ;

; Define the accelerator type to use
DeviceType = CPU ; CPU (2) / GPU (4) / FPGA (8), in OCL terms FPGA means "Accelerator", (x) is the OCL number used

; This is a list of all OCL files being used. In case it is being compiled for the CPU, all ".cl" code
; must be separated by comma, in case of the FPGA, the aocx file must be provided.
;OCLFiles = TycheI.cl,CLRandom.cl,CLNetworkModule.cl,CLNMap.cl,CLUNM.cl,CLSupportFunctions.cl,CLNetState.cl ; This line to test on CPU/GPU
;OCLFiles = nsk.aocx ; Use this line if OCL-FPGA is being deployed.
OCLFiles = ProcessStateGlobal.cl

; When enabled, it will set OCL profiling flags and show the time it takes to process/read output data.
OCLProfiling = false

; The default value of 0 will use the population size to distribute work among the maximum number of
; CU available in the device using NDRange. When the number is 1, it will execute a "single" kernel
; and more than 1 will require multiple CU distributed in the device (like in a FPGA)
ComputeUnits = 0


;-------------------------------------------------------
[Thread]
;-------------------------------------------------------
; How many concurrent threads should be executed in parallel. For optimal work division, consider a
; number that matches the core count in the target machine as well as the divisibility against the
; population size, which internally will be represented as "cells per thread", which is a simple
; population size divided by thread number. Lastly, make sure that the number of environments matches
; the thread count, specially when dealing with external connections like the OpenAI Gym.
ThreadNumber = 8


;-------------------------------------------------------
[Debugging]
;-------------------------------------------------------
; This flag will (dis)enable the configuration set for the values establish in this section
EnableDebug = false

; To replicate environments, establish a set random seed, only updated when "EnableDebug" is true
RandomSeed = 42
