// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GymUDS.proto
// Original file comments:
//
//  GymUDS.proto
//  BiSUNAOpenCL
//
//  Created by RHVT on 21/Apr/19.
//  Copyright Â© 2019 R. All rights reserved.
//
//
// //////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, version 3 or later.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// //////////////////////////////////////////////////////////
//
#ifndef GRPC_GymUDS_2eproto__INCLUDED
#define GRPC_GymUDS_2eproto__INCLUDED

#include "GymUDS.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Environment final {
 public:
  static constexpr char const* service_full_name() {
    return "Environment";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::Empty& request, ::State* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>> AsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>> PrepareAsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>>(PrepareAsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::Action& request, ::State* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>> AsyncStep(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>> PrepareAsyncStep(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::State>>(PrepareAsyncStepRaw(context, request, cq));
    }
    virtual ::grpc::Status Sample(::grpc::ClientContext* context, const ::Empty& request, ::Action* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Action>> AsyncSample(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Action>>(AsyncSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Action>> PrepareAsyncSample(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Action>>(PrepareAsyncSampleRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Reset(::grpc::ClientContext* context, const ::Empty* request, ::State* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::Empty* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::Empty* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Step(::grpc::ClientContext* context, const ::Action* request, ::State* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Step(::grpc::ClientContext* context, const ::Action* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Step(::grpc::ClientContext* context, const ::Action* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Sample(::grpc::ClientContext* context, const ::Empty* request, ::Action* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Action* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Sample(::grpc::ClientContext* context, const ::Empty* request, ::Action* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Sample(::grpc::ClientContext* context, const ::Empty* request, ::Action* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Sample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Action* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Sample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Action* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::State>* AsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::State>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::State>* AsyncStepRaw(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::State>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Action>* AsyncSampleRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Action>* PrepareAsyncSampleRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::Empty& request, ::State* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>> AsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>> PrepareAsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::Action& request, ::State* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>> AsyncStep(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>> PrepareAsyncStep(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::State>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status Sample(::grpc::ClientContext* context, const ::Empty& request, ::Action* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Action>> AsyncSample(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Action>>(AsyncSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Action>> PrepareAsyncSample(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Action>>(PrepareAsyncSampleRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Reset(::grpc::ClientContext* context, const ::Empty* request, ::State* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::Empty* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::Empty* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Step(::grpc::ClientContext* context, const ::Action* request, ::State* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Step(::grpc::ClientContext* context, const ::Action* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Step(::grpc::ClientContext* context, const ::Action* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Sample(::grpc::ClientContext* context, const ::Empty* request, ::Action* response, std::function<void(::grpc::Status)>) override;
      void Sample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Action* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Sample(::grpc::ClientContext* context, const ::Empty* request, ::Action* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Sample(::grpc::ClientContext* context, const ::Empty* request, ::Action* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Sample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Action* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Sample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Action* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::State>* AsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::State>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::State>* AsyncStepRaw(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::State>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::Action& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Action>* AsyncSampleRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Action>* PrepareAsyncSampleRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_Sample_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::Empty* request, ::State* response);
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::Action* request, ::State* response);
    virtual ::grpc::Status Sample(::grpc::ServerContext* context, const ::Empty* request, ::Action* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::State>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::Action* request, ::grpc::ServerAsyncResponseWriter< ::State>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sample() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Sample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sample(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSample(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Action>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Reset<WithAsyncMethod_Step<WithAsyncMethod_Sample<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::State>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Empty* request, ::State* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::Empty, ::State>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::State>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Step() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Action, ::State>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Action* request, ::State* response) { return this->Step(context, request, response); }));}
    void SetMessageAllocatorFor_Step(
        ::grpc::experimental::MessageAllocator< ::Action, ::State>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Action, ::State>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Step(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Sample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Sample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Action>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Empty* request, ::Action* response) { return this->Sample(context, request, response); }));}
    void SetMessageAllocatorFor_Sample(
        ::grpc::experimental::MessageAllocator< ::Empty, ::Action>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Action>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Sample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sample(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Sample(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Sample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_Step<ExperimentalWithCallbackMethod_Sample<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_Step<ExperimentalWithCallbackMethod_Sample<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sample() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Sample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sample(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sample() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Sample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sample(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Step() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Step(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Step(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Sample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Sample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sample(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Sample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sample(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Sample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Sample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::State>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Empty, ::State>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::State>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Action, ::State>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Action, ::State>* streamer) {
                       return this->StreamedStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::Action* /*request*/, ::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Action,::State>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sample() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::Action>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Empty, ::Action>* streamer) {
                       return this->StreamedSample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sample(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Action* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::Action>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Sample<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Sample<Service > > > StreamedService;
};


#endif  // GRPC_GymUDS_2eproto__INCLUDED
