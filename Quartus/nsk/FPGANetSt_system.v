// (C) 1992-2018 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 18.1.0 Build 625 Standard Edition, Copyright (C) 2018 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system
/////////////////////////////////////////////////////////////////
module FPGANetSt_system
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   // AVS avs_processFPGA_cra
   input logic avs_processFPGA_cra_enable,
   input logic avs_processFPGA_cra_read,
   input logic avs_processFPGA_cra_write,
   input logic [4:0] avs_processFPGA_cra_address,
   input logic [63:0] avs_processFPGA_cra_writedata,
   input logic [7:0] avs_processFPGA_cra_byteenable,
   output logic [63:0] avs_processFPGA_cra_readdata,
   output logic avs_processFPGA_cra_readdatavalid,
   output logic kernel_irq,
   // AVM avm_memgmem0_DDR_port_0_0_rw
   output logic avm_memgmem0_DDR_port_0_0_rw_enable,
   output logic avm_memgmem0_DDR_port_0_0_rw_read,
   output logic avm_memgmem0_DDR_port_0_0_rw_write,
   output logic [4:0] avm_memgmem0_DDR_port_0_0_rw_burstcount,
   output logic [29:0] avm_memgmem0_DDR_port_0_0_rw_address,
   output logic [255:0] avm_memgmem0_DDR_port_0_0_rw_writedata,
   output logic [31:0] avm_memgmem0_DDR_port_0_0_rw_byteenable,
   input logic avm_memgmem0_DDR_port_0_0_rw_waitrequest,
   input logic [255:0] avm_memgmem0_DDR_port_0_0_rw_readdata,
   input logic avm_memgmem0_DDR_port_0_0_rw_readdatavalid,
   input logic avm_memgmem0_DDR_port_0_0_rw_writeack
);
   logic kernel_irqs;
   logic avm_kernel_rd_enable [4];
   logic avm_kernel_rd_read [4];
   logic avm_kernel_rd_write [4];
   logic [4:0] avm_kernel_rd_burstcount [4];
   logic [29:0] avm_kernel_rd_address [4];
   logic [255:0] avm_kernel_rd_writedata [4];
   logic [31:0] avm_kernel_rd_byteenable [4];
   logic avm_kernel_rd_waitrequest [4];
   logic [255:0] avm_kernel_rd_readdata [4];
   logic avm_kernel_rd_readdatavalid [4];
   logic avm_kernel_rd_writeack [4];
   logic avm_kernel_wr_enable [3];
   logic avm_kernel_wr_read [3];
   logic avm_kernel_wr_write [3];
   logic [4:0] avm_kernel_wr_burstcount [3];
   logic [29:0] avm_kernel_wr_address [3];
   logic [255:0] avm_kernel_wr_writedata [3];
   logic [31:0] avm_kernel_wr_byteenable [3];
   logic avm_kernel_wr_waitrequest [3];
   logic [255:0] avm_kernel_wr_readdata [3];
   logic avm_kernel_wr_readdatavalid [3];
   logic avm_kernel_wr_writeack [3];
   logic ic_avm_enable [1];
   logic ic_avm_read [1];
   logic ic_avm_write [1];
   logic [4:0] ic_avm_burstcount [1];
   logic [29:0] ic_avm_address [1];
   logic [255:0] ic_avm_writedata [1];
   logic [31:0] ic_avm_byteenable [1];
   logic ic_avm_waitrequest [1];
   logic [255:0] ic_avm_readdata [1];
   logic ic_avm_readdatavalid [1];
   logic ic_avm_writeack [1];

   // INST processFPGA_std_ic_inst of processFPGA_std_ic_partition_wrapper
   processFPGA_std_ic_partition_wrapper processFPGA_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_processFPGA(kernel_irqs),
      // AVS avs_processFPGA_cra
      .avs_processFPGA_cra_enable(avs_processFPGA_cra_enable),
      .avs_processFPGA_cra_read(avs_processFPGA_cra_read),
      .avs_processFPGA_cra_write(avs_processFPGA_cra_write),
      .avs_processFPGA_cra_address(avs_processFPGA_cra_address),
      .avs_processFPGA_cra_writedata(avs_processFPGA_cra_writedata),
      .avs_processFPGA_cra_byteenable(avs_processFPGA_cra_byteenable),
      .avs_processFPGA_cra_readdata(avs_processFPGA_cra_readdata),
      .avs_processFPGA_cra_readdatavalid(avs_processFPGA_cra_readdatavalid),
      // AVM processFPGA_0_avm_memcoalesce_conns_load_0
      .processFPGA_0_avm_memcoalesce_conns_load_0_enable(avm_kernel_rd_enable[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_read(avm_kernel_rd_read[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_write(avm_kernel_rd_write[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_burstcount(avm_kernel_rd_burstcount[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_address(avm_kernel_rd_address[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_writedata(avm_kernel_rd_writedata[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_byteenable(avm_kernel_rd_byteenable[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_waitrequest(avm_kernel_rd_waitrequest[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_readdata(avm_kernel_rd_readdata[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_readdatavalid(avm_kernel_rd_readdatavalid[0]),
      .processFPGA_0_avm_memcoalesce_conns_load_0_writeack(avm_kernel_rd_writeack[0]),
      // AVM processFPGA_0_avm_memcoalesce_neurons_load_0
      .processFPGA_0_avm_memcoalesce_neurons_load_0_enable(avm_kernel_rd_enable[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_read(avm_kernel_rd_read[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_write(avm_kernel_rd_write[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_burstcount(avm_kernel_rd_burstcount[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_address(avm_kernel_rd_address[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_writedata(avm_kernel_rd_writedata[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_byteenable(avm_kernel_rd_byteenable[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_waitrequest(avm_kernel_rd_waitrequest[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_readdata(avm_kernel_rd_readdata[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_readdatavalid(avm_kernel_rd_readdatavalid[1]),
      .processFPGA_0_avm_memcoalesce_neurons_load_0_writeack(avm_kernel_rd_writeack[1]),
      // AVM processFPGA_0_avm_memdep_52
      .processFPGA_0_avm_memdep_52_enable(avm_kernel_wr_enable[0]),
      .processFPGA_0_avm_memdep_52_read(avm_kernel_wr_read[0]),
      .processFPGA_0_avm_memdep_52_write(avm_kernel_wr_write[0]),
      .processFPGA_0_avm_memdep_52_burstcount(avm_kernel_wr_burstcount[0]),
      .processFPGA_0_avm_memdep_52_address(avm_kernel_wr_address[0]),
      .processFPGA_0_avm_memdep_52_writedata(avm_kernel_wr_writedata[0]),
      .processFPGA_0_avm_memdep_52_byteenable(avm_kernel_wr_byteenable[0]),
      .processFPGA_0_avm_memdep_52_waitrequest(avm_kernel_wr_waitrequest[0]),
      .processFPGA_0_avm_memdep_52_readdata(avm_kernel_wr_readdata[0]),
      .processFPGA_0_avm_memdep_52_readdatavalid(avm_kernel_wr_readdatavalid[0]),
      .processFPGA_0_avm_memdep_52_writeack(avm_kernel_wr_writeack[0]),
      // AVM processFPGA_0_avm_memdep_53
      .processFPGA_0_avm_memdep_53_enable(avm_kernel_wr_enable[1]),
      .processFPGA_0_avm_memdep_53_read(avm_kernel_wr_read[1]),
      .processFPGA_0_avm_memdep_53_write(avm_kernel_wr_write[1]),
      .processFPGA_0_avm_memdep_53_burstcount(avm_kernel_wr_burstcount[1]),
      .processFPGA_0_avm_memdep_53_address(avm_kernel_wr_address[1]),
      .processFPGA_0_avm_memdep_53_writedata(avm_kernel_wr_writedata[1]),
      .processFPGA_0_avm_memdep_53_byteenable(avm_kernel_wr_byteenable[1]),
      .processFPGA_0_avm_memdep_53_waitrequest(avm_kernel_wr_waitrequest[1]),
      .processFPGA_0_avm_memdep_53_readdata(avm_kernel_wr_readdata[1]),
      .processFPGA_0_avm_memdep_53_readdatavalid(avm_kernel_wr_readdatavalid[1]),
      .processFPGA_0_avm_memdep_53_writeack(avm_kernel_wr_writeack[1]),
      // AVM processFPGA_0_avm_unnamed_processFPGA0
      .processFPGA_0_avm_unnamed_processFPGA0_enable(avm_kernel_rd_enable[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_read(avm_kernel_rd_read[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_write(avm_kernel_rd_write[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_burstcount(avm_kernel_rd_burstcount[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_address(avm_kernel_rd_address[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_writedata(avm_kernel_rd_writedata[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_byteenable(avm_kernel_rd_byteenable[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_waitrequest(avm_kernel_rd_waitrequest[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_readdata(avm_kernel_rd_readdata[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_readdatavalid(avm_kernel_rd_readdatavalid[2]),
      .processFPGA_0_avm_unnamed_processFPGA0_writeack(avm_kernel_rd_writeack[2]),
      // AVM processFPGA_0_avm_unnamed_processFPGA14
      .processFPGA_0_avm_unnamed_processFPGA14_enable(avm_kernel_rd_enable[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_read(avm_kernel_rd_read[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_write(avm_kernel_rd_write[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_burstcount(avm_kernel_rd_burstcount[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_address(avm_kernel_rd_address[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_writedata(avm_kernel_rd_writedata[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_byteenable(avm_kernel_rd_byteenable[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_waitrequest(avm_kernel_rd_waitrequest[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_readdata(avm_kernel_rd_readdata[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_readdatavalid(avm_kernel_rd_readdatavalid[3]),
      .processFPGA_0_avm_unnamed_processFPGA14_writeack(avm_kernel_rd_writeack[3]),
      // AVM processFPGA_0_avm_unnamed_processFPGA426
      .processFPGA_0_avm_unnamed_processFPGA426_enable(avm_kernel_wr_enable[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_read(avm_kernel_wr_read[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_write(avm_kernel_wr_write[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_burstcount(avm_kernel_wr_burstcount[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_address(avm_kernel_wr_address[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_writedata(avm_kernel_wr_writedata[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_byteenable(avm_kernel_wr_byteenable[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_waitrequest(avm_kernel_wr_waitrequest[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_readdata(avm_kernel_wr_readdata[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_readdatavalid(avm_kernel_wr_readdatavalid[2]),
      .processFPGA_0_avm_unnamed_processFPGA426_writeack(avm_kernel_wr_writeack[2])
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(30),
      .SHIFT(30),
      .MWIDTH_BYTES(32),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(4),
      .NUM_WR_PORT(3),
      .NUM_DIMM(1),
      .ENABLE_DUAL_RING(0),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .ENABLE_REORDER(0),
      .NUM_REORDER(1),
      .HIGH_FMAX(0)
   )
   lsu_ic_top
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(avm_kernel_rd_read),
      .i_rd_address(avm_kernel_rd_address),
      .i_rd_burstcount(avm_kernel_rd_burstcount),
      .i_wr_byteenable(avm_kernel_wr_byteenable),
      .i_wr_address(avm_kernel_wr_address),
      .i_wr_request(avm_kernel_wr_write),
      .i_wr_burstcount(avm_kernel_wr_burstcount),
      .i_wr_writedata(avm_kernel_wr_writedata),
      .i_avm_waitrequest(ic_avm_waitrequest),
      .i_avm_readdata(ic_avm_readdata),
      .i_avm_readdatavalid(ic_avm_readdatavalid),
      .o_avm_byteenable(ic_avm_byteenable),
      .o_avm_address(ic_avm_address),
      .o_avm_read(ic_avm_read),
      .o_avm_write(ic_avm_write),
      .o_avm_burstcount(ic_avm_burstcount),
      .o_wr_waitrequest(avm_kernel_wr_waitrequest),
      .o_avm_writedata(ic_avm_writedata),
      .o_avm_writeack(avm_kernel_wr_writeack),
      .o_rd_waitrequest(avm_kernel_rd_waitrequest),
      .o_avm_readdata(avm_kernel_rd_readdata),
      .o_avm_readdatavalid(avm_kernel_rd_readdatavalid)
   );

   assign avm_memgmem0_DDR_port_0_0_rw_read = ic_avm_read[0];
   assign avm_memgmem0_DDR_port_0_0_rw_write = ic_avm_write[0];
   assign avm_memgmem0_DDR_port_0_0_rw_burstcount = ic_avm_burstcount[0];
   assign avm_memgmem0_DDR_port_0_0_rw_address = ic_avm_address[0];
   assign avm_memgmem0_DDR_port_0_0_rw_writedata = ic_avm_writedata[0];
   assign avm_memgmem0_DDR_port_0_0_rw_byteenable = ic_avm_byteenable[0];
   assign ic_avm_waitrequest[0] = avm_memgmem0_DDR_port_0_0_rw_waitrequest;
   assign ic_avm_readdata[0] = avm_memgmem0_DDR_port_0_0_rw_readdata;
   assign ic_avm_readdatavalid[0] = avm_memgmem0_DDR_port_0_0_rw_readdatavalid;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE processFPGA_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module processFPGA_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_processFPGA,
   // AVS avs_processFPGA_cra
   input logic avs_processFPGA_cra_enable,
   input logic avs_processFPGA_cra_read,
   input logic avs_processFPGA_cra_write,
   input logic [4:0] avs_processFPGA_cra_address,
   input logic [63:0] avs_processFPGA_cra_writedata,
   input logic [7:0] avs_processFPGA_cra_byteenable,
   output logic [63:0] avs_processFPGA_cra_readdata,
   output logic avs_processFPGA_cra_readdatavalid,
   // AVM processFPGA_0_avm_memcoalesce_conns_load_0
   output logic processFPGA_0_avm_memcoalesce_conns_load_0_enable,
   output logic processFPGA_0_avm_memcoalesce_conns_load_0_read,
   output logic processFPGA_0_avm_memcoalesce_conns_load_0_write,
   output logic [4:0] processFPGA_0_avm_memcoalesce_conns_load_0_burstcount,
   output logic [29:0] processFPGA_0_avm_memcoalesce_conns_load_0_address,
   output logic [255:0] processFPGA_0_avm_memcoalesce_conns_load_0_writedata,
   output logic [31:0] processFPGA_0_avm_memcoalesce_conns_load_0_byteenable,
   input logic processFPGA_0_avm_memcoalesce_conns_load_0_waitrequest,
   input logic [255:0] processFPGA_0_avm_memcoalesce_conns_load_0_readdata,
   input logic processFPGA_0_avm_memcoalesce_conns_load_0_readdatavalid,
   input logic processFPGA_0_avm_memcoalesce_conns_load_0_writeack,
   // AVM processFPGA_0_avm_memcoalesce_neurons_load_0
   output logic processFPGA_0_avm_memcoalesce_neurons_load_0_enable,
   output logic processFPGA_0_avm_memcoalesce_neurons_load_0_read,
   output logic processFPGA_0_avm_memcoalesce_neurons_load_0_write,
   output logic [4:0] processFPGA_0_avm_memcoalesce_neurons_load_0_burstcount,
   output logic [29:0] processFPGA_0_avm_memcoalesce_neurons_load_0_address,
   output logic [255:0] processFPGA_0_avm_memcoalesce_neurons_load_0_writedata,
   output logic [31:0] processFPGA_0_avm_memcoalesce_neurons_load_0_byteenable,
   input logic processFPGA_0_avm_memcoalesce_neurons_load_0_waitrequest,
   input logic [255:0] processFPGA_0_avm_memcoalesce_neurons_load_0_readdata,
   input logic processFPGA_0_avm_memcoalesce_neurons_load_0_readdatavalid,
   input logic processFPGA_0_avm_memcoalesce_neurons_load_0_writeack,
   // AVM processFPGA_0_avm_memdep_52
   output logic processFPGA_0_avm_memdep_52_enable,
   output logic processFPGA_0_avm_memdep_52_read,
   output logic processFPGA_0_avm_memdep_52_write,
   output logic [4:0] processFPGA_0_avm_memdep_52_burstcount,
   output logic [29:0] processFPGA_0_avm_memdep_52_address,
   output logic [255:0] processFPGA_0_avm_memdep_52_writedata,
   output logic [31:0] processFPGA_0_avm_memdep_52_byteenable,
   input logic processFPGA_0_avm_memdep_52_waitrequest,
   input logic [255:0] processFPGA_0_avm_memdep_52_readdata,
   input logic processFPGA_0_avm_memdep_52_readdatavalid,
   input logic processFPGA_0_avm_memdep_52_writeack,
   // AVM processFPGA_0_avm_memdep_53
   output logic processFPGA_0_avm_memdep_53_enable,
   output logic processFPGA_0_avm_memdep_53_read,
   output logic processFPGA_0_avm_memdep_53_write,
   output logic [4:0] processFPGA_0_avm_memdep_53_burstcount,
   output logic [29:0] processFPGA_0_avm_memdep_53_address,
   output logic [255:0] processFPGA_0_avm_memdep_53_writedata,
   output logic [31:0] processFPGA_0_avm_memdep_53_byteenable,
   input logic processFPGA_0_avm_memdep_53_waitrequest,
   input logic [255:0] processFPGA_0_avm_memdep_53_readdata,
   input logic processFPGA_0_avm_memdep_53_readdatavalid,
   input logic processFPGA_0_avm_memdep_53_writeack,
   // AVM processFPGA_0_avm_unnamed_processFPGA0
   output logic processFPGA_0_avm_unnamed_processFPGA0_enable,
   output logic processFPGA_0_avm_unnamed_processFPGA0_read,
   output logic processFPGA_0_avm_unnamed_processFPGA0_write,
   output logic [4:0] processFPGA_0_avm_unnamed_processFPGA0_burstcount,
   output logic [29:0] processFPGA_0_avm_unnamed_processFPGA0_address,
   output logic [255:0] processFPGA_0_avm_unnamed_processFPGA0_writedata,
   output logic [31:0] processFPGA_0_avm_unnamed_processFPGA0_byteenable,
   input logic processFPGA_0_avm_unnamed_processFPGA0_waitrequest,
   input logic [255:0] processFPGA_0_avm_unnamed_processFPGA0_readdata,
   input logic processFPGA_0_avm_unnamed_processFPGA0_readdatavalid,
   input logic processFPGA_0_avm_unnamed_processFPGA0_writeack,
   // AVM processFPGA_0_avm_unnamed_processFPGA14
   output logic processFPGA_0_avm_unnamed_processFPGA14_enable,
   output logic processFPGA_0_avm_unnamed_processFPGA14_read,
   output logic processFPGA_0_avm_unnamed_processFPGA14_write,
   output logic [4:0] processFPGA_0_avm_unnamed_processFPGA14_burstcount,
   output logic [29:0] processFPGA_0_avm_unnamed_processFPGA14_address,
   output logic [255:0] processFPGA_0_avm_unnamed_processFPGA14_writedata,
   output logic [31:0] processFPGA_0_avm_unnamed_processFPGA14_byteenable,
   input logic processFPGA_0_avm_unnamed_processFPGA14_waitrequest,
   input logic [255:0] processFPGA_0_avm_unnamed_processFPGA14_readdata,
   input logic processFPGA_0_avm_unnamed_processFPGA14_readdatavalid,
   input logic processFPGA_0_avm_unnamed_processFPGA14_writeack,
   // AVM processFPGA_0_avm_unnamed_processFPGA426
   output logic processFPGA_0_avm_unnamed_processFPGA426_enable,
   output logic processFPGA_0_avm_unnamed_processFPGA426_read,
   output logic processFPGA_0_avm_unnamed_processFPGA426_write,
   output logic [4:0] processFPGA_0_avm_unnamed_processFPGA426_burstcount,
   output logic [29:0] processFPGA_0_avm_unnamed_processFPGA426_address,
   output logic [255:0] processFPGA_0_avm_unnamed_processFPGA426_writedata,
   output logic [31:0] processFPGA_0_avm_unnamed_processFPGA426_byteenable,
   input logic processFPGA_0_avm_unnamed_processFPGA426_waitrequest,
   input logic [255:0] processFPGA_0_avm_unnamed_processFPGA426_readdata,
   input logic processFPGA_0_avm_unnamed_processFPGA426_readdatavalid,
   input logic processFPGA_0_avm_unnamed_processFPGA426_writeack
);
   logic processFPGA_start;
   logic [0:0] processFPGA_start_chain;
   logic [0:0] processFPGA_start_kernel_copy;
   logic [0:0] processFPGA_start_task_fd;
   logic [0:0] processFPGA_start_finish_element;
   logic processFPGA_finish;
   logic [0:0] processFPGA_finish_kernel_copy;
   logic [0:0] processFPGA_finish_chain;
   logic [31:0] processFPGA_global_size [2:0];
   logic [31:0] processFPGA_num_groups [2:0];
   logic [31:0] processFPGA_local_size [2:0];
   logic [31:0] processFPGA_global_offset [2:0];
   logic [31:0] processFPGA_work_dim;
   logic [31:0] processFPGA_wg_size;
   logic [0:0] processFPGA_wg_disp_stall_in;
   logic [0:0] processFPGA_wg_disp_stall_in_lookahead;
   logic [0:0] processFPGA_wg_disp_valid_out;
   logic processFPGA_wg_disp_start_out;
   logic [31:0] processFPGA_wg_disp_group_id_out [2:0];
   logic [31:0] processFPGA_wg_disp_global_id_base_out [2:0];
   logic processFPGA_wg_disp_dispatched_all_groups;
   logic [31:0] processFPGA_global_id [1][2:0];
   logic [31:0] processFPGA_local_id [1][2:0];
   logic [31:0] processFPGA_group_id [1][2:0];
   logic [0:0] processFPGA_pending_write;
   logic [0:0] processFPGA_lsu_active;
   logic [0:0] processFPGA_valid_in;
   logic [0:0] processFPGA_valid_out;
   logic [0:0] processFPGA_stall_in;
   logic [0:0] processFPGA_stall_out;
   logic processFPGA_cra_pending_write;
   logic processFPGA_cra_lsu_active;
   logic processFPGA_cra_valid_in;
   logic [447:0] processFPGA_kernel_arguments;

   assign processFPGA_start_chain[0] = processFPGA_start;
   assign processFPGA_finish_chain[0] = 1'b1;
   assign processFPGA_cra_pending_write = |processFPGA_pending_write;
   assign processFPGA_cra_lsu_active = |processFPGA_lsu_active;
   assign processFPGA_cra_valid_in = |processFPGA_valid_in;
   assign processFPGA_stall_in = 0;
   // INST processFPGA_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   processFPGA_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(processFPGA_start),
      .num_groups(processFPGA_num_groups),
      .local_size(processFPGA_local_size),
      .stall_in(processFPGA_wg_disp_stall_in),
      .stall_in_lookahead(processFPGA_wg_disp_stall_in_lookahead),
      .valid_out(processFPGA_wg_disp_valid_out),
      .group_id_out(processFPGA_wg_disp_group_id_out),
      .global_id_base_out(processFPGA_wg_disp_global_id_base_out),
      .start_out(processFPGA_wg_disp_start_out),
      .dispatched_all_groups(processFPGA_wg_disp_dispatched_all_groups)
   );

   // INST processFPGA_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   processFPGA_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(processFPGA_start),
      .wg_size(processFPGA_wg_size),
      .wg_dispatch_valid_out(processFPGA_wg_disp_valid_out),
      .wg_dispatch_stall_in(processFPGA_wg_disp_stall_in),
      .dispatched_all_groups(processFPGA_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(processFPGA_valid_out),
      .kernel_copy_stall_in(processFPGA_stall_in),
      .pending_writes(processFPGA_cra_pending_write),
      .finish(processFPGA_finish)
   );

   // INST processFPGA_cra_slave_inst of processFPGA_function_cra_slave
   processFPGA_function_cra_slave processFPGA_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(processFPGA_start),
      .finish(processFPGA_finish),
      .global_offset_0(processFPGA_global_offset[0]),
      .global_offset_1(processFPGA_global_offset[1]),
      .global_offset_2(processFPGA_global_offset[2]),
      .work_dim(processFPGA_work_dim),
      .has_a_lsu_active(processFPGA_cra_lsu_active),
      .has_a_write_pending(processFPGA_cra_pending_write),
      .valid_in(processFPGA_cra_valid_in),
      .global_size_0(processFPGA_global_size[0]),
      .global_size_1(processFPGA_global_size[1]),
      .global_size_2(processFPGA_global_size[2]),
      .num_groups_0(processFPGA_num_groups[0]),
      .num_groups_1(processFPGA_num_groups[1]),
      .num_groups_2(processFPGA_num_groups[2]),
      .local_size_0(processFPGA_local_size[0]),
      .local_size_1(processFPGA_local_size[1]),
      .local_size_2(processFPGA_local_size[2]),
      .workgroup_size(processFPGA_wg_size),
      .kernel_arguments(processFPGA_kernel_arguments),
      .cra_irq(cra_irq_processFPGA),
      // AVS avs_cra
      .avs_cra_enable(avs_processFPGA_cra_enable),
      .avs_cra_read(avs_processFPGA_cra_read),
      .avs_cra_write(avs_processFPGA_cra_write),
      .avs_cra_address(avs_processFPGA_cra_address),
      .avs_cra_writedata(avs_processFPGA_cra_writedata),
      .avs_cra_byteenable(avs_processFPGA_cra_byteenable),
      .avs_cra_readdata(avs_processFPGA_cra_readdata),
      .avs_cra_readdatavalid(avs_processFPGA_cra_readdatavalid)
   );

   // INST processFPGA_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(1),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   processFPGA_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(processFPGA_wg_disp_start_out),
      .valid_in(processFPGA_wg_disp_valid_out[0]),
      .stall_out(processFPGA_wg_disp_stall_in[0]),
      .stall_out_lookahead(processFPGA_wg_disp_stall_in_lookahead[0]),
      .stall_in(processFPGA_stall_out[0]),
      .valid_out(processFPGA_valid_in[0]),
      .group_id_in(processFPGA_wg_disp_group_id_out),
      .global_id_base_in(processFPGA_wg_disp_global_id_base_out),
      .local_size(processFPGA_local_size),
      .global_size(processFPGA_global_size),
      .local_id(processFPGA_local_id[0]),
      .global_id(processFPGA_global_id[0]),
      .group_id(processFPGA_group_id[0])
   );

   // INST processFPGA_inst_0 of processFPGA_top_wrapper_0
   processFPGA_top_wrapper_0 processFPGA_inst_0
   (
      .start(processFPGA_start_kernel_copy[0]),
      .kernel_arguments(processFPGA_kernel_arguments),
      .work_dim(processFPGA_work_dim),
      .global_offset(processFPGA_global_offset),
      .kernel_valid_out(processFPGA_valid_out[0]),
      .has_a_write_pending(processFPGA_pending_write[0]),
      .has_a_lsu_active(processFPGA_lsu_active[0]),
      .global_id(processFPGA_global_id[0]),
      .local_id(processFPGA_local_id[0]),
      .group_id(processFPGA_group_id[0]),
      .global_size(processFPGA_global_size),
      .local_size(processFPGA_local_size),
      .num_groups(processFPGA_num_groups),
      .workgroup_size(processFPGA_wg_size),
      .kernel_stall_out(processFPGA_stall_out[0]),
      .kernel_valid_in(processFPGA_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_conns_load_0
      .avm_memcoalesce_conns_load_0_enable(processFPGA_0_avm_memcoalesce_conns_load_0_enable),
      .avm_memcoalesce_conns_load_0_read(processFPGA_0_avm_memcoalesce_conns_load_0_read),
      .avm_memcoalesce_conns_load_0_write(processFPGA_0_avm_memcoalesce_conns_load_0_write),
      .avm_memcoalesce_conns_load_0_burstcount(processFPGA_0_avm_memcoalesce_conns_load_0_burstcount),
      .avm_memcoalesce_conns_load_0_address(processFPGA_0_avm_memcoalesce_conns_load_0_address),
      .avm_memcoalesce_conns_load_0_writedata(processFPGA_0_avm_memcoalesce_conns_load_0_writedata),
      .avm_memcoalesce_conns_load_0_byteenable(processFPGA_0_avm_memcoalesce_conns_load_0_byteenable),
      .avm_memcoalesce_conns_load_0_waitrequest(processFPGA_0_avm_memcoalesce_conns_load_0_waitrequest),
      .avm_memcoalesce_conns_load_0_readdata(processFPGA_0_avm_memcoalesce_conns_load_0_readdata),
      .avm_memcoalesce_conns_load_0_readdatavalid(processFPGA_0_avm_memcoalesce_conns_load_0_readdatavalid),
      .avm_memcoalesce_conns_load_0_writeack(processFPGA_0_avm_memcoalesce_conns_load_0_writeack),
      // AVM avm_memcoalesce_neurons_load_0
      .avm_memcoalesce_neurons_load_0_enable(processFPGA_0_avm_memcoalesce_neurons_load_0_enable),
      .avm_memcoalesce_neurons_load_0_read(processFPGA_0_avm_memcoalesce_neurons_load_0_read),
      .avm_memcoalesce_neurons_load_0_write(processFPGA_0_avm_memcoalesce_neurons_load_0_write),
      .avm_memcoalesce_neurons_load_0_burstcount(processFPGA_0_avm_memcoalesce_neurons_load_0_burstcount),
      .avm_memcoalesce_neurons_load_0_address(processFPGA_0_avm_memcoalesce_neurons_load_0_address),
      .avm_memcoalesce_neurons_load_0_writedata(processFPGA_0_avm_memcoalesce_neurons_load_0_writedata),
      .avm_memcoalesce_neurons_load_0_byteenable(processFPGA_0_avm_memcoalesce_neurons_load_0_byteenable),
      .avm_memcoalesce_neurons_load_0_waitrequest(processFPGA_0_avm_memcoalesce_neurons_load_0_waitrequest),
      .avm_memcoalesce_neurons_load_0_readdata(processFPGA_0_avm_memcoalesce_neurons_load_0_readdata),
      .avm_memcoalesce_neurons_load_0_readdatavalid(processFPGA_0_avm_memcoalesce_neurons_load_0_readdatavalid),
      .avm_memcoalesce_neurons_load_0_writeack(processFPGA_0_avm_memcoalesce_neurons_load_0_writeack),
      // AVM avm_memdep_52
      .avm_memdep_52_enable(processFPGA_0_avm_memdep_52_enable),
      .avm_memdep_52_read(processFPGA_0_avm_memdep_52_read),
      .avm_memdep_52_write(processFPGA_0_avm_memdep_52_write),
      .avm_memdep_52_burstcount(processFPGA_0_avm_memdep_52_burstcount),
      .avm_memdep_52_address(processFPGA_0_avm_memdep_52_address),
      .avm_memdep_52_writedata(processFPGA_0_avm_memdep_52_writedata),
      .avm_memdep_52_byteenable(processFPGA_0_avm_memdep_52_byteenable),
      .avm_memdep_52_waitrequest(processFPGA_0_avm_memdep_52_waitrequest),
      .avm_memdep_52_readdata(processFPGA_0_avm_memdep_52_readdata),
      .avm_memdep_52_readdatavalid(processFPGA_0_avm_memdep_52_readdatavalid),
      .avm_memdep_52_writeack(processFPGA_0_avm_memdep_52_writeack),
      // AVM avm_memdep_53
      .avm_memdep_53_enable(processFPGA_0_avm_memdep_53_enable),
      .avm_memdep_53_read(processFPGA_0_avm_memdep_53_read),
      .avm_memdep_53_write(processFPGA_0_avm_memdep_53_write),
      .avm_memdep_53_burstcount(processFPGA_0_avm_memdep_53_burstcount),
      .avm_memdep_53_address(processFPGA_0_avm_memdep_53_address),
      .avm_memdep_53_writedata(processFPGA_0_avm_memdep_53_writedata),
      .avm_memdep_53_byteenable(processFPGA_0_avm_memdep_53_byteenable),
      .avm_memdep_53_waitrequest(processFPGA_0_avm_memdep_53_waitrequest),
      .avm_memdep_53_readdata(processFPGA_0_avm_memdep_53_readdata),
      .avm_memdep_53_readdatavalid(processFPGA_0_avm_memdep_53_readdatavalid),
      .avm_memdep_53_writeack(processFPGA_0_avm_memdep_53_writeack),
      // AVM avm_unnamed_processFPGA0
      .avm_unnamed_processFPGA0_enable(processFPGA_0_avm_unnamed_processFPGA0_enable),
      .avm_unnamed_processFPGA0_read(processFPGA_0_avm_unnamed_processFPGA0_read),
      .avm_unnamed_processFPGA0_write(processFPGA_0_avm_unnamed_processFPGA0_write),
      .avm_unnamed_processFPGA0_burstcount(processFPGA_0_avm_unnamed_processFPGA0_burstcount),
      .avm_unnamed_processFPGA0_address(processFPGA_0_avm_unnamed_processFPGA0_address),
      .avm_unnamed_processFPGA0_writedata(processFPGA_0_avm_unnamed_processFPGA0_writedata),
      .avm_unnamed_processFPGA0_byteenable(processFPGA_0_avm_unnamed_processFPGA0_byteenable),
      .avm_unnamed_processFPGA0_waitrequest(processFPGA_0_avm_unnamed_processFPGA0_waitrequest),
      .avm_unnamed_processFPGA0_readdata(processFPGA_0_avm_unnamed_processFPGA0_readdata),
      .avm_unnamed_processFPGA0_readdatavalid(processFPGA_0_avm_unnamed_processFPGA0_readdatavalid),
      .avm_unnamed_processFPGA0_writeack(processFPGA_0_avm_unnamed_processFPGA0_writeack),
      // AVM avm_unnamed_processFPGA14
      .avm_unnamed_processFPGA14_enable(processFPGA_0_avm_unnamed_processFPGA14_enable),
      .avm_unnamed_processFPGA14_read(processFPGA_0_avm_unnamed_processFPGA14_read),
      .avm_unnamed_processFPGA14_write(processFPGA_0_avm_unnamed_processFPGA14_write),
      .avm_unnamed_processFPGA14_burstcount(processFPGA_0_avm_unnamed_processFPGA14_burstcount),
      .avm_unnamed_processFPGA14_address(processFPGA_0_avm_unnamed_processFPGA14_address),
      .avm_unnamed_processFPGA14_writedata(processFPGA_0_avm_unnamed_processFPGA14_writedata),
      .avm_unnamed_processFPGA14_byteenable(processFPGA_0_avm_unnamed_processFPGA14_byteenable),
      .avm_unnamed_processFPGA14_waitrequest(processFPGA_0_avm_unnamed_processFPGA14_waitrequest),
      .avm_unnamed_processFPGA14_readdata(processFPGA_0_avm_unnamed_processFPGA14_readdata),
      .avm_unnamed_processFPGA14_readdatavalid(processFPGA_0_avm_unnamed_processFPGA14_readdatavalid),
      .avm_unnamed_processFPGA14_writeack(processFPGA_0_avm_unnamed_processFPGA14_writeack),
      // AVM avm_unnamed_processFPGA426
      .avm_unnamed_processFPGA426_enable(processFPGA_0_avm_unnamed_processFPGA426_enable),
      .avm_unnamed_processFPGA426_read(processFPGA_0_avm_unnamed_processFPGA426_read),
      .avm_unnamed_processFPGA426_write(processFPGA_0_avm_unnamed_processFPGA426_write),
      .avm_unnamed_processFPGA426_burstcount(processFPGA_0_avm_unnamed_processFPGA426_burstcount),
      .avm_unnamed_processFPGA426_address(processFPGA_0_avm_unnamed_processFPGA426_address),
      .avm_unnamed_processFPGA426_writedata(processFPGA_0_avm_unnamed_processFPGA426_writedata),
      .avm_unnamed_processFPGA426_byteenable(processFPGA_0_avm_unnamed_processFPGA426_byteenable),
      .avm_unnamed_processFPGA426_waitrequest(processFPGA_0_avm_unnamed_processFPGA426_waitrequest),
      .avm_unnamed_processFPGA426_readdata(processFPGA_0_avm_unnamed_processFPGA426_readdata),
      .avm_unnamed_processFPGA426_readdatavalid(processFPGA_0_avm_unnamed_processFPGA426_readdatavalid),
      .avm_unnamed_processFPGA426_writeack(processFPGA_0_avm_unnamed_processFPGA426_writeack)
   );

   // INST processFPGA_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   processFPGA_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(processFPGA_start_chain[0]),
      .start_kernel(processFPGA_start_kernel_copy[0]),
      .start_finish_detector(processFPGA_start_task_fd[0]),
      .start_finish_chain_element(processFPGA_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE processFPGA_top_wrapper_0
/////////////////////////////////////////////////////////////////
module processFPGA_top_wrapper_0
(
   input logic start,
   input logic [447:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memcoalesce_conns_load_0
   output logic avm_memcoalesce_conns_load_0_enable,
   output logic avm_memcoalesce_conns_load_0_read,
   output logic avm_memcoalesce_conns_load_0_write,
   output logic [4:0] avm_memcoalesce_conns_load_0_burstcount,
   output logic [29:0] avm_memcoalesce_conns_load_0_address,
   output logic [255:0] avm_memcoalesce_conns_load_0_writedata,
   output logic [31:0] avm_memcoalesce_conns_load_0_byteenable,
   input logic avm_memcoalesce_conns_load_0_waitrequest,
   input logic [255:0] avm_memcoalesce_conns_load_0_readdata,
   input logic avm_memcoalesce_conns_load_0_readdatavalid,
   input logic avm_memcoalesce_conns_load_0_writeack,
   // AVM avm_memcoalesce_neurons_load_0
   output logic avm_memcoalesce_neurons_load_0_enable,
   output logic avm_memcoalesce_neurons_load_0_read,
   output logic avm_memcoalesce_neurons_load_0_write,
   output logic [4:0] avm_memcoalesce_neurons_load_0_burstcount,
   output logic [29:0] avm_memcoalesce_neurons_load_0_address,
   output logic [255:0] avm_memcoalesce_neurons_load_0_writedata,
   output logic [31:0] avm_memcoalesce_neurons_load_0_byteenable,
   input logic avm_memcoalesce_neurons_load_0_waitrequest,
   input logic [255:0] avm_memcoalesce_neurons_load_0_readdata,
   input logic avm_memcoalesce_neurons_load_0_readdatavalid,
   input logic avm_memcoalesce_neurons_load_0_writeack,
   // AVM avm_memdep_52
   output logic avm_memdep_52_enable,
   output logic avm_memdep_52_read,
   output logic avm_memdep_52_write,
   output logic [4:0] avm_memdep_52_burstcount,
   output logic [29:0] avm_memdep_52_address,
   output logic [255:0] avm_memdep_52_writedata,
   output logic [31:0] avm_memdep_52_byteenable,
   input logic avm_memdep_52_waitrequest,
   input logic [255:0] avm_memdep_52_readdata,
   input logic avm_memdep_52_readdatavalid,
   input logic avm_memdep_52_writeack,
   // AVM avm_memdep_53
   output logic avm_memdep_53_enable,
   output logic avm_memdep_53_read,
   output logic avm_memdep_53_write,
   output logic [4:0] avm_memdep_53_burstcount,
   output logic [29:0] avm_memdep_53_address,
   output logic [255:0] avm_memdep_53_writedata,
   output logic [31:0] avm_memdep_53_byteenable,
   input logic avm_memdep_53_waitrequest,
   input logic [255:0] avm_memdep_53_readdata,
   input logic avm_memdep_53_readdatavalid,
   input logic avm_memdep_53_writeack,
   // AVM avm_unnamed_processFPGA0
   output logic avm_unnamed_processFPGA0_enable,
   output logic avm_unnamed_processFPGA0_read,
   output logic avm_unnamed_processFPGA0_write,
   output logic [4:0] avm_unnamed_processFPGA0_burstcount,
   output logic [29:0] avm_unnamed_processFPGA0_address,
   output logic [255:0] avm_unnamed_processFPGA0_writedata,
   output logic [31:0] avm_unnamed_processFPGA0_byteenable,
   input logic avm_unnamed_processFPGA0_waitrequest,
   input logic [255:0] avm_unnamed_processFPGA0_readdata,
   input logic avm_unnamed_processFPGA0_readdatavalid,
   input logic avm_unnamed_processFPGA0_writeack,
   // AVM avm_unnamed_processFPGA14
   output logic avm_unnamed_processFPGA14_enable,
   output logic avm_unnamed_processFPGA14_read,
   output logic avm_unnamed_processFPGA14_write,
   output logic [4:0] avm_unnamed_processFPGA14_burstcount,
   output logic [29:0] avm_unnamed_processFPGA14_address,
   output logic [255:0] avm_unnamed_processFPGA14_writedata,
   output logic [31:0] avm_unnamed_processFPGA14_byteenable,
   input logic avm_unnamed_processFPGA14_waitrequest,
   input logic [255:0] avm_unnamed_processFPGA14_readdata,
   input logic avm_unnamed_processFPGA14_readdatavalid,
   input logic avm_unnamed_processFPGA14_writeack,
   // AVM avm_unnamed_processFPGA426
   output logic avm_unnamed_processFPGA426_enable,
   output logic avm_unnamed_processFPGA426_read,
   output logic avm_unnamed_processFPGA426_write,
   output logic [4:0] avm_unnamed_processFPGA426_burstcount,
   output logic [29:0] avm_unnamed_processFPGA426_address,
   output logic [255:0] avm_unnamed_processFPGA426_writedata,
   output logic [31:0] avm_unnamed_processFPGA426_byteenable,
   input logic avm_unnamed_processFPGA426_waitrequest,
   input logic [255:0] avm_unnamed_processFPGA426_readdata,
   input logic avm_unnamed_processFPGA426_readdatavalid,
   input logic avm_unnamed_processFPGA426_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   genvar __n;
   genvar __o;
   genvar __p;
   genvar __q;
   genvar __r;
   logic lmem_invalid_single_bit;
   logic [8:0] lmem_invalid_aspaces;
   logic local_avm_aspace5_enable [1][6];
   logic local_avm_aspace5_read [1][6];
   logic local_avm_aspace5_write [1][6];
   logic local_avm_aspace5_burstcount [1][6];
   logic [31:0] local_avm_aspace5_address [1][6];
   logic [15:0] local_avm_aspace5_writedata [1][6];
   logic [1:0] local_avm_aspace5_byteenable [1][6];
   logic local_avm_aspace5_waitrequest [1][6];
   logic [15:0] local_avm_aspace5_readdata [1][6];
   logic local_avm_aspace5_readdatavalid [1][6];
   logic local_avm_aspace5_writeack [1][6];
   logic local_avm_aspace6_enable [1][87];
   logic local_avm_aspace6_read [1][87];
   logic local_avm_aspace6_write [1][87];
   logic local_avm_aspace6_burstcount [1][87];
   logic [31:0] local_avm_aspace6_address [1][87];
   logic [31:0] local_avm_aspace6_writedata [1][87];
   logic [3:0] local_avm_aspace6_byteenable [1][87];
   logic local_avm_aspace6_waitrequest [1][87];
   logic [31:0] local_avm_aspace6_readdata [1][87];
   logic local_avm_aspace6_readdatavalid [1][87];
   logic local_avm_aspace6_writeack [1][87];
   logic local_avm_aspace7_enable [1][37];
   logic local_avm_aspace7_read [1][37];
   logic local_avm_aspace7_write [1][37];
   logic local_avm_aspace7_burstcount [1][37];
   logic [31:0] local_avm_aspace7_address [1][37];
   logic [31:0] local_avm_aspace7_writedata [1][37];
   logic [3:0] local_avm_aspace7_byteenable [1][37];
   logic local_avm_aspace7_waitrequest [1][37];
   logic [31:0] local_avm_aspace7_readdata [1][37];
   logic local_avm_aspace7_readdatavalid [1][37];
   logic local_avm_aspace7_writeack [1][37];
   logic local_avm_aspace8_enable [1][6];
   logic local_avm_aspace8_read [1][6];
   logic local_avm_aspace8_write [1][6];
   logic local_avm_aspace8_burstcount [1][6];
   logic [31:0] local_avm_aspace8_address [1][6];
   logic [15:0] local_avm_aspace8_writedata [1][6];
   logic [1:0] local_avm_aspace8_byteenable [1][6];
   logic local_avm_aspace8_waitrequest [1][6];
   logic [15:0] local_avm_aspace8_readdata [1][6];
   logic local_avm_aspace8_readdatavalid [1][6];
   logic local_avm_aspace8_writeack [1][6];
   logic local_avm_aspace9_enable [1][10];
   logic local_avm_aspace9_read [1][10];
   logic local_avm_aspace9_write [1][10];
   logic local_avm_aspace9_burstcount [1][10];
   logic [31:0] local_avm_aspace9_address [1][10];
   logic [15:0] local_avm_aspace9_writedata [1][10];
   logic [1:0] local_avm_aspace9_byteenable [1][10];
   logic local_avm_aspace9_waitrequest [1][10];
   logic [15:0] local_avm_aspace9_readdata [1][10];
   logic local_avm_aspace9_readdatavalid [1][10];
   logic local_avm_aspace9_writeack [1][10];
   logic local_avm_aspace10_enable [1][10];
   logic local_avm_aspace10_read [1][10];
   logic local_avm_aspace10_write [1][10];
   logic local_avm_aspace10_burstcount [1][10];
   logic [31:0] local_avm_aspace10_address [1][10];
   logic [15:0] local_avm_aspace10_writedata [1][10];
   logic [1:0] local_avm_aspace10_byteenable [1][10];
   logic local_avm_aspace10_waitrequest [1][10];
   logic [15:0] local_avm_aspace10_readdata [1][10];
   logic local_avm_aspace10_readdatavalid [1][10];
   logic local_avm_aspace10_writeack [1][10];
   logic local_avm_aspace11_enable [1][4];
   logic local_avm_aspace11_read [1][4];
   logic local_avm_aspace11_write [1][4];
   logic local_avm_aspace11_burstcount [1][4];
   logic [31:0] local_avm_aspace11_address [1][4];
   logic [63:0] local_avm_aspace11_writedata [1][4];
   logic [7:0] local_avm_aspace11_byteenable [1][4];
   logic local_avm_aspace11_waitrequest [1][4];
   logic [63:0] local_avm_aspace11_readdata [1][4];
   logic local_avm_aspace11_readdatavalid [1][4];
   logic local_avm_aspace11_writeack [1][4];
   logic local_avm_aspace12_enable [1][2];
   logic local_avm_aspace12_read [1][2];
   logic local_avm_aspace12_write [1][2];
   logic local_avm_aspace12_burstcount [1][2];
   logic [31:0] local_avm_aspace12_address [1][2];
   logic [31:0] local_avm_aspace12_writedata [1][2];
   logic [3:0] local_avm_aspace12_byteenable [1][2];
   logic local_avm_aspace12_waitrequest [1][2];
   logic [31:0] local_avm_aspace12_readdata [1][2];
   logic local_avm_aspace12_readdatavalid [1][2];
   logic local_avm_aspace12_writeack [1][2];
   logic local_avm_aspace13_enable [1][2];
   logic local_avm_aspace13_read [1][2];
   logic local_avm_aspace13_write [1][2];
   logic local_avm_aspace13_burstcount [1][2];
   logic [31:0] local_avm_aspace13_address [1][2];
   logic [31:0] local_avm_aspace13_writedata [1][2];
   logic [3:0] local_avm_aspace13_byteenable [1][2];
   logic local_avm_aspace13_waitrequest [1][2];
   logic [31:0] local_avm_aspace13_readdata [1][2];
   logic local_avm_aspace13_readdatavalid [1][2];
   logic local_avm_aspace13_writeack [1][2];

   // INST kernel of processFPGA_function_wrapper
   processFPGA_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_conns_load_0
      .avm_memcoalesce_conns_load_0_enable(avm_memcoalesce_conns_load_0_enable),
      .avm_memcoalesce_conns_load_0_read(avm_memcoalesce_conns_load_0_read),
      .avm_memcoalesce_conns_load_0_write(avm_memcoalesce_conns_load_0_write),
      .avm_memcoalesce_conns_load_0_burstcount(avm_memcoalesce_conns_load_0_burstcount),
      .avm_memcoalesce_conns_load_0_address(avm_memcoalesce_conns_load_0_address),
      .avm_memcoalesce_conns_load_0_writedata(avm_memcoalesce_conns_load_0_writedata),
      .avm_memcoalesce_conns_load_0_byteenable(avm_memcoalesce_conns_load_0_byteenable),
      .avm_memcoalesce_conns_load_0_waitrequest(avm_memcoalesce_conns_load_0_waitrequest),
      .avm_memcoalesce_conns_load_0_readdata(avm_memcoalesce_conns_load_0_readdata),
      .avm_memcoalesce_conns_load_0_readdatavalid(avm_memcoalesce_conns_load_0_readdatavalid),
      .avm_memcoalesce_conns_load_0_writeack(avm_memcoalesce_conns_load_0_writeack),
      // AVM avm_memcoalesce_neurons_load_0
      .avm_memcoalesce_neurons_load_0_enable(avm_memcoalesce_neurons_load_0_enable),
      .avm_memcoalesce_neurons_load_0_read(avm_memcoalesce_neurons_load_0_read),
      .avm_memcoalesce_neurons_load_0_write(avm_memcoalesce_neurons_load_0_write),
      .avm_memcoalesce_neurons_load_0_burstcount(avm_memcoalesce_neurons_load_0_burstcount),
      .avm_memcoalesce_neurons_load_0_address(avm_memcoalesce_neurons_load_0_address),
      .avm_memcoalesce_neurons_load_0_writedata(avm_memcoalesce_neurons_load_0_writedata),
      .avm_memcoalesce_neurons_load_0_byteenable(avm_memcoalesce_neurons_load_0_byteenable),
      .avm_memcoalesce_neurons_load_0_waitrequest(avm_memcoalesce_neurons_load_0_waitrequest),
      .avm_memcoalesce_neurons_load_0_readdata(avm_memcoalesce_neurons_load_0_readdata),
      .avm_memcoalesce_neurons_load_0_readdatavalid(avm_memcoalesce_neurons_load_0_readdatavalid),
      .avm_memcoalesce_neurons_load_0_writeack(avm_memcoalesce_neurons_load_0_writeack),
      // AVM avm_memdep_52
      .avm_memdep_52_enable(avm_memdep_52_enable),
      .avm_memdep_52_read(avm_memdep_52_read),
      .avm_memdep_52_write(avm_memdep_52_write),
      .avm_memdep_52_burstcount(avm_memdep_52_burstcount),
      .avm_memdep_52_address(avm_memdep_52_address),
      .avm_memdep_52_writedata(avm_memdep_52_writedata),
      .avm_memdep_52_byteenable(avm_memdep_52_byteenable),
      .avm_memdep_52_waitrequest(avm_memdep_52_waitrequest),
      .avm_memdep_52_readdata(avm_memdep_52_readdata),
      .avm_memdep_52_readdatavalid(avm_memdep_52_readdatavalid),
      .avm_memdep_52_writeack(avm_memdep_52_writeack),
      // AVM avm_memdep_53
      .avm_memdep_53_enable(avm_memdep_53_enable),
      .avm_memdep_53_read(avm_memdep_53_read),
      .avm_memdep_53_write(avm_memdep_53_write),
      .avm_memdep_53_burstcount(avm_memdep_53_burstcount),
      .avm_memdep_53_address(avm_memdep_53_address),
      .avm_memdep_53_writedata(avm_memdep_53_writedata),
      .avm_memdep_53_byteenable(avm_memdep_53_byteenable),
      .avm_memdep_53_waitrequest(avm_memdep_53_waitrequest),
      .avm_memdep_53_readdata(avm_memdep_53_readdata),
      .avm_memdep_53_readdatavalid(avm_memdep_53_readdatavalid),
      .avm_memdep_53_writeack(avm_memdep_53_writeack),
      // AVM avm_unnamed_processFPGA0
      .avm_unnamed_processFPGA0_enable(avm_unnamed_processFPGA0_enable),
      .avm_unnamed_processFPGA0_read(avm_unnamed_processFPGA0_read),
      .avm_unnamed_processFPGA0_write(avm_unnamed_processFPGA0_write),
      .avm_unnamed_processFPGA0_burstcount(avm_unnamed_processFPGA0_burstcount),
      .avm_unnamed_processFPGA0_address(avm_unnamed_processFPGA0_address),
      .avm_unnamed_processFPGA0_writedata(avm_unnamed_processFPGA0_writedata),
      .avm_unnamed_processFPGA0_byteenable(avm_unnamed_processFPGA0_byteenable),
      .avm_unnamed_processFPGA0_waitrequest(avm_unnamed_processFPGA0_waitrequest),
      .avm_unnamed_processFPGA0_readdata(avm_unnamed_processFPGA0_readdata),
      .avm_unnamed_processFPGA0_readdatavalid(avm_unnamed_processFPGA0_readdatavalid),
      .avm_unnamed_processFPGA0_writeack(avm_unnamed_processFPGA0_writeack),
      // AVM avm_unnamed_processFPGA14
      .avm_unnamed_processFPGA14_enable(avm_unnamed_processFPGA14_enable),
      .avm_unnamed_processFPGA14_read(avm_unnamed_processFPGA14_read),
      .avm_unnamed_processFPGA14_write(avm_unnamed_processFPGA14_write),
      .avm_unnamed_processFPGA14_burstcount(avm_unnamed_processFPGA14_burstcount),
      .avm_unnamed_processFPGA14_address(avm_unnamed_processFPGA14_address),
      .avm_unnamed_processFPGA14_writedata(avm_unnamed_processFPGA14_writedata),
      .avm_unnamed_processFPGA14_byteenable(avm_unnamed_processFPGA14_byteenable),
      .avm_unnamed_processFPGA14_waitrequest(avm_unnamed_processFPGA14_waitrequest),
      .avm_unnamed_processFPGA14_readdata(avm_unnamed_processFPGA14_readdata),
      .avm_unnamed_processFPGA14_readdatavalid(avm_unnamed_processFPGA14_readdatavalid),
      .avm_unnamed_processFPGA14_writeack(avm_unnamed_processFPGA14_writeack),
      // AVM avm_unnamed_processFPGA426
      .avm_unnamed_processFPGA426_enable(avm_unnamed_processFPGA426_enable),
      .avm_unnamed_processFPGA426_read(avm_unnamed_processFPGA426_read),
      .avm_unnamed_processFPGA426_write(avm_unnamed_processFPGA426_write),
      .avm_unnamed_processFPGA426_burstcount(avm_unnamed_processFPGA426_burstcount),
      .avm_unnamed_processFPGA426_address(avm_unnamed_processFPGA426_address),
      .avm_unnamed_processFPGA426_writedata(avm_unnamed_processFPGA426_writedata),
      .avm_unnamed_processFPGA426_byteenable(avm_unnamed_processFPGA426_byteenable),
      .avm_unnamed_processFPGA426_waitrequest(avm_unnamed_processFPGA426_waitrequest),
      .avm_unnamed_processFPGA426_readdata(avm_unnamed_processFPGA426_readdata),
      .avm_unnamed_processFPGA426_readdatavalid(avm_unnamed_processFPGA426_readdatavalid),
      .avm_unnamed_processFPGA426_writeack(avm_unnamed_processFPGA426_writeack),
      // AVM avm_memdep
      .avm_memdep_enable(local_avm_aspace5_enable[0][0]),
      .avm_memdep_read(local_avm_aspace5_read[0][0]),
      .avm_memdep_write(local_avm_aspace5_write[0][0]),
      .avm_memdep_burstcount(local_avm_aspace5_burstcount[0][0]),
      .avm_memdep_address(local_avm_aspace5_address[0][0]),
      .avm_memdep_writedata(local_avm_aspace5_writedata[0][0]),
      .avm_memdep_byteenable(local_avm_aspace5_byteenable[0][0]),
      .avm_memdep_waitrequest(local_avm_aspace5_waitrequest[0][0]),
      .avm_memdep_readdata(local_avm_aspace5_readdata[0][0]),
      .avm_memdep_readdatavalid(local_avm_aspace5_readdatavalid[0][0]),
      .avm_memdep_writeack(local_avm_aspace5_writeack[0][0]),
      // AVM avm_unnamed_processFPGA116
      .avm_unnamed_processFPGA116_enable(local_avm_aspace5_enable[0][1]),
      .avm_unnamed_processFPGA116_read(local_avm_aspace5_read[0][1]),
      .avm_unnamed_processFPGA116_write(local_avm_aspace5_write[0][1]),
      .avm_unnamed_processFPGA116_burstcount(local_avm_aspace5_burstcount[0][1]),
      .avm_unnamed_processFPGA116_address(local_avm_aspace5_address[0][1]),
      .avm_unnamed_processFPGA116_writedata(local_avm_aspace5_writedata[0][1]),
      .avm_unnamed_processFPGA116_byteenable(local_avm_aspace5_byteenable[0][1]),
      .avm_unnamed_processFPGA116_waitrequest(local_avm_aspace5_waitrequest[0][1]),
      .avm_unnamed_processFPGA116_readdata(local_avm_aspace5_readdata[0][1]),
      .avm_unnamed_processFPGA116_readdatavalid(local_avm_aspace5_readdatavalid[0][1]),
      .avm_unnamed_processFPGA116_writeack(local_avm_aspace5_writeack[0][1]),
      // AVM avm_unnamed_processFPGA220
      .avm_unnamed_processFPGA220_enable(local_avm_aspace5_enable[0][2]),
      .avm_unnamed_processFPGA220_read(local_avm_aspace5_read[0][2]),
      .avm_unnamed_processFPGA220_write(local_avm_aspace5_write[0][2]),
      .avm_unnamed_processFPGA220_burstcount(local_avm_aspace5_burstcount[0][2]),
      .avm_unnamed_processFPGA220_address(local_avm_aspace5_address[0][2]),
      .avm_unnamed_processFPGA220_writedata(local_avm_aspace5_writedata[0][2]),
      .avm_unnamed_processFPGA220_byteenable(local_avm_aspace5_byteenable[0][2]),
      .avm_unnamed_processFPGA220_waitrequest(local_avm_aspace5_waitrequest[0][2]),
      .avm_unnamed_processFPGA220_readdata(local_avm_aspace5_readdata[0][2]),
      .avm_unnamed_processFPGA220_readdatavalid(local_avm_aspace5_readdatavalid[0][2]),
      .avm_unnamed_processFPGA220_writeack(local_avm_aspace5_writeack[0][2]),
      // AVM avm_unnamed_processFPGA327
      .avm_unnamed_processFPGA327_enable(local_avm_aspace5_enable[0][3]),
      .avm_unnamed_processFPGA327_read(local_avm_aspace5_read[0][3]),
      .avm_unnamed_processFPGA327_write(local_avm_aspace5_write[0][3]),
      .avm_unnamed_processFPGA327_burstcount(local_avm_aspace5_burstcount[0][3]),
      .avm_unnamed_processFPGA327_address(local_avm_aspace5_address[0][3]),
      .avm_unnamed_processFPGA327_writedata(local_avm_aspace5_writedata[0][3]),
      .avm_unnamed_processFPGA327_byteenable(local_avm_aspace5_byteenable[0][3]),
      .avm_unnamed_processFPGA327_waitrequest(local_avm_aspace5_waitrequest[0][3]),
      .avm_unnamed_processFPGA327_readdata(local_avm_aspace5_readdata[0][3]),
      .avm_unnamed_processFPGA327_readdatavalid(local_avm_aspace5_readdatavalid[0][3]),
      .avm_unnamed_processFPGA327_writeack(local_avm_aspace5_writeack[0][3]),
      // AVM avm_unnamed_processFPGA394
      .avm_unnamed_processFPGA394_enable(local_avm_aspace5_enable[0][4]),
      .avm_unnamed_processFPGA394_read(local_avm_aspace5_read[0][4]),
      .avm_unnamed_processFPGA394_write(local_avm_aspace5_write[0][4]),
      .avm_unnamed_processFPGA394_burstcount(local_avm_aspace5_burstcount[0][4]),
      .avm_unnamed_processFPGA394_address(local_avm_aspace5_address[0][4]),
      .avm_unnamed_processFPGA394_writedata(local_avm_aspace5_writedata[0][4]),
      .avm_unnamed_processFPGA394_byteenable(local_avm_aspace5_byteenable[0][4]),
      .avm_unnamed_processFPGA394_waitrequest(local_avm_aspace5_waitrequest[0][4]),
      .avm_unnamed_processFPGA394_readdata(local_avm_aspace5_readdata[0][4]),
      .avm_unnamed_processFPGA394_readdatavalid(local_avm_aspace5_readdatavalid[0][4]),
      .avm_unnamed_processFPGA394_writeack(local_avm_aspace5_writeack[0][4]),
      // AVM avm_unnamed_processFPGA61
      .avm_unnamed_processFPGA61_enable(local_avm_aspace5_enable[0][5]),
      .avm_unnamed_processFPGA61_read(local_avm_aspace5_read[0][5]),
      .avm_unnamed_processFPGA61_write(local_avm_aspace5_write[0][5]),
      .avm_unnamed_processFPGA61_burstcount(local_avm_aspace5_burstcount[0][5]),
      .avm_unnamed_processFPGA61_address(local_avm_aspace5_address[0][5]),
      .avm_unnamed_processFPGA61_writedata(local_avm_aspace5_writedata[0][5]),
      .avm_unnamed_processFPGA61_byteenable(local_avm_aspace5_byteenable[0][5]),
      .avm_unnamed_processFPGA61_waitrequest(local_avm_aspace5_waitrequest[0][5]),
      .avm_unnamed_processFPGA61_readdata(local_avm_aspace5_readdata[0][5]),
      .avm_unnamed_processFPGA61_readdatavalid(local_avm_aspace5_readdatavalid[0][5]),
      .avm_unnamed_processFPGA61_writeack(local_avm_aspace5_writeack[0][5]),
      // AVM avm_memcoalesce_localNeurons_load_0
      .avm_memcoalesce_localNeurons_load_0_enable(local_avm_aspace6_enable[0][0]),
      .avm_memcoalesce_localNeurons_load_0_read(local_avm_aspace6_read[0][0]),
      .avm_memcoalesce_localNeurons_load_0_write(local_avm_aspace6_write[0][0]),
      .avm_memcoalesce_localNeurons_load_0_burstcount(local_avm_aspace6_burstcount[0][0]),
      .avm_memcoalesce_localNeurons_load_0_address(local_avm_aspace6_address[0][0]),
      .avm_memcoalesce_localNeurons_load_0_writedata(local_avm_aspace6_writedata[0][0]),
      .avm_memcoalesce_localNeurons_load_0_byteenable(local_avm_aspace6_byteenable[0][0]),
      .avm_memcoalesce_localNeurons_load_0_waitrequest(local_avm_aspace6_waitrequest[0][0]),
      .avm_memcoalesce_localNeurons_load_0_readdata(local_avm_aspace6_readdata[0][0]),
      .avm_memcoalesce_localNeurons_load_0_readdatavalid(local_avm_aspace6_readdatavalid[0][0]),
      .avm_memcoalesce_localNeurons_load_0_writeack(local_avm_aspace6_writeack[0][0]),
      // AVM avm_memcoalesce_localNeurons_load_0109
      .avm_memcoalesce_localNeurons_load_0109_enable(local_avm_aspace6_enable[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_read(local_avm_aspace6_read[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_write(local_avm_aspace6_write[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_burstcount(local_avm_aspace6_burstcount[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_address(local_avm_aspace6_address[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_writedata(local_avm_aspace6_writedata[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_byteenable(local_avm_aspace6_byteenable[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_waitrequest(local_avm_aspace6_waitrequest[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_readdata(local_avm_aspace6_readdata[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_readdatavalid(local_avm_aspace6_readdatavalid[0][1]),
      .avm_memcoalesce_localNeurons_load_0109_writeack(local_avm_aspace6_writeack[0][1]),
      // AVM avm_memcoalesce_localNeurons_load_0115
      .avm_memcoalesce_localNeurons_load_0115_enable(local_avm_aspace6_enable[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_read(local_avm_aspace6_read[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_write(local_avm_aspace6_write[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_burstcount(local_avm_aspace6_burstcount[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_address(local_avm_aspace6_address[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_writedata(local_avm_aspace6_writedata[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_byteenable(local_avm_aspace6_byteenable[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_waitrequest(local_avm_aspace6_waitrequest[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_readdata(local_avm_aspace6_readdata[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_readdatavalid(local_avm_aspace6_readdatavalid[0][2]),
      .avm_memcoalesce_localNeurons_load_0115_writeack(local_avm_aspace6_writeack[0][2]),
      // AVM avm_memcoalesce_localNeurons_load_0126
      .avm_memcoalesce_localNeurons_load_0126_enable(local_avm_aspace6_enable[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_read(local_avm_aspace6_read[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_write(local_avm_aspace6_write[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_burstcount(local_avm_aspace6_burstcount[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_address(local_avm_aspace6_address[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_writedata(local_avm_aspace6_writedata[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_byteenable(local_avm_aspace6_byteenable[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_waitrequest(local_avm_aspace6_waitrequest[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_readdata(local_avm_aspace6_readdata[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_readdatavalid(local_avm_aspace6_readdatavalid[0][3]),
      .avm_memcoalesce_localNeurons_load_0126_writeack(local_avm_aspace6_writeack[0][3]),
      // AVM avm_memcoalesce_localNeurons_load_0132
      .avm_memcoalesce_localNeurons_load_0132_enable(local_avm_aspace6_enable[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_read(local_avm_aspace6_read[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_write(local_avm_aspace6_write[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_burstcount(local_avm_aspace6_burstcount[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_address(local_avm_aspace6_address[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_writedata(local_avm_aspace6_writedata[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_byteenable(local_avm_aspace6_byteenable[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_waitrequest(local_avm_aspace6_waitrequest[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_readdata(local_avm_aspace6_readdata[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_readdatavalid(local_avm_aspace6_readdatavalid[0][4]),
      .avm_memcoalesce_localNeurons_load_0132_writeack(local_avm_aspace6_writeack[0][4]),
      // AVM avm_memcoalesce_localNeurons_load_014
      .avm_memcoalesce_localNeurons_load_014_enable(local_avm_aspace6_enable[0][5]),
      .avm_memcoalesce_localNeurons_load_014_read(local_avm_aspace6_read[0][5]),
      .avm_memcoalesce_localNeurons_load_014_write(local_avm_aspace6_write[0][5]),
      .avm_memcoalesce_localNeurons_load_014_burstcount(local_avm_aspace6_burstcount[0][5]),
      .avm_memcoalesce_localNeurons_load_014_address(local_avm_aspace6_address[0][5]),
      .avm_memcoalesce_localNeurons_load_014_writedata(local_avm_aspace6_writedata[0][5]),
      .avm_memcoalesce_localNeurons_load_014_byteenable(local_avm_aspace6_byteenable[0][5]),
      .avm_memcoalesce_localNeurons_load_014_waitrequest(local_avm_aspace6_waitrequest[0][5]),
      .avm_memcoalesce_localNeurons_load_014_readdata(local_avm_aspace6_readdata[0][5]),
      .avm_memcoalesce_localNeurons_load_014_readdatavalid(local_avm_aspace6_readdatavalid[0][5]),
      .avm_memcoalesce_localNeurons_load_014_writeack(local_avm_aspace6_writeack[0][5]),
      // AVM avm_memcoalesce_localNeurons_load_0147
      .avm_memcoalesce_localNeurons_load_0147_enable(local_avm_aspace6_enable[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_read(local_avm_aspace6_read[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_write(local_avm_aspace6_write[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_burstcount(local_avm_aspace6_burstcount[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_address(local_avm_aspace6_address[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_writedata(local_avm_aspace6_writedata[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_byteenable(local_avm_aspace6_byteenable[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_waitrequest(local_avm_aspace6_waitrequest[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_readdata(local_avm_aspace6_readdata[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_readdatavalid(local_avm_aspace6_readdatavalid[0][6]),
      .avm_memcoalesce_localNeurons_load_0147_writeack(local_avm_aspace6_writeack[0][6]),
      // AVM avm_memcoalesce_localNeurons_load_02
      .avm_memcoalesce_localNeurons_load_02_enable(local_avm_aspace6_enable[0][7]),
      .avm_memcoalesce_localNeurons_load_02_read(local_avm_aspace6_read[0][7]),
      .avm_memcoalesce_localNeurons_load_02_write(local_avm_aspace6_write[0][7]),
      .avm_memcoalesce_localNeurons_load_02_burstcount(local_avm_aspace6_burstcount[0][7]),
      .avm_memcoalesce_localNeurons_load_02_address(local_avm_aspace6_address[0][7]),
      .avm_memcoalesce_localNeurons_load_02_writedata(local_avm_aspace6_writedata[0][7]),
      .avm_memcoalesce_localNeurons_load_02_byteenable(local_avm_aspace6_byteenable[0][7]),
      .avm_memcoalesce_localNeurons_load_02_waitrequest(local_avm_aspace6_waitrequest[0][7]),
      .avm_memcoalesce_localNeurons_load_02_readdata(local_avm_aspace6_readdata[0][7]),
      .avm_memcoalesce_localNeurons_load_02_readdatavalid(local_avm_aspace6_readdatavalid[0][7]),
      .avm_memcoalesce_localNeurons_load_02_writeack(local_avm_aspace6_writeack[0][7]),
      // AVM avm_memcoalesce_localNeurons_load_026
      .avm_memcoalesce_localNeurons_load_026_enable(local_avm_aspace6_enable[0][8]),
      .avm_memcoalesce_localNeurons_load_026_read(local_avm_aspace6_read[0][8]),
      .avm_memcoalesce_localNeurons_load_026_write(local_avm_aspace6_write[0][8]),
      .avm_memcoalesce_localNeurons_load_026_burstcount(local_avm_aspace6_burstcount[0][8]),
      .avm_memcoalesce_localNeurons_load_026_address(local_avm_aspace6_address[0][8]),
      .avm_memcoalesce_localNeurons_load_026_writedata(local_avm_aspace6_writedata[0][8]),
      .avm_memcoalesce_localNeurons_load_026_byteenable(local_avm_aspace6_byteenable[0][8]),
      .avm_memcoalesce_localNeurons_load_026_waitrequest(local_avm_aspace6_waitrequest[0][8]),
      .avm_memcoalesce_localNeurons_load_026_readdata(local_avm_aspace6_readdata[0][8]),
      .avm_memcoalesce_localNeurons_load_026_readdatavalid(local_avm_aspace6_readdatavalid[0][8]),
      .avm_memcoalesce_localNeurons_load_026_writeack(local_avm_aspace6_writeack[0][8]),
      // AVM avm_memcoalesce_localNeurons_load_033
      .avm_memcoalesce_localNeurons_load_033_enable(local_avm_aspace6_enable[0][9]),
      .avm_memcoalesce_localNeurons_load_033_read(local_avm_aspace6_read[0][9]),
      .avm_memcoalesce_localNeurons_load_033_write(local_avm_aspace6_write[0][9]),
      .avm_memcoalesce_localNeurons_load_033_burstcount(local_avm_aspace6_burstcount[0][9]),
      .avm_memcoalesce_localNeurons_load_033_address(local_avm_aspace6_address[0][9]),
      .avm_memcoalesce_localNeurons_load_033_writedata(local_avm_aspace6_writedata[0][9]),
      .avm_memcoalesce_localNeurons_load_033_byteenable(local_avm_aspace6_byteenable[0][9]),
      .avm_memcoalesce_localNeurons_load_033_waitrequest(local_avm_aspace6_waitrequest[0][9]),
      .avm_memcoalesce_localNeurons_load_033_readdata(local_avm_aspace6_readdata[0][9]),
      .avm_memcoalesce_localNeurons_load_033_readdatavalid(local_avm_aspace6_readdatavalid[0][9]),
      .avm_memcoalesce_localNeurons_load_033_writeack(local_avm_aspace6_writeack[0][9]),
      // AVM avm_memcoalesce_localNeurons_load_037
      .avm_memcoalesce_localNeurons_load_037_enable(local_avm_aspace6_enable[0][10]),
      .avm_memcoalesce_localNeurons_load_037_read(local_avm_aspace6_read[0][10]),
      .avm_memcoalesce_localNeurons_load_037_write(local_avm_aspace6_write[0][10]),
      .avm_memcoalesce_localNeurons_load_037_burstcount(local_avm_aspace6_burstcount[0][10]),
      .avm_memcoalesce_localNeurons_load_037_address(local_avm_aspace6_address[0][10]),
      .avm_memcoalesce_localNeurons_load_037_writedata(local_avm_aspace6_writedata[0][10]),
      .avm_memcoalesce_localNeurons_load_037_byteenable(local_avm_aspace6_byteenable[0][10]),
      .avm_memcoalesce_localNeurons_load_037_waitrequest(local_avm_aspace6_waitrequest[0][10]),
      .avm_memcoalesce_localNeurons_load_037_readdata(local_avm_aspace6_readdata[0][10]),
      .avm_memcoalesce_localNeurons_load_037_readdatavalid(local_avm_aspace6_readdatavalid[0][10]),
      .avm_memcoalesce_localNeurons_load_037_writeack(local_avm_aspace6_writeack[0][10]),
      // AVM avm_memcoalesce_localNeurons_load_045
      .avm_memcoalesce_localNeurons_load_045_enable(local_avm_aspace6_enable[0][11]),
      .avm_memcoalesce_localNeurons_load_045_read(local_avm_aspace6_read[0][11]),
      .avm_memcoalesce_localNeurons_load_045_write(local_avm_aspace6_write[0][11]),
      .avm_memcoalesce_localNeurons_load_045_burstcount(local_avm_aspace6_burstcount[0][11]),
      .avm_memcoalesce_localNeurons_load_045_address(local_avm_aspace6_address[0][11]),
      .avm_memcoalesce_localNeurons_load_045_writedata(local_avm_aspace6_writedata[0][11]),
      .avm_memcoalesce_localNeurons_load_045_byteenable(local_avm_aspace6_byteenable[0][11]),
      .avm_memcoalesce_localNeurons_load_045_waitrequest(local_avm_aspace6_waitrequest[0][11]),
      .avm_memcoalesce_localNeurons_load_045_readdata(local_avm_aspace6_readdata[0][11]),
      .avm_memcoalesce_localNeurons_load_045_readdatavalid(local_avm_aspace6_readdatavalid[0][11]),
      .avm_memcoalesce_localNeurons_load_045_writeack(local_avm_aspace6_writeack[0][11]),
      // AVM avm_memcoalesce_localNeurons_load_051
      .avm_memcoalesce_localNeurons_load_051_enable(local_avm_aspace6_enable[0][12]),
      .avm_memcoalesce_localNeurons_load_051_read(local_avm_aspace6_read[0][12]),
      .avm_memcoalesce_localNeurons_load_051_write(local_avm_aspace6_write[0][12]),
      .avm_memcoalesce_localNeurons_load_051_burstcount(local_avm_aspace6_burstcount[0][12]),
      .avm_memcoalesce_localNeurons_load_051_address(local_avm_aspace6_address[0][12]),
      .avm_memcoalesce_localNeurons_load_051_writedata(local_avm_aspace6_writedata[0][12]),
      .avm_memcoalesce_localNeurons_load_051_byteenable(local_avm_aspace6_byteenable[0][12]),
      .avm_memcoalesce_localNeurons_load_051_waitrequest(local_avm_aspace6_waitrequest[0][12]),
      .avm_memcoalesce_localNeurons_load_051_readdata(local_avm_aspace6_readdata[0][12]),
      .avm_memcoalesce_localNeurons_load_051_readdatavalid(local_avm_aspace6_readdatavalid[0][12]),
      .avm_memcoalesce_localNeurons_load_051_writeack(local_avm_aspace6_writeack[0][12]),
      // AVM avm_memcoalesce_localNeurons_load_066
      .avm_memcoalesce_localNeurons_load_066_enable(local_avm_aspace6_enable[0][13]),
      .avm_memcoalesce_localNeurons_load_066_read(local_avm_aspace6_read[0][13]),
      .avm_memcoalesce_localNeurons_load_066_write(local_avm_aspace6_write[0][13]),
      .avm_memcoalesce_localNeurons_load_066_burstcount(local_avm_aspace6_burstcount[0][13]),
      .avm_memcoalesce_localNeurons_load_066_address(local_avm_aspace6_address[0][13]),
      .avm_memcoalesce_localNeurons_load_066_writedata(local_avm_aspace6_writedata[0][13]),
      .avm_memcoalesce_localNeurons_load_066_byteenable(local_avm_aspace6_byteenable[0][13]),
      .avm_memcoalesce_localNeurons_load_066_waitrequest(local_avm_aspace6_waitrequest[0][13]),
      .avm_memcoalesce_localNeurons_load_066_readdata(local_avm_aspace6_readdata[0][13]),
      .avm_memcoalesce_localNeurons_load_066_readdatavalid(local_avm_aspace6_readdatavalid[0][13]),
      .avm_memcoalesce_localNeurons_load_066_writeack(local_avm_aspace6_writeack[0][13]),
      // AVM avm_memcoalesce_localNeurons_load_074
      .avm_memcoalesce_localNeurons_load_074_enable(local_avm_aspace6_enable[0][14]),
      .avm_memcoalesce_localNeurons_load_074_read(local_avm_aspace6_read[0][14]),
      .avm_memcoalesce_localNeurons_load_074_write(local_avm_aspace6_write[0][14]),
      .avm_memcoalesce_localNeurons_load_074_burstcount(local_avm_aspace6_burstcount[0][14]),
      .avm_memcoalesce_localNeurons_load_074_address(local_avm_aspace6_address[0][14]),
      .avm_memcoalesce_localNeurons_load_074_writedata(local_avm_aspace6_writedata[0][14]),
      .avm_memcoalesce_localNeurons_load_074_byteenable(local_avm_aspace6_byteenable[0][14]),
      .avm_memcoalesce_localNeurons_load_074_waitrequest(local_avm_aspace6_waitrequest[0][14]),
      .avm_memcoalesce_localNeurons_load_074_readdata(local_avm_aspace6_readdata[0][14]),
      .avm_memcoalesce_localNeurons_load_074_readdatavalid(local_avm_aspace6_readdatavalid[0][14]),
      .avm_memcoalesce_localNeurons_load_074_writeack(local_avm_aspace6_writeack[0][14]),
      // AVM avm_memcoalesce_localNeurons_load_078
      .avm_memcoalesce_localNeurons_load_078_enable(local_avm_aspace6_enable[0][15]),
      .avm_memcoalesce_localNeurons_load_078_read(local_avm_aspace6_read[0][15]),
      .avm_memcoalesce_localNeurons_load_078_write(local_avm_aspace6_write[0][15]),
      .avm_memcoalesce_localNeurons_load_078_burstcount(local_avm_aspace6_burstcount[0][15]),
      .avm_memcoalesce_localNeurons_load_078_address(local_avm_aspace6_address[0][15]),
      .avm_memcoalesce_localNeurons_load_078_writedata(local_avm_aspace6_writedata[0][15]),
      .avm_memcoalesce_localNeurons_load_078_byteenable(local_avm_aspace6_byteenable[0][15]),
      .avm_memcoalesce_localNeurons_load_078_waitrequest(local_avm_aspace6_waitrequest[0][15]),
      .avm_memcoalesce_localNeurons_load_078_readdata(local_avm_aspace6_readdata[0][15]),
      .avm_memcoalesce_localNeurons_load_078_readdatavalid(local_avm_aspace6_readdatavalid[0][15]),
      .avm_memcoalesce_localNeurons_load_078_writeack(local_avm_aspace6_writeack[0][15]),
      // AVM avm_memcoalesce_localNeurons_load_08
      .avm_memcoalesce_localNeurons_load_08_enable(local_avm_aspace6_enable[0][16]),
      .avm_memcoalesce_localNeurons_load_08_read(local_avm_aspace6_read[0][16]),
      .avm_memcoalesce_localNeurons_load_08_write(local_avm_aspace6_write[0][16]),
      .avm_memcoalesce_localNeurons_load_08_burstcount(local_avm_aspace6_burstcount[0][16]),
      .avm_memcoalesce_localNeurons_load_08_address(local_avm_aspace6_address[0][16]),
      .avm_memcoalesce_localNeurons_load_08_writedata(local_avm_aspace6_writedata[0][16]),
      .avm_memcoalesce_localNeurons_load_08_byteenable(local_avm_aspace6_byteenable[0][16]),
      .avm_memcoalesce_localNeurons_load_08_waitrequest(local_avm_aspace6_waitrequest[0][16]),
      .avm_memcoalesce_localNeurons_load_08_readdata(local_avm_aspace6_readdata[0][16]),
      .avm_memcoalesce_localNeurons_load_08_readdatavalid(local_avm_aspace6_readdatavalid[0][16]),
      .avm_memcoalesce_localNeurons_load_08_writeack(local_avm_aspace6_writeack[0][16]),
      // AVM avm_memdep_1
      .avm_memdep_1_enable(local_avm_aspace6_enable[0][17]),
      .avm_memdep_1_read(local_avm_aspace6_read[0][17]),
      .avm_memdep_1_write(local_avm_aspace6_write[0][17]),
      .avm_memdep_1_burstcount(local_avm_aspace6_burstcount[0][17]),
      .avm_memdep_1_address(local_avm_aspace6_address[0][17]),
      .avm_memdep_1_writedata(local_avm_aspace6_writedata[0][17]),
      .avm_memdep_1_byteenable(local_avm_aspace6_byteenable[0][17]),
      .avm_memdep_1_waitrequest(local_avm_aspace6_waitrequest[0][17]),
      .avm_memdep_1_readdata(local_avm_aspace6_readdata[0][17]),
      .avm_memdep_1_readdatavalid(local_avm_aspace6_readdatavalid[0][17]),
      .avm_memdep_1_writeack(local_avm_aspace6_writeack[0][17]),
      // AVM avm_memdep_10
      .avm_memdep_10_enable(local_avm_aspace6_enable[0][18]),
      .avm_memdep_10_read(local_avm_aspace6_read[0][18]),
      .avm_memdep_10_write(local_avm_aspace6_write[0][18]),
      .avm_memdep_10_burstcount(local_avm_aspace6_burstcount[0][18]),
      .avm_memdep_10_address(local_avm_aspace6_address[0][18]),
      .avm_memdep_10_writedata(local_avm_aspace6_writedata[0][18]),
      .avm_memdep_10_byteenable(local_avm_aspace6_byteenable[0][18]),
      .avm_memdep_10_waitrequest(local_avm_aspace6_waitrequest[0][18]),
      .avm_memdep_10_readdata(local_avm_aspace6_readdata[0][18]),
      .avm_memdep_10_readdatavalid(local_avm_aspace6_readdatavalid[0][18]),
      .avm_memdep_10_writeack(local_avm_aspace6_writeack[0][18]),
      // AVM avm_memdep_12
      .avm_memdep_12_enable(local_avm_aspace6_enable[0][19]),
      .avm_memdep_12_read(local_avm_aspace6_read[0][19]),
      .avm_memdep_12_write(local_avm_aspace6_write[0][19]),
      .avm_memdep_12_burstcount(local_avm_aspace6_burstcount[0][19]),
      .avm_memdep_12_address(local_avm_aspace6_address[0][19]),
      .avm_memdep_12_writedata(local_avm_aspace6_writedata[0][19]),
      .avm_memdep_12_byteenable(local_avm_aspace6_byteenable[0][19]),
      .avm_memdep_12_waitrequest(local_avm_aspace6_waitrequest[0][19]),
      .avm_memdep_12_readdata(local_avm_aspace6_readdata[0][19]),
      .avm_memdep_12_readdatavalid(local_avm_aspace6_readdatavalid[0][19]),
      .avm_memdep_12_writeack(local_avm_aspace6_writeack[0][19]),
      // AVM avm_memdep_16
      .avm_memdep_16_enable(local_avm_aspace6_enable[0][20]),
      .avm_memdep_16_read(local_avm_aspace6_read[0][20]),
      .avm_memdep_16_write(local_avm_aspace6_write[0][20]),
      .avm_memdep_16_burstcount(local_avm_aspace6_burstcount[0][20]),
      .avm_memdep_16_address(local_avm_aspace6_address[0][20]),
      .avm_memdep_16_writedata(local_avm_aspace6_writedata[0][20]),
      .avm_memdep_16_byteenable(local_avm_aspace6_byteenable[0][20]),
      .avm_memdep_16_waitrequest(local_avm_aspace6_waitrequest[0][20]),
      .avm_memdep_16_readdata(local_avm_aspace6_readdata[0][20]),
      .avm_memdep_16_readdatavalid(local_avm_aspace6_readdatavalid[0][20]),
      .avm_memdep_16_writeack(local_avm_aspace6_writeack[0][20]),
      // AVM avm_memdep_17
      .avm_memdep_17_enable(local_avm_aspace6_enable[0][21]),
      .avm_memdep_17_read(local_avm_aspace6_read[0][21]),
      .avm_memdep_17_write(local_avm_aspace6_write[0][21]),
      .avm_memdep_17_burstcount(local_avm_aspace6_burstcount[0][21]),
      .avm_memdep_17_address(local_avm_aspace6_address[0][21]),
      .avm_memdep_17_writedata(local_avm_aspace6_writedata[0][21]),
      .avm_memdep_17_byteenable(local_avm_aspace6_byteenable[0][21]),
      .avm_memdep_17_waitrequest(local_avm_aspace6_waitrequest[0][21]),
      .avm_memdep_17_readdata(local_avm_aspace6_readdata[0][21]),
      .avm_memdep_17_readdatavalid(local_avm_aspace6_readdatavalid[0][21]),
      .avm_memdep_17_writeack(local_avm_aspace6_writeack[0][21]),
      // AVM avm_memdep_19
      .avm_memdep_19_enable(local_avm_aspace6_enable[0][22]),
      .avm_memdep_19_read(local_avm_aspace6_read[0][22]),
      .avm_memdep_19_write(local_avm_aspace6_write[0][22]),
      .avm_memdep_19_burstcount(local_avm_aspace6_burstcount[0][22]),
      .avm_memdep_19_address(local_avm_aspace6_address[0][22]),
      .avm_memdep_19_writedata(local_avm_aspace6_writedata[0][22]),
      .avm_memdep_19_byteenable(local_avm_aspace6_byteenable[0][22]),
      .avm_memdep_19_waitrequest(local_avm_aspace6_waitrequest[0][22]),
      .avm_memdep_19_readdata(local_avm_aspace6_readdata[0][22]),
      .avm_memdep_19_readdatavalid(local_avm_aspace6_readdatavalid[0][22]),
      .avm_memdep_19_writeack(local_avm_aspace6_writeack[0][22]),
      // AVM avm_memdep_2
      .avm_memdep_2_enable(local_avm_aspace6_enable[0][23]),
      .avm_memdep_2_read(local_avm_aspace6_read[0][23]),
      .avm_memdep_2_write(local_avm_aspace6_write[0][23]),
      .avm_memdep_2_burstcount(local_avm_aspace6_burstcount[0][23]),
      .avm_memdep_2_address(local_avm_aspace6_address[0][23]),
      .avm_memdep_2_writedata(local_avm_aspace6_writedata[0][23]),
      .avm_memdep_2_byteenable(local_avm_aspace6_byteenable[0][23]),
      .avm_memdep_2_waitrequest(local_avm_aspace6_waitrequest[0][23]),
      .avm_memdep_2_readdata(local_avm_aspace6_readdata[0][23]),
      .avm_memdep_2_readdatavalid(local_avm_aspace6_readdatavalid[0][23]),
      .avm_memdep_2_writeack(local_avm_aspace6_writeack[0][23]),
      // AVM avm_memdep_21
      .avm_memdep_21_enable(local_avm_aspace6_enable[0][24]),
      .avm_memdep_21_read(local_avm_aspace6_read[0][24]),
      .avm_memdep_21_write(local_avm_aspace6_write[0][24]),
      .avm_memdep_21_burstcount(local_avm_aspace6_burstcount[0][24]),
      .avm_memdep_21_address(local_avm_aspace6_address[0][24]),
      .avm_memdep_21_writedata(local_avm_aspace6_writedata[0][24]),
      .avm_memdep_21_byteenable(local_avm_aspace6_byteenable[0][24]),
      .avm_memdep_21_waitrequest(local_avm_aspace6_waitrequest[0][24]),
      .avm_memdep_21_readdata(local_avm_aspace6_readdata[0][24]),
      .avm_memdep_21_readdatavalid(local_avm_aspace6_readdatavalid[0][24]),
      .avm_memdep_21_writeack(local_avm_aspace6_writeack[0][24]),
      // AVM avm_memdep_22
      .avm_memdep_22_enable(local_avm_aspace6_enable[0][25]),
      .avm_memdep_22_read(local_avm_aspace6_read[0][25]),
      .avm_memdep_22_write(local_avm_aspace6_write[0][25]),
      .avm_memdep_22_burstcount(local_avm_aspace6_burstcount[0][25]),
      .avm_memdep_22_address(local_avm_aspace6_address[0][25]),
      .avm_memdep_22_writedata(local_avm_aspace6_writedata[0][25]),
      .avm_memdep_22_byteenable(local_avm_aspace6_byteenable[0][25]),
      .avm_memdep_22_waitrequest(local_avm_aspace6_waitrequest[0][25]),
      .avm_memdep_22_readdata(local_avm_aspace6_readdata[0][25]),
      .avm_memdep_22_readdatavalid(local_avm_aspace6_readdatavalid[0][25]),
      .avm_memdep_22_writeack(local_avm_aspace6_writeack[0][25]),
      // AVM avm_memdep_26
      .avm_memdep_26_enable(local_avm_aspace6_enable[0][26]),
      .avm_memdep_26_read(local_avm_aspace6_read[0][26]),
      .avm_memdep_26_write(local_avm_aspace6_write[0][26]),
      .avm_memdep_26_burstcount(local_avm_aspace6_burstcount[0][26]),
      .avm_memdep_26_address(local_avm_aspace6_address[0][26]),
      .avm_memdep_26_writedata(local_avm_aspace6_writedata[0][26]),
      .avm_memdep_26_byteenable(local_avm_aspace6_byteenable[0][26]),
      .avm_memdep_26_waitrequest(local_avm_aspace6_waitrequest[0][26]),
      .avm_memdep_26_readdata(local_avm_aspace6_readdata[0][26]),
      .avm_memdep_26_readdatavalid(local_avm_aspace6_readdatavalid[0][26]),
      .avm_memdep_26_writeack(local_avm_aspace6_writeack[0][26]),
      // AVM avm_memdep_27
      .avm_memdep_27_enable(local_avm_aspace6_enable[0][27]),
      .avm_memdep_27_read(local_avm_aspace6_read[0][27]),
      .avm_memdep_27_write(local_avm_aspace6_write[0][27]),
      .avm_memdep_27_burstcount(local_avm_aspace6_burstcount[0][27]),
      .avm_memdep_27_address(local_avm_aspace6_address[0][27]),
      .avm_memdep_27_writedata(local_avm_aspace6_writedata[0][27]),
      .avm_memdep_27_byteenable(local_avm_aspace6_byteenable[0][27]),
      .avm_memdep_27_waitrequest(local_avm_aspace6_waitrequest[0][27]),
      .avm_memdep_27_readdata(local_avm_aspace6_readdata[0][27]),
      .avm_memdep_27_readdatavalid(local_avm_aspace6_readdatavalid[0][27]),
      .avm_memdep_27_writeack(local_avm_aspace6_writeack[0][27]),
      // AVM avm_memdep_3
      .avm_memdep_3_enable(local_avm_aspace6_enable[0][28]),
      .avm_memdep_3_read(local_avm_aspace6_read[0][28]),
      .avm_memdep_3_write(local_avm_aspace6_write[0][28]),
      .avm_memdep_3_burstcount(local_avm_aspace6_burstcount[0][28]),
      .avm_memdep_3_address(local_avm_aspace6_address[0][28]),
      .avm_memdep_3_writedata(local_avm_aspace6_writedata[0][28]),
      .avm_memdep_3_byteenable(local_avm_aspace6_byteenable[0][28]),
      .avm_memdep_3_waitrequest(local_avm_aspace6_waitrequest[0][28]),
      .avm_memdep_3_readdata(local_avm_aspace6_readdata[0][28]),
      .avm_memdep_3_readdatavalid(local_avm_aspace6_readdatavalid[0][28]),
      .avm_memdep_3_writeack(local_avm_aspace6_writeack[0][28]),
      // AVM avm_memdep_30
      .avm_memdep_30_enable(local_avm_aspace6_enable[0][29]),
      .avm_memdep_30_read(local_avm_aspace6_read[0][29]),
      .avm_memdep_30_write(local_avm_aspace6_write[0][29]),
      .avm_memdep_30_burstcount(local_avm_aspace6_burstcount[0][29]),
      .avm_memdep_30_address(local_avm_aspace6_address[0][29]),
      .avm_memdep_30_writedata(local_avm_aspace6_writedata[0][29]),
      .avm_memdep_30_byteenable(local_avm_aspace6_byteenable[0][29]),
      .avm_memdep_30_waitrequest(local_avm_aspace6_waitrequest[0][29]),
      .avm_memdep_30_readdata(local_avm_aspace6_readdata[0][29]),
      .avm_memdep_30_readdatavalid(local_avm_aspace6_readdatavalid[0][29]),
      .avm_memdep_30_writeack(local_avm_aspace6_writeack[0][29]),
      // AVM avm_memdep_32
      .avm_memdep_32_enable(local_avm_aspace6_enable[0][30]),
      .avm_memdep_32_read(local_avm_aspace6_read[0][30]),
      .avm_memdep_32_write(local_avm_aspace6_write[0][30]),
      .avm_memdep_32_burstcount(local_avm_aspace6_burstcount[0][30]),
      .avm_memdep_32_address(local_avm_aspace6_address[0][30]),
      .avm_memdep_32_writedata(local_avm_aspace6_writedata[0][30]),
      .avm_memdep_32_byteenable(local_avm_aspace6_byteenable[0][30]),
      .avm_memdep_32_waitrequest(local_avm_aspace6_waitrequest[0][30]),
      .avm_memdep_32_readdata(local_avm_aspace6_readdata[0][30]),
      .avm_memdep_32_readdatavalid(local_avm_aspace6_readdatavalid[0][30]),
      .avm_memdep_32_writeack(local_avm_aspace6_writeack[0][30]),
      // AVM avm_memdep_34
      .avm_memdep_34_enable(local_avm_aspace6_enable[0][31]),
      .avm_memdep_34_read(local_avm_aspace6_read[0][31]),
      .avm_memdep_34_write(local_avm_aspace6_write[0][31]),
      .avm_memdep_34_burstcount(local_avm_aspace6_burstcount[0][31]),
      .avm_memdep_34_address(local_avm_aspace6_address[0][31]),
      .avm_memdep_34_writedata(local_avm_aspace6_writedata[0][31]),
      .avm_memdep_34_byteenable(local_avm_aspace6_byteenable[0][31]),
      .avm_memdep_34_waitrequest(local_avm_aspace6_waitrequest[0][31]),
      .avm_memdep_34_readdata(local_avm_aspace6_readdata[0][31]),
      .avm_memdep_34_readdatavalid(local_avm_aspace6_readdatavalid[0][31]),
      .avm_memdep_34_writeack(local_avm_aspace6_writeack[0][31]),
      // AVM avm_memdep_39
      .avm_memdep_39_enable(local_avm_aspace6_enable[0][32]),
      .avm_memdep_39_read(local_avm_aspace6_read[0][32]),
      .avm_memdep_39_write(local_avm_aspace6_write[0][32]),
      .avm_memdep_39_burstcount(local_avm_aspace6_burstcount[0][32]),
      .avm_memdep_39_address(local_avm_aspace6_address[0][32]),
      .avm_memdep_39_writedata(local_avm_aspace6_writedata[0][32]),
      .avm_memdep_39_byteenable(local_avm_aspace6_byteenable[0][32]),
      .avm_memdep_39_waitrequest(local_avm_aspace6_waitrequest[0][32]),
      .avm_memdep_39_readdata(local_avm_aspace6_readdata[0][32]),
      .avm_memdep_39_readdatavalid(local_avm_aspace6_readdatavalid[0][32]),
      .avm_memdep_39_writeack(local_avm_aspace6_writeack[0][32]),
      // AVM avm_memdep_40
      .avm_memdep_40_enable(local_avm_aspace6_enable[0][33]),
      .avm_memdep_40_read(local_avm_aspace6_read[0][33]),
      .avm_memdep_40_write(local_avm_aspace6_write[0][33]),
      .avm_memdep_40_burstcount(local_avm_aspace6_burstcount[0][33]),
      .avm_memdep_40_address(local_avm_aspace6_address[0][33]),
      .avm_memdep_40_writedata(local_avm_aspace6_writedata[0][33]),
      .avm_memdep_40_byteenable(local_avm_aspace6_byteenable[0][33]),
      .avm_memdep_40_waitrequest(local_avm_aspace6_waitrequest[0][33]),
      .avm_memdep_40_readdata(local_avm_aspace6_readdata[0][33]),
      .avm_memdep_40_readdatavalid(local_avm_aspace6_readdatavalid[0][33]),
      .avm_memdep_40_writeack(local_avm_aspace6_writeack[0][33]),
      // AVM avm_memdep_43
      .avm_memdep_43_enable(local_avm_aspace6_enable[0][34]),
      .avm_memdep_43_read(local_avm_aspace6_read[0][34]),
      .avm_memdep_43_write(local_avm_aspace6_write[0][34]),
      .avm_memdep_43_burstcount(local_avm_aspace6_burstcount[0][34]),
      .avm_memdep_43_address(local_avm_aspace6_address[0][34]),
      .avm_memdep_43_writedata(local_avm_aspace6_writedata[0][34]),
      .avm_memdep_43_byteenable(local_avm_aspace6_byteenable[0][34]),
      .avm_memdep_43_waitrequest(local_avm_aspace6_waitrequest[0][34]),
      .avm_memdep_43_readdata(local_avm_aspace6_readdata[0][34]),
      .avm_memdep_43_readdatavalid(local_avm_aspace6_readdatavalid[0][34]),
      .avm_memdep_43_writeack(local_avm_aspace6_writeack[0][34]),
      // AVM avm_memdep_49
      .avm_memdep_49_enable(local_avm_aspace6_enable[0][35]),
      .avm_memdep_49_read(local_avm_aspace6_read[0][35]),
      .avm_memdep_49_write(local_avm_aspace6_write[0][35]),
      .avm_memdep_49_burstcount(local_avm_aspace6_burstcount[0][35]),
      .avm_memdep_49_address(local_avm_aspace6_address[0][35]),
      .avm_memdep_49_writedata(local_avm_aspace6_writedata[0][35]),
      .avm_memdep_49_byteenable(local_avm_aspace6_byteenable[0][35]),
      .avm_memdep_49_waitrequest(local_avm_aspace6_waitrequest[0][35]),
      .avm_memdep_49_readdata(local_avm_aspace6_readdata[0][35]),
      .avm_memdep_49_readdatavalid(local_avm_aspace6_readdatavalid[0][35]),
      .avm_memdep_49_writeack(local_avm_aspace6_writeack[0][35]),
      // AVM avm_memdep_50
      .avm_memdep_50_enable(local_avm_aspace6_enable[0][36]),
      .avm_memdep_50_read(local_avm_aspace6_read[0][36]),
      .avm_memdep_50_write(local_avm_aspace6_write[0][36]),
      .avm_memdep_50_burstcount(local_avm_aspace6_burstcount[0][36]),
      .avm_memdep_50_address(local_avm_aspace6_address[0][36]),
      .avm_memdep_50_writedata(local_avm_aspace6_writedata[0][36]),
      .avm_memdep_50_byteenable(local_avm_aspace6_byteenable[0][36]),
      .avm_memdep_50_waitrequest(local_avm_aspace6_waitrequest[0][36]),
      .avm_memdep_50_readdata(local_avm_aspace6_readdata[0][36]),
      .avm_memdep_50_readdatavalid(local_avm_aspace6_readdatavalid[0][36]),
      .avm_memdep_50_writeack(local_avm_aspace6_writeack[0][36]),
      // AVM avm_memdep_51
      .avm_memdep_51_enable(local_avm_aspace6_enable[0][37]),
      .avm_memdep_51_read(local_avm_aspace6_read[0][37]),
      .avm_memdep_51_write(local_avm_aspace6_write[0][37]),
      .avm_memdep_51_burstcount(local_avm_aspace6_burstcount[0][37]),
      .avm_memdep_51_address(local_avm_aspace6_address[0][37]),
      .avm_memdep_51_writedata(local_avm_aspace6_writedata[0][37]),
      .avm_memdep_51_byteenable(local_avm_aspace6_byteenable[0][37]),
      .avm_memdep_51_waitrequest(local_avm_aspace6_waitrequest[0][37]),
      .avm_memdep_51_readdata(local_avm_aspace6_readdata[0][37]),
      .avm_memdep_51_readdatavalid(local_avm_aspace6_readdatavalid[0][37]),
      .avm_memdep_51_writeack(local_avm_aspace6_writeack[0][37]),
      // AVM avm_memdep_9
      .avm_memdep_9_enable(local_avm_aspace6_enable[0][38]),
      .avm_memdep_9_read(local_avm_aspace6_read[0][38]),
      .avm_memdep_9_write(local_avm_aspace6_write[0][38]),
      .avm_memdep_9_burstcount(local_avm_aspace6_burstcount[0][38]),
      .avm_memdep_9_address(local_avm_aspace6_address[0][38]),
      .avm_memdep_9_writedata(local_avm_aspace6_writedata[0][38]),
      .avm_memdep_9_byteenable(local_avm_aspace6_byteenable[0][38]),
      .avm_memdep_9_waitrequest(local_avm_aspace6_waitrequest[0][38]),
      .avm_memdep_9_readdata(local_avm_aspace6_readdata[0][38]),
      .avm_memdep_9_readdatavalid(local_avm_aspace6_readdatavalid[0][38]),
      .avm_memdep_9_writeack(local_avm_aspace6_writeack[0][38]),
      // AVM avm_normls_load218
      .avm_normls_load218_enable(local_avm_aspace6_enable[0][39]),
      .avm_normls_load218_read(local_avm_aspace6_read[0][39]),
      .avm_normls_load218_write(local_avm_aspace6_write[0][39]),
      .avm_normls_load218_burstcount(local_avm_aspace6_burstcount[0][39]),
      .avm_normls_load218_address(local_avm_aspace6_address[0][39]),
      .avm_normls_load218_writedata(local_avm_aspace6_writedata[0][39]),
      .avm_normls_load218_byteenable(local_avm_aspace6_byteenable[0][39]),
      .avm_normls_load218_waitrequest(local_avm_aspace6_waitrequest[0][39]),
      .avm_normls_load218_readdata(local_avm_aspace6_readdata[0][39]),
      .avm_normls_load218_readdatavalid(local_avm_aspace6_readdatavalid[0][39]),
      .avm_normls_load218_writeack(local_avm_aspace6_writeack[0][39]),
      // AVM avm_normls_load229
      .avm_normls_load229_enable(local_avm_aspace6_enable[0][40]),
      .avm_normls_load229_read(local_avm_aspace6_read[0][40]),
      .avm_normls_load229_write(local_avm_aspace6_write[0][40]),
      .avm_normls_load229_burstcount(local_avm_aspace6_burstcount[0][40]),
      .avm_normls_load229_address(local_avm_aspace6_address[0][40]),
      .avm_normls_load229_writedata(local_avm_aspace6_writedata[0][40]),
      .avm_normls_load229_byteenable(local_avm_aspace6_byteenable[0][40]),
      .avm_normls_load229_waitrequest(local_avm_aspace6_waitrequest[0][40]),
      .avm_normls_load229_readdata(local_avm_aspace6_readdata[0][40]),
      .avm_normls_load229_readdatavalid(local_avm_aspace6_readdatavalid[0][40]),
      .avm_normls_load229_writeack(local_avm_aspace6_writeack[0][40]),
      // AVM avm_normls_load240
      .avm_normls_load240_enable(local_avm_aspace6_enable[0][41]),
      .avm_normls_load240_read(local_avm_aspace6_read[0][41]),
      .avm_normls_load240_write(local_avm_aspace6_write[0][41]),
      .avm_normls_load240_burstcount(local_avm_aspace6_burstcount[0][41]),
      .avm_normls_load240_address(local_avm_aspace6_address[0][41]),
      .avm_normls_load240_writedata(local_avm_aspace6_writedata[0][41]),
      .avm_normls_load240_byteenable(local_avm_aspace6_byteenable[0][41]),
      .avm_normls_load240_waitrequest(local_avm_aspace6_waitrequest[0][41]),
      .avm_normls_load240_readdata(local_avm_aspace6_readdata[0][41]),
      .avm_normls_load240_readdatavalid(local_avm_aspace6_readdatavalid[0][41]),
      .avm_normls_load240_writeack(local_avm_aspace6_writeack[0][41]),
      // AVM avm_normls_load257
      .avm_normls_load257_enable(local_avm_aspace6_enable[0][42]),
      .avm_normls_load257_read(local_avm_aspace6_read[0][42]),
      .avm_normls_load257_write(local_avm_aspace6_write[0][42]),
      .avm_normls_load257_burstcount(local_avm_aspace6_burstcount[0][42]),
      .avm_normls_load257_address(local_avm_aspace6_address[0][42]),
      .avm_normls_load257_writedata(local_avm_aspace6_writedata[0][42]),
      .avm_normls_load257_byteenable(local_avm_aspace6_byteenable[0][42]),
      .avm_normls_load257_waitrequest(local_avm_aspace6_waitrequest[0][42]),
      .avm_normls_load257_readdata(local_avm_aspace6_readdata[0][42]),
      .avm_normls_load257_readdatavalid(local_avm_aspace6_readdatavalid[0][42]),
      .avm_normls_load257_writeack(local_avm_aspace6_writeack[0][42]),
      // AVM avm_normls_load262
      .avm_normls_load262_enable(local_avm_aspace6_enable[0][43]),
      .avm_normls_load262_read(local_avm_aspace6_read[0][43]),
      .avm_normls_load262_write(local_avm_aspace6_write[0][43]),
      .avm_normls_load262_burstcount(local_avm_aspace6_burstcount[0][43]),
      .avm_normls_load262_address(local_avm_aspace6_address[0][43]),
      .avm_normls_load262_writedata(local_avm_aspace6_writedata[0][43]),
      .avm_normls_load262_byteenable(local_avm_aspace6_byteenable[0][43]),
      .avm_normls_load262_waitrequest(local_avm_aspace6_waitrequest[0][43]),
      .avm_normls_load262_readdata(local_avm_aspace6_readdata[0][43]),
      .avm_normls_load262_readdatavalid(local_avm_aspace6_readdatavalid[0][43]),
      .avm_normls_load262_writeack(local_avm_aspace6_writeack[0][43]),
      // AVM avm_normls_load291
      .avm_normls_load291_enable(local_avm_aspace6_enable[0][44]),
      .avm_normls_load291_read(local_avm_aspace6_read[0][44]),
      .avm_normls_load291_write(local_avm_aspace6_write[0][44]),
      .avm_normls_load291_burstcount(local_avm_aspace6_burstcount[0][44]),
      .avm_normls_load291_address(local_avm_aspace6_address[0][44]),
      .avm_normls_load291_writedata(local_avm_aspace6_writedata[0][44]),
      .avm_normls_load291_byteenable(local_avm_aspace6_byteenable[0][44]),
      .avm_normls_load291_waitrequest(local_avm_aspace6_waitrequest[0][44]),
      .avm_normls_load291_readdata(local_avm_aspace6_readdata[0][44]),
      .avm_normls_load291_readdatavalid(local_avm_aspace6_readdatavalid[0][44]),
      .avm_normls_load291_writeack(local_avm_aspace6_writeack[0][44]),
      // AVM avm_normls_load302
      .avm_normls_load302_enable(local_avm_aspace6_enable[0][45]),
      .avm_normls_load302_read(local_avm_aspace6_read[0][45]),
      .avm_normls_load302_write(local_avm_aspace6_write[0][45]),
      .avm_normls_load302_burstcount(local_avm_aspace6_burstcount[0][45]),
      .avm_normls_load302_address(local_avm_aspace6_address[0][45]),
      .avm_normls_load302_writedata(local_avm_aspace6_writedata[0][45]),
      .avm_normls_load302_byteenable(local_avm_aspace6_byteenable[0][45]),
      .avm_normls_load302_waitrequest(local_avm_aspace6_waitrequest[0][45]),
      .avm_normls_load302_readdata(local_avm_aspace6_readdata[0][45]),
      .avm_normls_load302_readdatavalid(local_avm_aspace6_readdatavalid[0][45]),
      .avm_normls_load302_writeack(local_avm_aspace6_writeack[0][45]),
      // AVM avm_normls_load313
      .avm_normls_load313_enable(local_avm_aspace6_enable[0][46]),
      .avm_normls_load313_read(local_avm_aspace6_read[0][46]),
      .avm_normls_load313_write(local_avm_aspace6_write[0][46]),
      .avm_normls_load313_burstcount(local_avm_aspace6_burstcount[0][46]),
      .avm_normls_load313_address(local_avm_aspace6_address[0][46]),
      .avm_normls_load313_writedata(local_avm_aspace6_writedata[0][46]),
      .avm_normls_load313_byteenable(local_avm_aspace6_byteenable[0][46]),
      .avm_normls_load313_waitrequest(local_avm_aspace6_waitrequest[0][46]),
      .avm_normls_load313_readdata(local_avm_aspace6_readdata[0][46]),
      .avm_normls_load313_readdatavalid(local_avm_aspace6_readdatavalid[0][46]),
      .avm_normls_load313_writeack(local_avm_aspace6_writeack[0][46]),
      // AVM avm_normls_load330
      .avm_normls_load330_enable(local_avm_aspace6_enable[0][47]),
      .avm_normls_load330_read(local_avm_aspace6_read[0][47]),
      .avm_normls_load330_write(local_avm_aspace6_write[0][47]),
      .avm_normls_load330_burstcount(local_avm_aspace6_burstcount[0][47]),
      .avm_normls_load330_address(local_avm_aspace6_address[0][47]),
      .avm_normls_load330_writedata(local_avm_aspace6_writedata[0][47]),
      .avm_normls_load330_byteenable(local_avm_aspace6_byteenable[0][47]),
      .avm_normls_load330_waitrequest(local_avm_aspace6_waitrequest[0][47]),
      .avm_normls_load330_readdata(local_avm_aspace6_readdata[0][47]),
      .avm_normls_load330_readdatavalid(local_avm_aspace6_readdatavalid[0][47]),
      .avm_normls_load330_writeack(local_avm_aspace6_writeack[0][47]),
      // AVM avm_normls_load335
      .avm_normls_load335_enable(local_avm_aspace6_enable[0][48]),
      .avm_normls_load335_read(local_avm_aspace6_read[0][48]),
      .avm_normls_load335_write(local_avm_aspace6_write[0][48]),
      .avm_normls_load335_burstcount(local_avm_aspace6_burstcount[0][48]),
      .avm_normls_load335_address(local_avm_aspace6_address[0][48]),
      .avm_normls_load335_writedata(local_avm_aspace6_writedata[0][48]),
      .avm_normls_load335_byteenable(local_avm_aspace6_byteenable[0][48]),
      .avm_normls_load335_waitrequest(local_avm_aspace6_waitrequest[0][48]),
      .avm_normls_load335_readdata(local_avm_aspace6_readdata[0][48]),
      .avm_normls_load335_readdatavalid(local_avm_aspace6_readdatavalid[0][48]),
      .avm_normls_load335_writeack(local_avm_aspace6_writeack[0][48]),
      // AVM avm_normls_load375
      .avm_normls_load375_enable(local_avm_aspace6_enable[0][49]),
      .avm_normls_load375_read(local_avm_aspace6_read[0][49]),
      .avm_normls_load375_write(local_avm_aspace6_write[0][49]),
      .avm_normls_load375_burstcount(local_avm_aspace6_burstcount[0][49]),
      .avm_normls_load375_address(local_avm_aspace6_address[0][49]),
      .avm_normls_load375_writedata(local_avm_aspace6_writedata[0][49]),
      .avm_normls_load375_byteenable(local_avm_aspace6_byteenable[0][49]),
      .avm_normls_load375_waitrequest(local_avm_aspace6_waitrequest[0][49]),
      .avm_normls_load375_readdata(local_avm_aspace6_readdata[0][49]),
      .avm_normls_load375_readdatavalid(local_avm_aspace6_readdatavalid[0][49]),
      .avm_normls_load375_writeack(local_avm_aspace6_writeack[0][49]),
      // AVM avm_normls_load386
      .avm_normls_load386_enable(local_avm_aspace6_enable[0][50]),
      .avm_normls_load386_read(local_avm_aspace6_read[0][50]),
      .avm_normls_load386_write(local_avm_aspace6_write[0][50]),
      .avm_normls_load386_burstcount(local_avm_aspace6_burstcount[0][50]),
      .avm_normls_load386_address(local_avm_aspace6_address[0][50]),
      .avm_normls_load386_writedata(local_avm_aspace6_writedata[0][50]),
      .avm_normls_load386_byteenable(local_avm_aspace6_byteenable[0][50]),
      .avm_normls_load386_waitrequest(local_avm_aspace6_waitrequest[0][50]),
      .avm_normls_load386_readdata(local_avm_aspace6_readdata[0][50]),
      .avm_normls_load386_readdatavalid(local_avm_aspace6_readdatavalid[0][50]),
      .avm_normls_load386_writeack(local_avm_aspace6_writeack[0][50]),
      // AVM avm_normls_load416
      .avm_normls_load416_enable(local_avm_aspace6_enable[0][51]),
      .avm_normls_load416_read(local_avm_aspace6_read[0][51]),
      .avm_normls_load416_write(local_avm_aspace6_write[0][51]),
      .avm_normls_load416_burstcount(local_avm_aspace6_burstcount[0][51]),
      .avm_normls_load416_address(local_avm_aspace6_address[0][51]),
      .avm_normls_load416_writedata(local_avm_aspace6_writedata[0][51]),
      .avm_normls_load416_byteenable(local_avm_aspace6_byteenable[0][51]),
      .avm_normls_load416_waitrequest(local_avm_aspace6_waitrequest[0][51]),
      .avm_normls_load416_readdata(local_avm_aspace6_readdata[0][51]),
      .avm_normls_load416_readdatavalid(local_avm_aspace6_readdatavalid[0][51]),
      .avm_normls_load416_writeack(local_avm_aspace6_writeack[0][51]),
      // AVM avm_normls_load438
      .avm_normls_load438_enable(local_avm_aspace6_enable[0][52]),
      .avm_normls_load438_read(local_avm_aspace6_read[0][52]),
      .avm_normls_load438_write(local_avm_aspace6_write[0][52]),
      .avm_normls_load438_burstcount(local_avm_aspace6_burstcount[0][52]),
      .avm_normls_load438_address(local_avm_aspace6_address[0][52]),
      .avm_normls_load438_writedata(local_avm_aspace6_writedata[0][52]),
      .avm_normls_load438_byteenable(local_avm_aspace6_byteenable[0][52]),
      .avm_normls_load438_waitrequest(local_avm_aspace6_waitrequest[0][52]),
      .avm_normls_load438_readdata(local_avm_aspace6_readdata[0][52]),
      .avm_normls_load438_readdatavalid(local_avm_aspace6_readdatavalid[0][52]),
      .avm_normls_load438_writeack(local_avm_aspace6_writeack[0][52]),
      // AVM avm_normls_load449
      .avm_normls_load449_enable(local_avm_aspace6_enable[0][53]),
      .avm_normls_load449_read(local_avm_aspace6_read[0][53]),
      .avm_normls_load449_write(local_avm_aspace6_write[0][53]),
      .avm_normls_load449_burstcount(local_avm_aspace6_burstcount[0][53]),
      .avm_normls_load449_address(local_avm_aspace6_address[0][53]),
      .avm_normls_load449_writedata(local_avm_aspace6_writedata[0][53]),
      .avm_normls_load449_byteenable(local_avm_aspace6_byteenable[0][53]),
      .avm_normls_load449_waitrequest(local_avm_aspace6_waitrequest[0][53]),
      .avm_normls_load449_readdata(local_avm_aspace6_readdata[0][53]),
      .avm_normls_load449_readdatavalid(local_avm_aspace6_readdatavalid[0][53]),
      .avm_normls_load449_writeack(local_avm_aspace6_writeack[0][53]),
      // AVM avm_normls_load460
      .avm_normls_load460_enable(local_avm_aspace6_enable[0][54]),
      .avm_normls_load460_read(local_avm_aspace6_read[0][54]),
      .avm_normls_load460_write(local_avm_aspace6_write[0][54]),
      .avm_normls_load460_burstcount(local_avm_aspace6_burstcount[0][54]),
      .avm_normls_load460_address(local_avm_aspace6_address[0][54]),
      .avm_normls_load460_writedata(local_avm_aspace6_writedata[0][54]),
      .avm_normls_load460_byteenable(local_avm_aspace6_byteenable[0][54]),
      .avm_normls_load460_waitrequest(local_avm_aspace6_waitrequest[0][54]),
      .avm_normls_load460_readdata(local_avm_aspace6_readdata[0][54]),
      .avm_normls_load460_readdatavalid(local_avm_aspace6_readdatavalid[0][54]),
      .avm_normls_load460_writeack(local_avm_aspace6_writeack[0][54]),
      // AVM avm_normls_load477
      .avm_normls_load477_enable(local_avm_aspace6_enable[0][55]),
      .avm_normls_load477_read(local_avm_aspace6_read[0][55]),
      .avm_normls_load477_write(local_avm_aspace6_write[0][55]),
      .avm_normls_load477_burstcount(local_avm_aspace6_burstcount[0][55]),
      .avm_normls_load477_address(local_avm_aspace6_address[0][55]),
      .avm_normls_load477_writedata(local_avm_aspace6_writedata[0][55]),
      .avm_normls_load477_byteenable(local_avm_aspace6_byteenable[0][55]),
      .avm_normls_load477_waitrequest(local_avm_aspace6_waitrequest[0][55]),
      .avm_normls_load477_readdata(local_avm_aspace6_readdata[0][55]),
      .avm_normls_load477_readdatavalid(local_avm_aspace6_readdatavalid[0][55]),
      .avm_normls_load477_writeack(local_avm_aspace6_writeack[0][55]),
      // AVM avm_normls_load482
      .avm_normls_load482_enable(local_avm_aspace6_enable[0][56]),
      .avm_normls_load482_read(local_avm_aspace6_read[0][56]),
      .avm_normls_load482_write(local_avm_aspace6_write[0][56]),
      .avm_normls_load482_burstcount(local_avm_aspace6_burstcount[0][56]),
      .avm_normls_load482_address(local_avm_aspace6_address[0][56]),
      .avm_normls_load482_writedata(local_avm_aspace6_writedata[0][56]),
      .avm_normls_load482_byteenable(local_avm_aspace6_byteenable[0][56]),
      .avm_normls_load482_waitrequest(local_avm_aspace6_waitrequest[0][56]),
      .avm_normls_load482_readdata(local_avm_aspace6_readdata[0][56]),
      .avm_normls_load482_readdatavalid(local_avm_aspace6_readdatavalid[0][56]),
      .avm_normls_load482_writeack(local_avm_aspace6_writeack[0][56]),
      // AVM avm_normls_load522
      .avm_normls_load522_enable(local_avm_aspace6_enable[0][57]),
      .avm_normls_load522_read(local_avm_aspace6_read[0][57]),
      .avm_normls_load522_write(local_avm_aspace6_write[0][57]),
      .avm_normls_load522_burstcount(local_avm_aspace6_burstcount[0][57]),
      .avm_normls_load522_address(local_avm_aspace6_address[0][57]),
      .avm_normls_load522_writedata(local_avm_aspace6_writedata[0][57]),
      .avm_normls_load522_byteenable(local_avm_aspace6_byteenable[0][57]),
      .avm_normls_load522_waitrequest(local_avm_aspace6_waitrequest[0][57]),
      .avm_normls_load522_readdata(local_avm_aspace6_readdata[0][57]),
      .avm_normls_load522_readdatavalid(local_avm_aspace6_readdatavalid[0][57]),
      .avm_normls_load522_writeack(local_avm_aspace6_writeack[0][57]),
      // AVM avm_normls_load533
      .avm_normls_load533_enable(local_avm_aspace6_enable[0][58]),
      .avm_normls_load533_read(local_avm_aspace6_read[0][58]),
      .avm_normls_load533_write(local_avm_aspace6_write[0][58]),
      .avm_normls_load533_burstcount(local_avm_aspace6_burstcount[0][58]),
      .avm_normls_load533_address(local_avm_aspace6_address[0][58]),
      .avm_normls_load533_writedata(local_avm_aspace6_writedata[0][58]),
      .avm_normls_load533_byteenable(local_avm_aspace6_byteenable[0][58]),
      .avm_normls_load533_waitrequest(local_avm_aspace6_waitrequest[0][58]),
      .avm_normls_load533_readdata(local_avm_aspace6_readdata[0][58]),
      .avm_normls_load533_readdatavalid(local_avm_aspace6_readdatavalid[0][58]),
      .avm_normls_load533_writeack(local_avm_aspace6_writeack[0][58]),
      // AVM avm_normls_load565
      .avm_normls_load565_enable(local_avm_aspace6_enable[0][59]),
      .avm_normls_load565_read(local_avm_aspace6_read[0][59]),
      .avm_normls_load565_write(local_avm_aspace6_write[0][59]),
      .avm_normls_load565_burstcount(local_avm_aspace6_burstcount[0][59]),
      .avm_normls_load565_address(local_avm_aspace6_address[0][59]),
      .avm_normls_load565_writedata(local_avm_aspace6_writedata[0][59]),
      .avm_normls_load565_byteenable(local_avm_aspace6_byteenable[0][59]),
      .avm_normls_load565_waitrequest(local_avm_aspace6_waitrequest[0][59]),
      .avm_normls_load565_readdata(local_avm_aspace6_readdata[0][59]),
      .avm_normls_load565_readdatavalid(local_avm_aspace6_readdatavalid[0][59]),
      .avm_normls_load565_writeack(local_avm_aspace6_writeack[0][59]),
      // AVM avm_normls_load587
      .avm_normls_load587_enable(local_avm_aspace6_enable[0][60]),
      .avm_normls_load587_read(local_avm_aspace6_read[0][60]),
      .avm_normls_load587_write(local_avm_aspace6_write[0][60]),
      .avm_normls_load587_burstcount(local_avm_aspace6_burstcount[0][60]),
      .avm_normls_load587_address(local_avm_aspace6_address[0][60]),
      .avm_normls_load587_writedata(local_avm_aspace6_writedata[0][60]),
      .avm_normls_load587_byteenable(local_avm_aspace6_byteenable[0][60]),
      .avm_normls_load587_waitrequest(local_avm_aspace6_waitrequest[0][60]),
      .avm_normls_load587_readdata(local_avm_aspace6_readdata[0][60]),
      .avm_normls_load587_readdatavalid(local_avm_aspace6_readdatavalid[0][60]),
      .avm_normls_load587_writeack(local_avm_aspace6_writeack[0][60]),
      // AVM avm_normls_load598
      .avm_normls_load598_enable(local_avm_aspace6_enable[0][61]),
      .avm_normls_load598_read(local_avm_aspace6_read[0][61]),
      .avm_normls_load598_write(local_avm_aspace6_write[0][61]),
      .avm_normls_load598_burstcount(local_avm_aspace6_burstcount[0][61]),
      .avm_normls_load598_address(local_avm_aspace6_address[0][61]),
      .avm_normls_load598_writedata(local_avm_aspace6_writedata[0][61]),
      .avm_normls_load598_byteenable(local_avm_aspace6_byteenable[0][61]),
      .avm_normls_load598_waitrequest(local_avm_aspace6_waitrequest[0][61]),
      .avm_normls_load598_readdata(local_avm_aspace6_readdata[0][61]),
      .avm_normls_load598_readdatavalid(local_avm_aspace6_readdatavalid[0][61]),
      .avm_normls_load598_writeack(local_avm_aspace6_writeack[0][61]),
      // AVM avm_normls_load609
      .avm_normls_load609_enable(local_avm_aspace6_enable[0][62]),
      .avm_normls_load609_read(local_avm_aspace6_read[0][62]),
      .avm_normls_load609_write(local_avm_aspace6_write[0][62]),
      .avm_normls_load609_burstcount(local_avm_aspace6_burstcount[0][62]),
      .avm_normls_load609_address(local_avm_aspace6_address[0][62]),
      .avm_normls_load609_writedata(local_avm_aspace6_writedata[0][62]),
      .avm_normls_load609_byteenable(local_avm_aspace6_byteenable[0][62]),
      .avm_normls_load609_waitrequest(local_avm_aspace6_waitrequest[0][62]),
      .avm_normls_load609_readdata(local_avm_aspace6_readdata[0][62]),
      .avm_normls_load609_readdatavalid(local_avm_aspace6_readdatavalid[0][62]),
      .avm_normls_load609_writeack(local_avm_aspace6_writeack[0][62]),
      // AVM avm_normls_load626
      .avm_normls_load626_enable(local_avm_aspace6_enable[0][63]),
      .avm_normls_load626_read(local_avm_aspace6_read[0][63]),
      .avm_normls_load626_write(local_avm_aspace6_write[0][63]),
      .avm_normls_load626_burstcount(local_avm_aspace6_burstcount[0][63]),
      .avm_normls_load626_address(local_avm_aspace6_address[0][63]),
      .avm_normls_load626_writedata(local_avm_aspace6_writedata[0][63]),
      .avm_normls_load626_byteenable(local_avm_aspace6_byteenable[0][63]),
      .avm_normls_load626_waitrequest(local_avm_aspace6_waitrequest[0][63]),
      .avm_normls_load626_readdata(local_avm_aspace6_readdata[0][63]),
      .avm_normls_load626_readdatavalid(local_avm_aspace6_readdatavalid[0][63]),
      .avm_normls_load626_writeack(local_avm_aspace6_writeack[0][63]),
      // AVM avm_normls_load631
      .avm_normls_load631_enable(local_avm_aspace6_enable[0][64]),
      .avm_normls_load631_read(local_avm_aspace6_read[0][64]),
      .avm_normls_load631_write(local_avm_aspace6_write[0][64]),
      .avm_normls_load631_burstcount(local_avm_aspace6_burstcount[0][64]),
      .avm_normls_load631_address(local_avm_aspace6_address[0][64]),
      .avm_normls_load631_writedata(local_avm_aspace6_writedata[0][64]),
      .avm_normls_load631_byteenable(local_avm_aspace6_byteenable[0][64]),
      .avm_normls_load631_waitrequest(local_avm_aspace6_waitrequest[0][64]),
      .avm_normls_load631_readdata(local_avm_aspace6_readdata[0][64]),
      .avm_normls_load631_readdatavalid(local_avm_aspace6_readdatavalid[0][64]),
      .avm_normls_load631_writeack(local_avm_aspace6_writeack[0][64]),
      // AVM avm_normls_load660
      .avm_normls_load660_enable(local_avm_aspace6_enable[0][65]),
      .avm_normls_load660_read(local_avm_aspace6_read[0][65]),
      .avm_normls_load660_write(local_avm_aspace6_write[0][65]),
      .avm_normls_load660_burstcount(local_avm_aspace6_burstcount[0][65]),
      .avm_normls_load660_address(local_avm_aspace6_address[0][65]),
      .avm_normls_load660_writedata(local_avm_aspace6_writedata[0][65]),
      .avm_normls_load660_byteenable(local_avm_aspace6_byteenable[0][65]),
      .avm_normls_load660_waitrequest(local_avm_aspace6_waitrequest[0][65]),
      .avm_normls_load660_readdata(local_avm_aspace6_readdata[0][65]),
      .avm_normls_load660_readdatavalid(local_avm_aspace6_readdatavalid[0][65]),
      .avm_normls_load660_writeack(local_avm_aspace6_writeack[0][65]),
      // AVM avm_normls_load671
      .avm_normls_load671_enable(local_avm_aspace6_enable[0][66]),
      .avm_normls_load671_read(local_avm_aspace6_read[0][66]),
      .avm_normls_load671_write(local_avm_aspace6_write[0][66]),
      .avm_normls_load671_burstcount(local_avm_aspace6_burstcount[0][66]),
      .avm_normls_load671_address(local_avm_aspace6_address[0][66]),
      .avm_normls_load671_writedata(local_avm_aspace6_writedata[0][66]),
      .avm_normls_load671_byteenable(local_avm_aspace6_byteenable[0][66]),
      .avm_normls_load671_waitrequest(local_avm_aspace6_waitrequest[0][66]),
      .avm_normls_load671_readdata(local_avm_aspace6_readdata[0][66]),
      .avm_normls_load671_readdatavalid(local_avm_aspace6_readdatavalid[0][66]),
      .avm_normls_load671_writeack(local_avm_aspace6_writeack[0][66]),
      // AVM avm_normls_load682
      .avm_normls_load682_enable(local_avm_aspace6_enable[0][67]),
      .avm_normls_load682_read(local_avm_aspace6_read[0][67]),
      .avm_normls_load682_write(local_avm_aspace6_write[0][67]),
      .avm_normls_load682_burstcount(local_avm_aspace6_burstcount[0][67]),
      .avm_normls_load682_address(local_avm_aspace6_address[0][67]),
      .avm_normls_load682_writedata(local_avm_aspace6_writedata[0][67]),
      .avm_normls_load682_byteenable(local_avm_aspace6_byteenable[0][67]),
      .avm_normls_load682_waitrequest(local_avm_aspace6_waitrequest[0][67]),
      .avm_normls_load682_readdata(local_avm_aspace6_readdata[0][67]),
      .avm_normls_load682_readdatavalid(local_avm_aspace6_readdatavalid[0][67]),
      .avm_normls_load682_writeack(local_avm_aspace6_writeack[0][67]),
      // AVM avm_normls_load699
      .avm_normls_load699_enable(local_avm_aspace6_enable[0][68]),
      .avm_normls_load699_read(local_avm_aspace6_read[0][68]),
      .avm_normls_load699_write(local_avm_aspace6_write[0][68]),
      .avm_normls_load699_burstcount(local_avm_aspace6_burstcount[0][68]),
      .avm_normls_load699_address(local_avm_aspace6_address[0][68]),
      .avm_normls_load699_writedata(local_avm_aspace6_writedata[0][68]),
      .avm_normls_load699_byteenable(local_avm_aspace6_byteenable[0][68]),
      .avm_normls_load699_waitrequest(local_avm_aspace6_waitrequest[0][68]),
      .avm_normls_load699_readdata(local_avm_aspace6_readdata[0][68]),
      .avm_normls_load699_readdatavalid(local_avm_aspace6_readdatavalid[0][68]),
      .avm_normls_load699_writeack(local_avm_aspace6_writeack[0][68]),
      // AVM avm_normls_load704
      .avm_normls_load704_enable(local_avm_aspace6_enable[0][69]),
      .avm_normls_load704_read(local_avm_aspace6_read[0][69]),
      .avm_normls_load704_write(local_avm_aspace6_write[0][69]),
      .avm_normls_load704_burstcount(local_avm_aspace6_burstcount[0][69]),
      .avm_normls_load704_address(local_avm_aspace6_address[0][69]),
      .avm_normls_load704_writedata(local_avm_aspace6_writedata[0][69]),
      .avm_normls_load704_byteenable(local_avm_aspace6_byteenable[0][69]),
      .avm_normls_load704_waitrequest(local_avm_aspace6_waitrequest[0][69]),
      .avm_normls_load704_readdata(local_avm_aspace6_readdata[0][69]),
      .avm_normls_load704_readdatavalid(local_avm_aspace6_readdatavalid[0][69]),
      .avm_normls_load704_writeack(local_avm_aspace6_writeack[0][69]),
      // AVM avm_normls_load741
      .avm_normls_load741_enable(local_avm_aspace6_enable[0][70]),
      .avm_normls_load741_read(local_avm_aspace6_read[0][70]),
      .avm_normls_load741_write(local_avm_aspace6_write[0][70]),
      .avm_normls_load741_burstcount(local_avm_aspace6_burstcount[0][70]),
      .avm_normls_load741_address(local_avm_aspace6_address[0][70]),
      .avm_normls_load741_writedata(local_avm_aspace6_writedata[0][70]),
      .avm_normls_load741_byteenable(local_avm_aspace6_byteenable[0][70]),
      .avm_normls_load741_waitrequest(local_avm_aspace6_waitrequest[0][70]),
      .avm_normls_load741_readdata(local_avm_aspace6_readdata[0][70]),
      .avm_normls_load741_readdatavalid(local_avm_aspace6_readdatavalid[0][70]),
      .avm_normls_load741_writeack(local_avm_aspace6_writeack[0][70]),
      // AVM avm_normls_load746
      .avm_normls_load746_enable(local_avm_aspace6_enable[0][71]),
      .avm_normls_load746_read(local_avm_aspace6_read[0][71]),
      .avm_normls_load746_write(local_avm_aspace6_write[0][71]),
      .avm_normls_load746_burstcount(local_avm_aspace6_burstcount[0][71]),
      .avm_normls_load746_address(local_avm_aspace6_address[0][71]),
      .avm_normls_load746_writedata(local_avm_aspace6_writedata[0][71]),
      .avm_normls_load746_byteenable(local_avm_aspace6_byteenable[0][71]),
      .avm_normls_load746_waitrequest(local_avm_aspace6_waitrequest[0][71]),
      .avm_normls_load746_readdata(local_avm_aspace6_readdata[0][71]),
      .avm_normls_load746_readdatavalid(local_avm_aspace6_readdatavalid[0][71]),
      .avm_normls_load746_writeack(local_avm_aspace6_writeack[0][71]),
      // AVM avm_normls_load751
      .avm_normls_load751_enable(local_avm_aspace6_enable[0][72]),
      .avm_normls_load751_read(local_avm_aspace6_read[0][72]),
      .avm_normls_load751_write(local_avm_aspace6_write[0][72]),
      .avm_normls_load751_burstcount(local_avm_aspace6_burstcount[0][72]),
      .avm_normls_load751_address(local_avm_aspace6_address[0][72]),
      .avm_normls_load751_writedata(local_avm_aspace6_writedata[0][72]),
      .avm_normls_load751_byteenable(local_avm_aspace6_byteenable[0][72]),
      .avm_normls_load751_waitrequest(local_avm_aspace6_waitrequest[0][72]),
      .avm_normls_load751_readdata(local_avm_aspace6_readdata[0][72]),
      .avm_normls_load751_readdatavalid(local_avm_aspace6_readdatavalid[0][72]),
      .avm_normls_load751_writeack(local_avm_aspace6_writeack[0][72]),
      // AVM avm_tmp46_i_i1
      .avm_tmp46_i_i1_enable(local_avm_aspace6_enable[0][73]),
      .avm_tmp46_i_i1_read(local_avm_aspace6_read[0][73]),
      .avm_tmp46_i_i1_write(local_avm_aspace6_write[0][73]),
      .avm_tmp46_i_i1_burstcount(local_avm_aspace6_burstcount[0][73]),
      .avm_tmp46_i_i1_address(local_avm_aspace6_address[0][73]),
      .avm_tmp46_i_i1_writedata(local_avm_aspace6_writedata[0][73]),
      .avm_tmp46_i_i1_byteenable(local_avm_aspace6_byteenable[0][73]),
      .avm_tmp46_i_i1_waitrequest(local_avm_aspace6_waitrequest[0][73]),
      .avm_tmp46_i_i1_readdata(local_avm_aspace6_readdata[0][73]),
      .avm_tmp46_i_i1_readdatavalid(local_avm_aspace6_readdatavalid[0][73]),
      .avm_tmp46_i_i1_writeack(local_avm_aspace6_writeack[0][73]),
      // AVM avm_tmp46_i_i1667
      .avm_tmp46_i_i1667_enable(local_avm_aspace6_enable[0][74]),
      .avm_tmp46_i_i1667_read(local_avm_aspace6_read[0][74]),
      .avm_tmp46_i_i1667_write(local_avm_aspace6_write[0][74]),
      .avm_tmp46_i_i1667_burstcount(local_avm_aspace6_burstcount[0][74]),
      .avm_tmp46_i_i1667_address(local_avm_aspace6_address[0][74]),
      .avm_tmp46_i_i1667_writedata(local_avm_aspace6_writedata[0][74]),
      .avm_tmp46_i_i1667_byteenable(local_avm_aspace6_byteenable[0][74]),
      .avm_tmp46_i_i1667_waitrequest(local_avm_aspace6_waitrequest[0][74]),
      .avm_tmp46_i_i1667_readdata(local_avm_aspace6_readdata[0][74]),
      .avm_tmp46_i_i1667_readdatavalid(local_avm_aspace6_readdatavalid[0][74]),
      .avm_tmp46_i_i1667_writeack(local_avm_aspace6_writeack[0][74]),
      // AVM avm_tmp46_i_i30354
      .avm_tmp46_i_i30354_enable(local_avm_aspace6_enable[0][75]),
      .avm_tmp46_i_i30354_read(local_avm_aspace6_read[0][75]),
      .avm_tmp46_i_i30354_write(local_avm_aspace6_write[0][75]),
      .avm_tmp46_i_i30354_burstcount(local_avm_aspace6_burstcount[0][75]),
      .avm_tmp46_i_i30354_address(local_avm_aspace6_address[0][75]),
      .avm_tmp46_i_i30354_writedata(local_avm_aspace6_writedata[0][75]),
      .avm_tmp46_i_i30354_byteenable(local_avm_aspace6_byteenable[0][75]),
      .avm_tmp46_i_i30354_waitrequest(local_avm_aspace6_waitrequest[0][75]),
      .avm_tmp46_i_i30354_readdata(local_avm_aspace6_readdata[0][75]),
      .avm_tmp46_i_i30354_readdatavalid(local_avm_aspace6_readdatavalid[0][75]),
      .avm_tmp46_i_i30354_writeack(local_avm_aspace6_writeack[0][75]),
      // AVM avm_unnamed_processFPGA103
      .avm_unnamed_processFPGA103_enable(local_avm_aspace6_enable[0][76]),
      .avm_unnamed_processFPGA103_read(local_avm_aspace6_read[0][76]),
      .avm_unnamed_processFPGA103_write(local_avm_aspace6_write[0][76]),
      .avm_unnamed_processFPGA103_burstcount(local_avm_aspace6_burstcount[0][76]),
      .avm_unnamed_processFPGA103_address(local_avm_aspace6_address[0][76]),
      .avm_unnamed_processFPGA103_writedata(local_avm_aspace6_writedata[0][76]),
      .avm_unnamed_processFPGA103_byteenable(local_avm_aspace6_byteenable[0][76]),
      .avm_unnamed_processFPGA103_waitrequest(local_avm_aspace6_waitrequest[0][76]),
      .avm_unnamed_processFPGA103_readdata(local_avm_aspace6_readdata[0][76]),
      .avm_unnamed_processFPGA103_readdatavalid(local_avm_aspace6_readdatavalid[0][76]),
      .avm_unnamed_processFPGA103_writeack(local_avm_aspace6_writeack[0][76]),
      // AVM avm_unnamed_processFPGA189
      .avm_unnamed_processFPGA189_enable(local_avm_aspace6_enable[0][77]),
      .avm_unnamed_processFPGA189_read(local_avm_aspace6_read[0][77]),
      .avm_unnamed_processFPGA189_write(local_avm_aspace6_write[0][77]),
      .avm_unnamed_processFPGA189_burstcount(local_avm_aspace6_burstcount[0][77]),
      .avm_unnamed_processFPGA189_address(local_avm_aspace6_address[0][77]),
      .avm_unnamed_processFPGA189_writedata(local_avm_aspace6_writedata[0][77]),
      .avm_unnamed_processFPGA189_byteenable(local_avm_aspace6_byteenable[0][77]),
      .avm_unnamed_processFPGA189_waitrequest(local_avm_aspace6_waitrequest[0][77]),
      .avm_unnamed_processFPGA189_readdata(local_avm_aspace6_readdata[0][77]),
      .avm_unnamed_processFPGA189_readdatavalid(local_avm_aspace6_readdatavalid[0][77]),
      .avm_unnamed_processFPGA189_writeack(local_avm_aspace6_writeack[0][77]),
      // AVM avm_unnamed_processFPGA190
      .avm_unnamed_processFPGA190_enable(local_avm_aspace6_enable[0][78]),
      .avm_unnamed_processFPGA190_read(local_avm_aspace6_read[0][78]),
      .avm_unnamed_processFPGA190_write(local_avm_aspace6_write[0][78]),
      .avm_unnamed_processFPGA190_burstcount(local_avm_aspace6_burstcount[0][78]),
      .avm_unnamed_processFPGA190_address(local_avm_aspace6_address[0][78]),
      .avm_unnamed_processFPGA190_writedata(local_avm_aspace6_writedata[0][78]),
      .avm_unnamed_processFPGA190_byteenable(local_avm_aspace6_byteenable[0][78]),
      .avm_unnamed_processFPGA190_waitrequest(local_avm_aspace6_waitrequest[0][78]),
      .avm_unnamed_processFPGA190_readdata(local_avm_aspace6_readdata[0][78]),
      .avm_unnamed_processFPGA190_readdatavalid(local_avm_aspace6_readdatavalid[0][78]),
      .avm_unnamed_processFPGA190_writeack(local_avm_aspace6_writeack[0][78]),
      // AVM avm_unnamed_processFPGA207
      .avm_unnamed_processFPGA207_enable(local_avm_aspace6_enable[0][79]),
      .avm_unnamed_processFPGA207_read(local_avm_aspace6_read[0][79]),
      .avm_unnamed_processFPGA207_write(local_avm_aspace6_write[0][79]),
      .avm_unnamed_processFPGA207_burstcount(local_avm_aspace6_burstcount[0][79]),
      .avm_unnamed_processFPGA207_address(local_avm_aspace6_address[0][79]),
      .avm_unnamed_processFPGA207_writedata(local_avm_aspace6_writedata[0][79]),
      .avm_unnamed_processFPGA207_byteenable(local_avm_aspace6_byteenable[0][79]),
      .avm_unnamed_processFPGA207_waitrequest(local_avm_aspace6_waitrequest[0][79]),
      .avm_unnamed_processFPGA207_readdata(local_avm_aspace6_readdata[0][79]),
      .avm_unnamed_processFPGA207_readdatavalid(local_avm_aspace6_readdatavalid[0][79]),
      .avm_unnamed_processFPGA207_writeack(local_avm_aspace6_writeack[0][79]),
      // AVM avm_unnamed_processFPGA288
      .avm_unnamed_processFPGA288_enable(local_avm_aspace6_enable[0][80]),
      .avm_unnamed_processFPGA288_read(local_avm_aspace6_read[0][80]),
      .avm_unnamed_processFPGA288_write(local_avm_aspace6_write[0][80]),
      .avm_unnamed_processFPGA288_burstcount(local_avm_aspace6_burstcount[0][80]),
      .avm_unnamed_processFPGA288_address(local_avm_aspace6_address[0][80]),
      .avm_unnamed_processFPGA288_writedata(local_avm_aspace6_writedata[0][80]),
      .avm_unnamed_processFPGA288_byteenable(local_avm_aspace6_byteenable[0][80]),
      .avm_unnamed_processFPGA288_waitrequest(local_avm_aspace6_waitrequest[0][80]),
      .avm_unnamed_processFPGA288_readdata(local_avm_aspace6_readdata[0][80]),
      .avm_unnamed_processFPGA288_readdatavalid(local_avm_aspace6_readdatavalid[0][80]),
      .avm_unnamed_processFPGA288_writeack(local_avm_aspace6_writeack[0][80]),
      // AVM avm_unnamed_processFPGA289
      .avm_unnamed_processFPGA289_enable(local_avm_aspace6_enable[0][81]),
      .avm_unnamed_processFPGA289_read(local_avm_aspace6_read[0][81]),
      .avm_unnamed_processFPGA289_write(local_avm_aspace6_write[0][81]),
      .avm_unnamed_processFPGA289_burstcount(local_avm_aspace6_burstcount[0][81]),
      .avm_unnamed_processFPGA289_address(local_avm_aspace6_address[0][81]),
      .avm_unnamed_processFPGA289_writedata(local_avm_aspace6_writedata[0][81]),
      .avm_unnamed_processFPGA289_byteenable(local_avm_aspace6_byteenable[0][81]),
      .avm_unnamed_processFPGA289_waitrequest(local_avm_aspace6_waitrequest[0][81]),
      .avm_unnamed_processFPGA289_readdata(local_avm_aspace6_readdata[0][81]),
      .avm_unnamed_processFPGA289_readdatavalid(local_avm_aspace6_readdatavalid[0][81]),
      .avm_unnamed_processFPGA289_writeack(local_avm_aspace6_writeack[0][81]),
      // AVM avm_unnamed_processFPGA314
      .avm_unnamed_processFPGA314_enable(local_avm_aspace6_enable[0][82]),
      .avm_unnamed_processFPGA314_read(local_avm_aspace6_read[0][82]),
      .avm_unnamed_processFPGA314_write(local_avm_aspace6_write[0][82]),
      .avm_unnamed_processFPGA314_burstcount(local_avm_aspace6_burstcount[0][82]),
      .avm_unnamed_processFPGA314_address(local_avm_aspace6_address[0][82]),
      .avm_unnamed_processFPGA314_writedata(local_avm_aspace6_writedata[0][82]),
      .avm_unnamed_processFPGA314_byteenable(local_avm_aspace6_byteenable[0][82]),
      .avm_unnamed_processFPGA314_waitrequest(local_avm_aspace6_waitrequest[0][82]),
      .avm_unnamed_processFPGA314_readdata(local_avm_aspace6_readdata[0][82]),
      .avm_unnamed_processFPGA314_readdatavalid(local_avm_aspace6_readdatavalid[0][82]),
      .avm_unnamed_processFPGA314_writeack(local_avm_aspace6_writeack[0][82]),
      // AVM avm_unnamed_processFPGA368
      .avm_unnamed_processFPGA368_enable(local_avm_aspace6_enable[0][83]),
      .avm_unnamed_processFPGA368_read(local_avm_aspace6_read[0][83]),
      .avm_unnamed_processFPGA368_write(local_avm_aspace6_write[0][83]),
      .avm_unnamed_processFPGA368_burstcount(local_avm_aspace6_burstcount[0][83]),
      .avm_unnamed_processFPGA368_address(local_avm_aspace6_address[0][83]),
      .avm_unnamed_processFPGA368_writedata(local_avm_aspace6_writedata[0][83]),
      .avm_unnamed_processFPGA368_byteenable(local_avm_aspace6_byteenable[0][83]),
      .avm_unnamed_processFPGA368_waitrequest(local_avm_aspace6_waitrequest[0][83]),
      .avm_unnamed_processFPGA368_readdata(local_avm_aspace6_readdata[0][83]),
      .avm_unnamed_processFPGA368_readdatavalid(local_avm_aspace6_readdatavalid[0][83]),
      .avm_unnamed_processFPGA368_writeack(local_avm_aspace6_writeack[0][83]),
      // AVM avm_unnamed_processFPGA382
      .avm_unnamed_processFPGA382_enable(local_avm_aspace6_enable[0][84]),
      .avm_unnamed_processFPGA382_read(local_avm_aspace6_read[0][84]),
      .avm_unnamed_processFPGA382_write(local_avm_aspace6_write[0][84]),
      .avm_unnamed_processFPGA382_burstcount(local_avm_aspace6_burstcount[0][84]),
      .avm_unnamed_processFPGA382_address(local_avm_aspace6_address[0][84]),
      .avm_unnamed_processFPGA382_writedata(local_avm_aspace6_writedata[0][84]),
      .avm_unnamed_processFPGA382_byteenable(local_avm_aspace6_byteenable[0][84]),
      .avm_unnamed_processFPGA382_waitrequest(local_avm_aspace6_waitrequest[0][84]),
      .avm_unnamed_processFPGA382_readdata(local_avm_aspace6_readdata[0][84]),
      .avm_unnamed_processFPGA382_readdatavalid(local_avm_aspace6_readdatavalid[0][84]),
      .avm_unnamed_processFPGA382_writeack(local_avm_aspace6_writeack[0][84]),
      // AVM avm_unnamed_processFPGA50
      .avm_unnamed_processFPGA50_enable(local_avm_aspace6_enable[0][85]),
      .avm_unnamed_processFPGA50_read(local_avm_aspace6_read[0][85]),
      .avm_unnamed_processFPGA50_write(local_avm_aspace6_write[0][85]),
      .avm_unnamed_processFPGA50_burstcount(local_avm_aspace6_burstcount[0][85]),
      .avm_unnamed_processFPGA50_address(local_avm_aspace6_address[0][85]),
      .avm_unnamed_processFPGA50_writedata(local_avm_aspace6_writedata[0][85]),
      .avm_unnamed_processFPGA50_byteenable(local_avm_aspace6_byteenable[0][85]),
      .avm_unnamed_processFPGA50_waitrequest(local_avm_aspace6_waitrequest[0][85]),
      .avm_unnamed_processFPGA50_readdata(local_avm_aspace6_readdata[0][85]),
      .avm_unnamed_processFPGA50_readdatavalid(local_avm_aspace6_readdatavalid[0][85]),
      .avm_unnamed_processFPGA50_writeack(local_avm_aspace6_writeack[0][85]),
      // AVM avm_unnamed_processFPGA86
      .avm_unnamed_processFPGA86_enable(local_avm_aspace6_enable[0][86]),
      .avm_unnamed_processFPGA86_read(local_avm_aspace6_read[0][86]),
      .avm_unnamed_processFPGA86_write(local_avm_aspace6_write[0][86]),
      .avm_unnamed_processFPGA86_burstcount(local_avm_aspace6_burstcount[0][86]),
      .avm_unnamed_processFPGA86_address(local_avm_aspace6_address[0][86]),
      .avm_unnamed_processFPGA86_writedata(local_avm_aspace6_writedata[0][86]),
      .avm_unnamed_processFPGA86_byteenable(local_avm_aspace6_byteenable[0][86]),
      .avm_unnamed_processFPGA86_waitrequest(local_avm_aspace6_waitrequest[0][86]),
      .avm_unnamed_processFPGA86_readdata(local_avm_aspace6_readdata[0][86]),
      .avm_unnamed_processFPGA86_readdatavalid(local_avm_aspace6_readdatavalid[0][86]),
      .avm_unnamed_processFPGA86_writeack(local_avm_aspace6_writeack[0][86]),
      // AVM avm_memcoalesce_localConn_load_0
      .avm_memcoalesce_localConn_load_0_enable(local_avm_aspace7_enable[0][0]),
      .avm_memcoalesce_localConn_load_0_read(local_avm_aspace7_read[0][0]),
      .avm_memcoalesce_localConn_load_0_write(local_avm_aspace7_write[0][0]),
      .avm_memcoalesce_localConn_load_0_burstcount(local_avm_aspace7_burstcount[0][0]),
      .avm_memcoalesce_localConn_load_0_address(local_avm_aspace7_address[0][0]),
      .avm_memcoalesce_localConn_load_0_writedata(local_avm_aspace7_writedata[0][0]),
      .avm_memcoalesce_localConn_load_0_byteenable(local_avm_aspace7_byteenable[0][0]),
      .avm_memcoalesce_localConn_load_0_waitrequest(local_avm_aspace7_waitrequest[0][0]),
      .avm_memcoalesce_localConn_load_0_readdata(local_avm_aspace7_readdata[0][0]),
      .avm_memcoalesce_localConn_load_0_readdatavalid(local_avm_aspace7_readdatavalid[0][0]),
      .avm_memcoalesce_localConn_load_0_writeack(local_avm_aspace7_writeack[0][0]),
      // AVM avm_memcoalesce_localConn_load_0121
      .avm_memcoalesce_localConn_load_0121_enable(local_avm_aspace7_enable[0][1]),
      .avm_memcoalesce_localConn_load_0121_read(local_avm_aspace7_read[0][1]),
      .avm_memcoalesce_localConn_load_0121_write(local_avm_aspace7_write[0][1]),
      .avm_memcoalesce_localConn_load_0121_burstcount(local_avm_aspace7_burstcount[0][1]),
      .avm_memcoalesce_localConn_load_0121_address(local_avm_aspace7_address[0][1]),
      .avm_memcoalesce_localConn_load_0121_writedata(local_avm_aspace7_writedata[0][1]),
      .avm_memcoalesce_localConn_load_0121_byteenable(local_avm_aspace7_byteenable[0][1]),
      .avm_memcoalesce_localConn_load_0121_waitrequest(local_avm_aspace7_waitrequest[0][1]),
      .avm_memcoalesce_localConn_load_0121_readdata(local_avm_aspace7_readdata[0][1]),
      .avm_memcoalesce_localConn_load_0121_readdatavalid(local_avm_aspace7_readdatavalid[0][1]),
      .avm_memcoalesce_localConn_load_0121_writeack(local_avm_aspace7_writeack[0][1]),
      // AVM avm_memcoalesce_localConn_load_0138
      .avm_memcoalesce_localConn_load_0138_enable(local_avm_aspace7_enable[0][2]),
      .avm_memcoalesce_localConn_load_0138_read(local_avm_aspace7_read[0][2]),
      .avm_memcoalesce_localConn_load_0138_write(local_avm_aspace7_write[0][2]),
      .avm_memcoalesce_localConn_load_0138_burstcount(local_avm_aspace7_burstcount[0][2]),
      .avm_memcoalesce_localConn_load_0138_address(local_avm_aspace7_address[0][2]),
      .avm_memcoalesce_localConn_load_0138_writedata(local_avm_aspace7_writedata[0][2]),
      .avm_memcoalesce_localConn_load_0138_byteenable(local_avm_aspace7_byteenable[0][2]),
      .avm_memcoalesce_localConn_load_0138_waitrequest(local_avm_aspace7_waitrequest[0][2]),
      .avm_memcoalesce_localConn_load_0138_readdata(local_avm_aspace7_readdata[0][2]),
      .avm_memcoalesce_localConn_load_0138_readdatavalid(local_avm_aspace7_readdatavalid[0][2]),
      .avm_memcoalesce_localConn_load_0138_writeack(local_avm_aspace7_writeack[0][2]),
      // AVM avm_memcoalesce_localConn_load_020
      .avm_memcoalesce_localConn_load_020_enable(local_avm_aspace7_enable[0][3]),
      .avm_memcoalesce_localConn_load_020_read(local_avm_aspace7_read[0][3]),
      .avm_memcoalesce_localConn_load_020_write(local_avm_aspace7_write[0][3]),
      .avm_memcoalesce_localConn_load_020_burstcount(local_avm_aspace7_burstcount[0][3]),
      .avm_memcoalesce_localConn_load_020_address(local_avm_aspace7_address[0][3]),
      .avm_memcoalesce_localConn_load_020_writedata(local_avm_aspace7_writedata[0][3]),
      .avm_memcoalesce_localConn_load_020_byteenable(local_avm_aspace7_byteenable[0][3]),
      .avm_memcoalesce_localConn_load_020_waitrequest(local_avm_aspace7_waitrequest[0][3]),
      .avm_memcoalesce_localConn_load_020_readdata(local_avm_aspace7_readdata[0][3]),
      .avm_memcoalesce_localConn_load_020_readdatavalid(local_avm_aspace7_readdatavalid[0][3]),
      .avm_memcoalesce_localConn_load_020_writeack(local_avm_aspace7_writeack[0][3]),
      // AVM avm_memcoalesce_localConn_load_057
      .avm_memcoalesce_localConn_load_057_enable(local_avm_aspace7_enable[0][4]),
      .avm_memcoalesce_localConn_load_057_read(local_avm_aspace7_read[0][4]),
      .avm_memcoalesce_localConn_load_057_write(local_avm_aspace7_write[0][4]),
      .avm_memcoalesce_localConn_load_057_burstcount(local_avm_aspace7_burstcount[0][4]),
      .avm_memcoalesce_localConn_load_057_address(local_avm_aspace7_address[0][4]),
      .avm_memcoalesce_localConn_load_057_writedata(local_avm_aspace7_writedata[0][4]),
      .avm_memcoalesce_localConn_load_057_byteenable(local_avm_aspace7_byteenable[0][4]),
      .avm_memcoalesce_localConn_load_057_waitrequest(local_avm_aspace7_waitrequest[0][4]),
      .avm_memcoalesce_localConn_load_057_readdata(local_avm_aspace7_readdata[0][4]),
      .avm_memcoalesce_localConn_load_057_readdatavalid(local_avm_aspace7_readdatavalid[0][4]),
      .avm_memcoalesce_localConn_load_057_writeack(local_avm_aspace7_writeack[0][4]),
      // AVM avm_memdep_15
      .avm_memdep_15_enable(local_avm_aspace7_enable[0][5]),
      .avm_memdep_15_read(local_avm_aspace7_read[0][5]),
      .avm_memdep_15_write(local_avm_aspace7_write[0][5]),
      .avm_memdep_15_burstcount(local_avm_aspace7_burstcount[0][5]),
      .avm_memdep_15_address(local_avm_aspace7_address[0][5]),
      .avm_memdep_15_writedata(local_avm_aspace7_writedata[0][5]),
      .avm_memdep_15_byteenable(local_avm_aspace7_byteenable[0][5]),
      .avm_memdep_15_waitrequest(local_avm_aspace7_waitrequest[0][5]),
      .avm_memdep_15_readdata(local_avm_aspace7_readdata[0][5]),
      .avm_memdep_15_readdatavalid(local_avm_aspace7_readdatavalid[0][5]),
      .avm_memdep_15_writeack(local_avm_aspace7_writeack[0][5]),
      // AVM avm_memdep_25
      .avm_memdep_25_enable(local_avm_aspace7_enable[0][6]),
      .avm_memdep_25_read(local_avm_aspace7_read[0][6]),
      .avm_memdep_25_write(local_avm_aspace7_write[0][6]),
      .avm_memdep_25_burstcount(local_avm_aspace7_burstcount[0][6]),
      .avm_memdep_25_address(local_avm_aspace7_address[0][6]),
      .avm_memdep_25_writedata(local_avm_aspace7_writedata[0][6]),
      .avm_memdep_25_byteenable(local_avm_aspace7_byteenable[0][6]),
      .avm_memdep_25_waitrequest(local_avm_aspace7_waitrequest[0][6]),
      .avm_memdep_25_readdata(local_avm_aspace7_readdata[0][6]),
      .avm_memdep_25_readdatavalid(local_avm_aspace7_readdatavalid[0][6]),
      .avm_memdep_25_writeack(local_avm_aspace7_writeack[0][6]),
      // AVM avm_memdep_38
      .avm_memdep_38_enable(local_avm_aspace7_enable[0][7]),
      .avm_memdep_38_read(local_avm_aspace7_read[0][7]),
      .avm_memdep_38_write(local_avm_aspace7_write[0][7]),
      .avm_memdep_38_burstcount(local_avm_aspace7_burstcount[0][7]),
      .avm_memdep_38_address(local_avm_aspace7_address[0][7]),
      .avm_memdep_38_writedata(local_avm_aspace7_writedata[0][7]),
      .avm_memdep_38_byteenable(local_avm_aspace7_byteenable[0][7]),
      .avm_memdep_38_waitrequest(local_avm_aspace7_waitrequest[0][7]),
      .avm_memdep_38_readdata(local_avm_aspace7_readdata[0][7]),
      .avm_memdep_38_readdatavalid(local_avm_aspace7_readdatavalid[0][7]),
      .avm_memdep_38_writeack(local_avm_aspace7_writeack[0][7]),
      // AVM avm_memdep_4
      .avm_memdep_4_enable(local_avm_aspace7_enable[0][8]),
      .avm_memdep_4_read(local_avm_aspace7_read[0][8]),
      .avm_memdep_4_write(local_avm_aspace7_write[0][8]),
      .avm_memdep_4_burstcount(local_avm_aspace7_burstcount[0][8]),
      .avm_memdep_4_address(local_avm_aspace7_address[0][8]),
      .avm_memdep_4_writedata(local_avm_aspace7_writedata[0][8]),
      .avm_memdep_4_byteenable(local_avm_aspace7_byteenable[0][8]),
      .avm_memdep_4_waitrequest(local_avm_aspace7_waitrequest[0][8]),
      .avm_memdep_4_readdata(local_avm_aspace7_readdata[0][8]),
      .avm_memdep_4_readdatavalid(local_avm_aspace7_readdatavalid[0][8]),
      .avm_memdep_4_writeack(local_avm_aspace7_writeack[0][8]),
      // AVM avm_memdep_47
      .avm_memdep_47_enable(local_avm_aspace7_enable[0][9]),
      .avm_memdep_47_read(local_avm_aspace7_read[0][9]),
      .avm_memdep_47_write(local_avm_aspace7_write[0][9]),
      .avm_memdep_47_burstcount(local_avm_aspace7_burstcount[0][9]),
      .avm_memdep_47_address(local_avm_aspace7_address[0][9]),
      .avm_memdep_47_writedata(local_avm_aspace7_writedata[0][9]),
      .avm_memdep_47_byteenable(local_avm_aspace7_byteenable[0][9]),
      .avm_memdep_47_waitrequest(local_avm_aspace7_waitrequest[0][9]),
      .avm_memdep_47_readdata(local_avm_aspace7_readdata[0][9]),
      .avm_memdep_47_readdatavalid(local_avm_aspace7_readdatavalid[0][9]),
      .avm_memdep_47_writeack(local_avm_aspace7_writeack[0][9]),
      // AVM avm_memdep_5
      .avm_memdep_5_enable(local_avm_aspace7_enable[0][10]),
      .avm_memdep_5_read(local_avm_aspace7_read[0][10]),
      .avm_memdep_5_write(local_avm_aspace7_write[0][10]),
      .avm_memdep_5_burstcount(local_avm_aspace7_burstcount[0][10]),
      .avm_memdep_5_address(local_avm_aspace7_address[0][10]),
      .avm_memdep_5_writedata(local_avm_aspace7_writedata[0][10]),
      .avm_memdep_5_byteenable(local_avm_aspace7_byteenable[0][10]),
      .avm_memdep_5_waitrequest(local_avm_aspace7_waitrequest[0][10]),
      .avm_memdep_5_readdata(local_avm_aspace7_readdata[0][10]),
      .avm_memdep_5_readdatavalid(local_avm_aspace7_readdatavalid[0][10]),
      .avm_memdep_5_writeack(local_avm_aspace7_writeack[0][10]),
      // AVM avm_memdep_6
      .avm_memdep_6_enable(local_avm_aspace7_enable[0][11]),
      .avm_memdep_6_read(local_avm_aspace7_read[0][11]),
      .avm_memdep_6_write(local_avm_aspace7_write[0][11]),
      .avm_memdep_6_burstcount(local_avm_aspace7_burstcount[0][11]),
      .avm_memdep_6_address(local_avm_aspace7_address[0][11]),
      .avm_memdep_6_writedata(local_avm_aspace7_writedata[0][11]),
      .avm_memdep_6_byteenable(local_avm_aspace7_byteenable[0][11]),
      .avm_memdep_6_waitrequest(local_avm_aspace7_waitrequest[0][11]),
      .avm_memdep_6_readdata(local_avm_aspace7_readdata[0][11]),
      .avm_memdep_6_readdatavalid(local_avm_aspace7_readdatavalid[0][11]),
      .avm_memdep_6_writeack(local_avm_aspace7_writeack[0][11]),
      // AVM avm_memdep_8
      .avm_memdep_8_enable(local_avm_aspace7_enable[0][12]),
      .avm_memdep_8_read(local_avm_aspace7_read[0][12]),
      .avm_memdep_8_write(local_avm_aspace7_write[0][12]),
      .avm_memdep_8_burstcount(local_avm_aspace7_burstcount[0][12]),
      .avm_memdep_8_address(local_avm_aspace7_address[0][12]),
      .avm_memdep_8_writedata(local_avm_aspace7_writedata[0][12]),
      .avm_memdep_8_byteenable(local_avm_aspace7_byteenable[0][12]),
      .avm_memdep_8_waitrequest(local_avm_aspace7_waitrequest[0][12]),
      .avm_memdep_8_readdata(local_avm_aspace7_readdata[0][12]),
      .avm_memdep_8_readdatavalid(local_avm_aspace7_readdatavalid[0][12]),
      .avm_memdep_8_writeack(local_avm_aspace7_writeack[0][12]),
      // AVM avm_tmp10_i_i115626
      .avm_tmp10_i_i115626_enable(local_avm_aspace7_enable[0][13]),
      .avm_tmp10_i_i115626_read(local_avm_aspace7_read[0][13]),
      .avm_tmp10_i_i115626_write(local_avm_aspace7_write[0][13]),
      .avm_tmp10_i_i115626_burstcount(local_avm_aspace7_burstcount[0][13]),
      .avm_tmp10_i_i115626_address(local_avm_aspace7_address[0][13]),
      .avm_tmp10_i_i115626_writedata(local_avm_aspace7_writedata[0][13]),
      .avm_tmp10_i_i115626_byteenable(local_avm_aspace7_byteenable[0][13]),
      .avm_tmp10_i_i115626_waitrequest(local_avm_aspace7_waitrequest[0][13]),
      .avm_tmp10_i_i115626_readdata(local_avm_aspace7_readdata[0][13]),
      .avm_tmp10_i_i115626_readdatavalid(local_avm_aspace7_readdatavalid[0][13]),
      .avm_tmp10_i_i115626_writeack(local_avm_aspace7_writeack[0][13]),
      // AVM avm_tmp10_i_i46
      .avm_tmp10_i_i46_enable(local_avm_aspace7_enable[0][14]),
      .avm_tmp10_i_i46_read(local_avm_aspace7_read[0][14]),
      .avm_tmp10_i_i46_write(local_avm_aspace7_write[0][14]),
      .avm_tmp10_i_i46_burstcount(local_avm_aspace7_burstcount[0][14]),
      .avm_tmp10_i_i46_address(local_avm_aspace7_address[0][14]),
      .avm_tmp10_i_i46_writedata(local_avm_aspace7_writedata[0][14]),
      .avm_tmp10_i_i46_byteenable(local_avm_aspace7_byteenable[0][14]),
      .avm_tmp10_i_i46_waitrequest(local_avm_aspace7_waitrequest[0][14]),
      .avm_tmp10_i_i46_readdata(local_avm_aspace7_readdata[0][14]),
      .avm_tmp10_i_i46_readdatavalid(local_avm_aspace7_readdatavalid[0][14]),
      .avm_tmp10_i_i46_writeack(local_avm_aspace7_writeack[0][14]),
      // AVM avm_tmp11_i_i115729
      .avm_tmp11_i_i115729_enable(local_avm_aspace7_enable[0][15]),
      .avm_tmp11_i_i115729_read(local_avm_aspace7_read[0][15]),
      .avm_tmp11_i_i115729_write(local_avm_aspace7_write[0][15]),
      .avm_tmp11_i_i115729_burstcount(local_avm_aspace7_burstcount[0][15]),
      .avm_tmp11_i_i115729_address(local_avm_aspace7_address[0][15]),
      .avm_tmp11_i_i115729_writedata(local_avm_aspace7_writedata[0][15]),
      .avm_tmp11_i_i115729_byteenable(local_avm_aspace7_byteenable[0][15]),
      .avm_tmp11_i_i115729_waitrequest(local_avm_aspace7_waitrequest[0][15]),
      .avm_tmp11_i_i115729_readdata(local_avm_aspace7_readdata[0][15]),
      .avm_tmp11_i_i115729_readdatavalid(local_avm_aspace7_readdatavalid[0][15]),
      .avm_tmp11_i_i115729_writeack(local_avm_aspace7_writeack[0][15]),
      // AVM avm_tmp11_i_i49
      .avm_tmp11_i_i49_enable(local_avm_aspace7_enable[0][16]),
      .avm_tmp11_i_i49_read(local_avm_aspace7_read[0][16]),
      .avm_tmp11_i_i49_write(local_avm_aspace7_write[0][16]),
      .avm_tmp11_i_i49_burstcount(local_avm_aspace7_burstcount[0][16]),
      .avm_tmp11_i_i49_address(local_avm_aspace7_address[0][16]),
      .avm_tmp11_i_i49_writedata(local_avm_aspace7_writedata[0][16]),
      .avm_tmp11_i_i49_byteenable(local_avm_aspace7_byteenable[0][16]),
      .avm_tmp11_i_i49_waitrequest(local_avm_aspace7_waitrequest[0][16]),
      .avm_tmp11_i_i49_readdata(local_avm_aspace7_readdata[0][16]),
      .avm_tmp11_i_i49_readdatavalid(local_avm_aspace7_readdatavalid[0][16]),
      .avm_tmp11_i_i49_writeack(local_avm_aspace7_writeack[0][16]),
      // AVM avm_tmp12_i_i115827
      .avm_tmp12_i_i115827_enable(local_avm_aspace7_enable[0][17]),
      .avm_tmp12_i_i115827_read(local_avm_aspace7_read[0][17]),
      .avm_tmp12_i_i115827_write(local_avm_aspace7_write[0][17]),
      .avm_tmp12_i_i115827_burstcount(local_avm_aspace7_burstcount[0][17]),
      .avm_tmp12_i_i115827_address(local_avm_aspace7_address[0][17]),
      .avm_tmp12_i_i115827_writedata(local_avm_aspace7_writedata[0][17]),
      .avm_tmp12_i_i115827_byteenable(local_avm_aspace7_byteenable[0][17]),
      .avm_tmp12_i_i115827_waitrequest(local_avm_aspace7_waitrequest[0][17]),
      .avm_tmp12_i_i115827_readdata(local_avm_aspace7_readdata[0][17]),
      .avm_tmp12_i_i115827_readdatavalid(local_avm_aspace7_readdatavalid[0][17]),
      .avm_tmp12_i_i115827_writeack(local_avm_aspace7_writeack[0][17]),
      // AVM avm_tmp12_i_i47
      .avm_tmp12_i_i47_enable(local_avm_aspace7_enable[0][18]),
      .avm_tmp12_i_i47_read(local_avm_aspace7_read[0][18]),
      .avm_tmp12_i_i47_write(local_avm_aspace7_write[0][18]),
      .avm_tmp12_i_i47_burstcount(local_avm_aspace7_burstcount[0][18]),
      .avm_tmp12_i_i47_address(local_avm_aspace7_address[0][18]),
      .avm_tmp12_i_i47_writedata(local_avm_aspace7_writedata[0][18]),
      .avm_tmp12_i_i47_byteenable(local_avm_aspace7_byteenable[0][18]),
      .avm_tmp12_i_i47_waitrequest(local_avm_aspace7_waitrequest[0][18]),
      .avm_tmp12_i_i47_readdata(local_avm_aspace7_readdata[0][18]),
      .avm_tmp12_i_i47_readdatavalid(local_avm_aspace7_readdatavalid[0][18]),
      .avm_tmp12_i_i47_writeack(local_avm_aspace7_writeack[0][18]),
      // AVM avm_tmp13_i_i115928
      .avm_tmp13_i_i115928_enable(local_avm_aspace7_enable[0][19]),
      .avm_tmp13_i_i115928_read(local_avm_aspace7_read[0][19]),
      .avm_tmp13_i_i115928_write(local_avm_aspace7_write[0][19]),
      .avm_tmp13_i_i115928_burstcount(local_avm_aspace7_burstcount[0][19]),
      .avm_tmp13_i_i115928_address(local_avm_aspace7_address[0][19]),
      .avm_tmp13_i_i115928_writedata(local_avm_aspace7_writedata[0][19]),
      .avm_tmp13_i_i115928_byteenable(local_avm_aspace7_byteenable[0][19]),
      .avm_tmp13_i_i115928_waitrequest(local_avm_aspace7_waitrequest[0][19]),
      .avm_tmp13_i_i115928_readdata(local_avm_aspace7_readdata[0][19]),
      .avm_tmp13_i_i115928_readdatavalid(local_avm_aspace7_readdatavalid[0][19]),
      .avm_tmp13_i_i115928_writeack(local_avm_aspace7_writeack[0][19]),
      // AVM avm_tmp13_i_i48
      .avm_tmp13_i_i48_enable(local_avm_aspace7_enable[0][20]),
      .avm_tmp13_i_i48_read(local_avm_aspace7_read[0][20]),
      .avm_tmp13_i_i48_write(local_avm_aspace7_write[0][20]),
      .avm_tmp13_i_i48_burstcount(local_avm_aspace7_burstcount[0][20]),
      .avm_tmp13_i_i48_address(local_avm_aspace7_address[0][20]),
      .avm_tmp13_i_i48_writedata(local_avm_aspace7_writedata[0][20]),
      .avm_tmp13_i_i48_byteenable(local_avm_aspace7_byteenable[0][20]),
      .avm_tmp13_i_i48_waitrequest(local_avm_aspace7_waitrequest[0][20]),
      .avm_tmp13_i_i48_readdata(local_avm_aspace7_readdata[0][20]),
      .avm_tmp13_i_i48_readdatavalid(local_avm_aspace7_readdatavalid[0][20]),
      .avm_tmp13_i_i48_writeack(local_avm_aspace7_writeack[0][20]),
      // AVM avm_tmp38_i_i2
      .avm_tmp38_i_i2_enable(local_avm_aspace7_enable[0][21]),
      .avm_tmp38_i_i2_read(local_avm_aspace7_read[0][21]),
      .avm_tmp38_i_i2_write(local_avm_aspace7_write[0][21]),
      .avm_tmp38_i_i2_burstcount(local_avm_aspace7_burstcount[0][21]),
      .avm_tmp38_i_i2_address(local_avm_aspace7_address[0][21]),
      .avm_tmp38_i_i2_writedata(local_avm_aspace7_writedata[0][21]),
      .avm_tmp38_i_i2_byteenable(local_avm_aspace7_byteenable[0][21]),
      .avm_tmp38_i_i2_waitrequest(local_avm_aspace7_waitrequest[0][21]),
      .avm_tmp38_i_i2_readdata(local_avm_aspace7_readdata[0][21]),
      .avm_tmp38_i_i2_readdatavalid(local_avm_aspace7_readdatavalid[0][21]),
      .avm_tmp38_i_i2_writeack(local_avm_aspace7_writeack[0][21]),
      // AVM avm_tmp38_i_i32755
      .avm_tmp38_i_i32755_enable(local_avm_aspace7_enable[0][22]),
      .avm_tmp38_i_i32755_read(local_avm_aspace7_read[0][22]),
      .avm_tmp38_i_i32755_write(local_avm_aspace7_write[0][22]),
      .avm_tmp38_i_i32755_burstcount(local_avm_aspace7_burstcount[0][22]),
      .avm_tmp38_i_i32755_address(local_avm_aspace7_address[0][22]),
      .avm_tmp38_i_i32755_writedata(local_avm_aspace7_writedata[0][22]),
      .avm_tmp38_i_i32755_byteenable(local_avm_aspace7_byteenable[0][22]),
      .avm_tmp38_i_i32755_waitrequest(local_avm_aspace7_waitrequest[0][22]),
      .avm_tmp38_i_i32755_readdata(local_avm_aspace7_readdata[0][22]),
      .avm_tmp38_i_i32755_readdatavalid(local_avm_aspace7_readdatavalid[0][22]),
      .avm_tmp38_i_i32755_writeack(local_avm_aspace7_writeack[0][22]),
      // AVM avm_tmp38_i_i4268
      .avm_tmp38_i_i4268_enable(local_avm_aspace7_enable[0][23]),
      .avm_tmp38_i_i4268_read(local_avm_aspace7_read[0][23]),
      .avm_tmp38_i_i4268_write(local_avm_aspace7_write[0][23]),
      .avm_tmp38_i_i4268_burstcount(local_avm_aspace7_burstcount[0][23]),
      .avm_tmp38_i_i4268_address(local_avm_aspace7_address[0][23]),
      .avm_tmp38_i_i4268_writedata(local_avm_aspace7_writedata[0][23]),
      .avm_tmp38_i_i4268_byteenable(local_avm_aspace7_byteenable[0][23]),
      .avm_tmp38_i_i4268_waitrequest(local_avm_aspace7_waitrequest[0][23]),
      .avm_tmp38_i_i4268_readdata(local_avm_aspace7_readdata[0][23]),
      .avm_tmp38_i_i4268_readdatavalid(local_avm_aspace7_readdatavalid[0][23]),
      .avm_tmp38_i_i4268_writeack(local_avm_aspace7_writeack[0][23]),
      // AVM avm_tmp38_i_i60834
      .avm_tmp38_i_i60834_enable(local_avm_aspace7_enable[0][24]),
      .avm_tmp38_i_i60834_read(local_avm_aspace7_read[0][24]),
      .avm_tmp38_i_i60834_write(local_avm_aspace7_write[0][24]),
      .avm_tmp38_i_i60834_burstcount(local_avm_aspace7_burstcount[0][24]),
      .avm_tmp38_i_i60834_address(local_avm_aspace7_address[0][24]),
      .avm_tmp38_i_i60834_writedata(local_avm_aspace7_writedata[0][24]),
      .avm_tmp38_i_i60834_byteenable(local_avm_aspace7_byteenable[0][24]),
      .avm_tmp38_i_i60834_waitrequest(local_avm_aspace7_waitrequest[0][24]),
      .avm_tmp38_i_i60834_readdata(local_avm_aspace7_readdata[0][24]),
      .avm_tmp38_i_i60834_readdatavalid(local_avm_aspace7_readdatavalid[0][24]),
      .avm_tmp38_i_i60834_writeack(local_avm_aspace7_writeack[0][24]),
      // AVM avm_tmp38_i_i91014
      .avm_tmp38_i_i91014_enable(local_avm_aspace7_enable[0][25]),
      .avm_tmp38_i_i91014_read(local_avm_aspace7_read[0][25]),
      .avm_tmp38_i_i91014_write(local_avm_aspace7_write[0][25]),
      .avm_tmp38_i_i91014_burstcount(local_avm_aspace7_burstcount[0][25]),
      .avm_tmp38_i_i91014_address(local_avm_aspace7_address[0][25]),
      .avm_tmp38_i_i91014_writedata(local_avm_aspace7_writedata[0][25]),
      .avm_tmp38_i_i91014_byteenable(local_avm_aspace7_byteenable[0][25]),
      .avm_tmp38_i_i91014_waitrequest(local_avm_aspace7_waitrequest[0][25]),
      .avm_tmp38_i_i91014_readdata(local_avm_aspace7_readdata[0][25]),
      .avm_tmp38_i_i91014_readdatavalid(local_avm_aspace7_readdatavalid[0][25]),
      .avm_tmp38_i_i91014_writeack(local_avm_aspace7_writeack[0][25]),
      // AVM avm_tmp39_i_i32959
      .avm_tmp39_i_i32959_enable(local_avm_aspace7_enable[0][26]),
      .avm_tmp39_i_i32959_read(local_avm_aspace7_read[0][26]),
      .avm_tmp39_i_i32959_write(local_avm_aspace7_write[0][26]),
      .avm_tmp39_i_i32959_burstcount(local_avm_aspace7_burstcount[0][26]),
      .avm_tmp39_i_i32959_address(local_avm_aspace7_address[0][26]),
      .avm_tmp39_i_i32959_writedata(local_avm_aspace7_writedata[0][26]),
      .avm_tmp39_i_i32959_byteenable(local_avm_aspace7_byteenable[0][26]),
      .avm_tmp39_i_i32959_waitrequest(local_avm_aspace7_waitrequest[0][26]),
      .avm_tmp39_i_i32959_readdata(local_avm_aspace7_readdata[0][26]),
      .avm_tmp39_i_i32959_readdatavalid(local_avm_aspace7_readdatavalid[0][26]),
      .avm_tmp39_i_i32959_writeack(local_avm_aspace7_writeack[0][26]),
      // AVM avm_tmp39_i_i4472
      .avm_tmp39_i_i4472_enable(local_avm_aspace7_enable[0][27]),
      .avm_tmp39_i_i4472_read(local_avm_aspace7_read[0][27]),
      .avm_tmp39_i_i4472_write(local_avm_aspace7_write[0][27]),
      .avm_tmp39_i_i4472_burstcount(local_avm_aspace7_burstcount[0][27]),
      .avm_tmp39_i_i4472_address(local_avm_aspace7_address[0][27]),
      .avm_tmp39_i_i4472_writedata(local_avm_aspace7_writedata[0][27]),
      .avm_tmp39_i_i4472_byteenable(local_avm_aspace7_byteenable[0][27]),
      .avm_tmp39_i_i4472_waitrequest(local_avm_aspace7_waitrequest[0][27]),
      .avm_tmp39_i_i4472_readdata(local_avm_aspace7_readdata[0][27]),
      .avm_tmp39_i_i4472_readdatavalid(local_avm_aspace7_readdatavalid[0][27]),
      .avm_tmp39_i_i4472_writeack(local_avm_aspace7_writeack[0][27]),
      // AVM avm_tmp39_i_i6
      .avm_tmp39_i_i6_enable(local_avm_aspace7_enable[0][28]),
      .avm_tmp39_i_i6_read(local_avm_aspace7_read[0][28]),
      .avm_tmp39_i_i6_write(local_avm_aspace7_write[0][28]),
      .avm_tmp39_i_i6_burstcount(local_avm_aspace7_burstcount[0][28]),
      .avm_tmp39_i_i6_address(local_avm_aspace7_address[0][28]),
      .avm_tmp39_i_i6_writedata(local_avm_aspace7_writedata[0][28]),
      .avm_tmp39_i_i6_byteenable(local_avm_aspace7_byteenable[0][28]),
      .avm_tmp39_i_i6_waitrequest(local_avm_aspace7_waitrequest[0][28]),
      .avm_tmp39_i_i6_readdata(local_avm_aspace7_readdata[0][28]),
      .avm_tmp39_i_i6_readdatavalid(local_avm_aspace7_readdatavalid[0][28]),
      .avm_tmp39_i_i6_writeack(local_avm_aspace7_writeack[0][28]),
      // AVM avm_tmp39_i_i60938
      .avm_tmp39_i_i60938_enable(local_avm_aspace7_enable[0][29]),
      .avm_tmp39_i_i60938_read(local_avm_aspace7_read[0][29]),
      .avm_tmp39_i_i60938_write(local_avm_aspace7_write[0][29]),
      .avm_tmp39_i_i60938_burstcount(local_avm_aspace7_burstcount[0][29]),
      .avm_tmp39_i_i60938_address(local_avm_aspace7_address[0][29]),
      .avm_tmp39_i_i60938_writedata(local_avm_aspace7_writedata[0][29]),
      .avm_tmp39_i_i60938_byteenable(local_avm_aspace7_byteenable[0][29]),
      .avm_tmp39_i_i60938_waitrequest(local_avm_aspace7_waitrequest[0][29]),
      .avm_tmp39_i_i60938_readdata(local_avm_aspace7_readdata[0][29]),
      .avm_tmp39_i_i60938_readdatavalid(local_avm_aspace7_readdatavalid[0][29]),
      .avm_tmp39_i_i60938_writeack(local_avm_aspace7_writeack[0][29]),
      // AVM avm_tmp39_i_i91218
      .avm_tmp39_i_i91218_enable(local_avm_aspace7_enable[0][30]),
      .avm_tmp39_i_i91218_read(local_avm_aspace7_read[0][30]),
      .avm_tmp39_i_i91218_write(local_avm_aspace7_write[0][30]),
      .avm_tmp39_i_i91218_burstcount(local_avm_aspace7_burstcount[0][30]),
      .avm_tmp39_i_i91218_address(local_avm_aspace7_address[0][30]),
      .avm_tmp39_i_i91218_writedata(local_avm_aspace7_writedata[0][30]),
      .avm_tmp39_i_i91218_byteenable(local_avm_aspace7_byteenable[0][30]),
      .avm_tmp39_i_i91218_waitrequest(local_avm_aspace7_waitrequest[0][30]),
      .avm_tmp39_i_i91218_readdata(local_avm_aspace7_readdata[0][30]),
      .avm_tmp39_i_i91218_readdatavalid(local_avm_aspace7_readdatavalid[0][30]),
      .avm_tmp39_i_i91218_writeack(local_avm_aspace7_writeack[0][30]),
      // AVM avm_tmp42_i_i33558
      .avm_tmp42_i_i33558_enable(local_avm_aspace7_enable[0][31]),
      .avm_tmp42_i_i33558_read(local_avm_aspace7_read[0][31]),
      .avm_tmp42_i_i33558_write(local_avm_aspace7_write[0][31]),
      .avm_tmp42_i_i33558_burstcount(local_avm_aspace7_burstcount[0][31]),
      .avm_tmp42_i_i33558_address(local_avm_aspace7_address[0][31]),
      .avm_tmp42_i_i33558_writedata(local_avm_aspace7_writedata[0][31]),
      .avm_tmp42_i_i33558_byteenable(local_avm_aspace7_byteenable[0][31]),
      .avm_tmp42_i_i33558_waitrequest(local_avm_aspace7_waitrequest[0][31]),
      .avm_tmp42_i_i33558_readdata(local_avm_aspace7_readdata[0][31]),
      .avm_tmp42_i_i33558_readdatavalid(local_avm_aspace7_readdatavalid[0][31]),
      .avm_tmp42_i_i33558_writeack(local_avm_aspace7_writeack[0][31]),
      // AVM avm_tmp42_i_i5
      .avm_tmp42_i_i5_enable(local_avm_aspace7_enable[0][32]),
      .avm_tmp42_i_i5_read(local_avm_aspace7_read[0][32]),
      .avm_tmp42_i_i5_write(local_avm_aspace7_write[0][32]),
      .avm_tmp42_i_i5_burstcount(local_avm_aspace7_burstcount[0][32]),
      .avm_tmp42_i_i5_address(local_avm_aspace7_address[0][32]),
      .avm_tmp42_i_i5_writedata(local_avm_aspace7_writedata[0][32]),
      .avm_tmp42_i_i5_byteenable(local_avm_aspace7_byteenable[0][32]),
      .avm_tmp42_i_i5_waitrequest(local_avm_aspace7_waitrequest[0][32]),
      .avm_tmp42_i_i5_readdata(local_avm_aspace7_readdata[0][32]),
      .avm_tmp42_i_i5_readdatavalid(local_avm_aspace7_readdatavalid[0][32]),
      .avm_tmp42_i_i5_writeack(local_avm_aspace7_writeack[0][32]),
      // AVM avm_tmp42_i_i5071
      .avm_tmp42_i_i5071_enable(local_avm_aspace7_enable[0][33]),
      .avm_tmp42_i_i5071_read(local_avm_aspace7_read[0][33]),
      .avm_tmp42_i_i5071_write(local_avm_aspace7_write[0][33]),
      .avm_tmp42_i_i5071_burstcount(local_avm_aspace7_burstcount[0][33]),
      .avm_tmp42_i_i5071_address(local_avm_aspace7_address[0][33]),
      .avm_tmp42_i_i5071_writedata(local_avm_aspace7_writedata[0][33]),
      .avm_tmp42_i_i5071_byteenable(local_avm_aspace7_byteenable[0][33]),
      .avm_tmp42_i_i5071_waitrequest(local_avm_aspace7_waitrequest[0][33]),
      .avm_tmp42_i_i5071_readdata(local_avm_aspace7_readdata[0][33]),
      .avm_tmp42_i_i5071_readdatavalid(local_avm_aspace7_readdatavalid[0][33]),
      .avm_tmp42_i_i5071_writeack(local_avm_aspace7_writeack[0][33]),
      // AVM avm_tmp42_i_i61237
      .avm_tmp42_i_i61237_enable(local_avm_aspace7_enable[0][34]),
      .avm_tmp42_i_i61237_read(local_avm_aspace7_read[0][34]),
      .avm_tmp42_i_i61237_write(local_avm_aspace7_write[0][34]),
      .avm_tmp42_i_i61237_burstcount(local_avm_aspace7_burstcount[0][34]),
      .avm_tmp42_i_i61237_address(local_avm_aspace7_address[0][34]),
      .avm_tmp42_i_i61237_writedata(local_avm_aspace7_writedata[0][34]),
      .avm_tmp42_i_i61237_byteenable(local_avm_aspace7_byteenable[0][34]),
      .avm_tmp42_i_i61237_waitrequest(local_avm_aspace7_waitrequest[0][34]),
      .avm_tmp42_i_i61237_readdata(local_avm_aspace7_readdata[0][34]),
      .avm_tmp42_i_i61237_readdatavalid(local_avm_aspace7_readdatavalid[0][34]),
      .avm_tmp42_i_i61237_writeack(local_avm_aspace7_writeack[0][34]),
      // AVM avm_tmp42_i_i91817
      .avm_tmp42_i_i91817_enable(local_avm_aspace7_enable[0][35]),
      .avm_tmp42_i_i91817_read(local_avm_aspace7_read[0][35]),
      .avm_tmp42_i_i91817_write(local_avm_aspace7_write[0][35]),
      .avm_tmp42_i_i91817_burstcount(local_avm_aspace7_burstcount[0][35]),
      .avm_tmp42_i_i91817_address(local_avm_aspace7_address[0][35]),
      .avm_tmp42_i_i91817_writedata(local_avm_aspace7_writedata[0][35]),
      .avm_tmp42_i_i91817_byteenable(local_avm_aspace7_byteenable[0][35]),
      .avm_tmp42_i_i91817_waitrequest(local_avm_aspace7_waitrequest[0][35]),
      .avm_tmp42_i_i91817_readdata(local_avm_aspace7_readdata[0][35]),
      .avm_tmp42_i_i91817_readdatavalid(local_avm_aspace7_readdatavalid[0][35]),
      .avm_tmp42_i_i91817_writeack(local_avm_aspace7_writeack[0][35]),
      // AVM avm_unnamed_processFPGA420
      .avm_unnamed_processFPGA420_enable(local_avm_aspace7_enable[0][36]),
      .avm_unnamed_processFPGA420_read(local_avm_aspace7_read[0][36]),
      .avm_unnamed_processFPGA420_write(local_avm_aspace7_write[0][36]),
      .avm_unnamed_processFPGA420_burstcount(local_avm_aspace7_burstcount[0][36]),
      .avm_unnamed_processFPGA420_address(local_avm_aspace7_address[0][36]),
      .avm_unnamed_processFPGA420_writedata(local_avm_aspace7_writedata[0][36]),
      .avm_unnamed_processFPGA420_byteenable(local_avm_aspace7_byteenable[0][36]),
      .avm_unnamed_processFPGA420_waitrequest(local_avm_aspace7_waitrequest[0][36]),
      .avm_unnamed_processFPGA420_readdata(local_avm_aspace7_readdata[0][36]),
      .avm_unnamed_processFPGA420_readdatavalid(local_avm_aspace7_readdatavalid[0][36]),
      .avm_unnamed_processFPGA420_writeack(local_avm_aspace7_writeack[0][36]),
      // AVM avm_memdep_11
      .avm_memdep_11_enable(local_avm_aspace8_enable[0][0]),
      .avm_memdep_11_read(local_avm_aspace8_read[0][0]),
      .avm_memdep_11_write(local_avm_aspace8_write[0][0]),
      .avm_memdep_11_burstcount(local_avm_aspace8_burstcount[0][0]),
      .avm_memdep_11_address(local_avm_aspace8_address[0][0]),
      .avm_memdep_11_writedata(local_avm_aspace8_writedata[0][0]),
      .avm_memdep_11_byteenable(local_avm_aspace8_byteenable[0][0]),
      .avm_memdep_11_waitrequest(local_avm_aspace8_waitrequest[0][0]),
      .avm_memdep_11_readdata(local_avm_aspace8_readdata[0][0]),
      .avm_memdep_11_readdatavalid(local_avm_aspace8_readdatavalid[0][0]),
      .avm_memdep_11_writeack(local_avm_aspace8_writeack[0][0]),
      // AVM avm_memdep_18
      .avm_memdep_18_enable(local_avm_aspace8_enable[0][1]),
      .avm_memdep_18_read(local_avm_aspace8_read[0][1]),
      .avm_memdep_18_write(local_avm_aspace8_write[0][1]),
      .avm_memdep_18_burstcount(local_avm_aspace8_burstcount[0][1]),
      .avm_memdep_18_address(local_avm_aspace8_address[0][1]),
      .avm_memdep_18_writedata(local_avm_aspace8_writedata[0][1]),
      .avm_memdep_18_byteenable(local_avm_aspace8_byteenable[0][1]),
      .avm_memdep_18_waitrequest(local_avm_aspace8_waitrequest[0][1]),
      .avm_memdep_18_readdata(local_avm_aspace8_readdata[0][1]),
      .avm_memdep_18_readdatavalid(local_avm_aspace8_readdatavalid[0][1]),
      .avm_memdep_18_writeack(local_avm_aspace8_writeack[0][1]),
      // AVM avm_memdep_28
      .avm_memdep_28_enable(local_avm_aspace8_enable[0][2]),
      .avm_memdep_28_read(local_avm_aspace8_read[0][2]),
      .avm_memdep_28_write(local_avm_aspace8_write[0][2]),
      .avm_memdep_28_burstcount(local_avm_aspace8_burstcount[0][2]),
      .avm_memdep_28_address(local_avm_aspace8_address[0][2]),
      .avm_memdep_28_writedata(local_avm_aspace8_writedata[0][2]),
      .avm_memdep_28_byteenable(local_avm_aspace8_byteenable[0][2]),
      .avm_memdep_28_waitrequest(local_avm_aspace8_waitrequest[0][2]),
      .avm_memdep_28_readdata(local_avm_aspace8_readdata[0][2]),
      .avm_memdep_28_readdatavalid(local_avm_aspace8_readdatavalid[0][2]),
      .avm_memdep_28_writeack(local_avm_aspace8_writeack[0][2]),
      // AVM avm_memdep_41
      .avm_memdep_41_enable(local_avm_aspace8_enable[0][3]),
      .avm_memdep_41_read(local_avm_aspace8_read[0][3]),
      .avm_memdep_41_write(local_avm_aspace8_write[0][3]),
      .avm_memdep_41_burstcount(local_avm_aspace8_burstcount[0][3]),
      .avm_memdep_41_address(local_avm_aspace8_address[0][3]),
      .avm_memdep_41_writedata(local_avm_aspace8_writedata[0][3]),
      .avm_memdep_41_byteenable(local_avm_aspace8_byteenable[0][3]),
      .avm_memdep_41_waitrequest(local_avm_aspace8_waitrequest[0][3]),
      .avm_memdep_41_readdata(local_avm_aspace8_readdata[0][3]),
      .avm_memdep_41_readdatavalid(local_avm_aspace8_readdatavalid[0][3]),
      .avm_memdep_41_writeack(local_avm_aspace8_writeack[0][3]),
      // AVM avm_memdep_48
      .avm_memdep_48_enable(local_avm_aspace8_enable[0][4]),
      .avm_memdep_48_read(local_avm_aspace8_read[0][4]),
      .avm_memdep_48_write(local_avm_aspace8_write[0][4]),
      .avm_memdep_48_burstcount(local_avm_aspace8_burstcount[0][4]),
      .avm_memdep_48_address(local_avm_aspace8_address[0][4]),
      .avm_memdep_48_writedata(local_avm_aspace8_writedata[0][4]),
      .avm_memdep_48_byteenable(local_avm_aspace8_byteenable[0][4]),
      .avm_memdep_48_waitrequest(local_avm_aspace8_waitrequest[0][4]),
      .avm_memdep_48_readdata(local_avm_aspace8_readdata[0][4]),
      .avm_memdep_48_readdatavalid(local_avm_aspace8_readdatavalid[0][4]),
      .avm_memdep_48_writeack(local_avm_aspace8_writeack[0][4]),
      // AVM avm_unnamed_processFPGA425
      .avm_unnamed_processFPGA425_enable(local_avm_aspace8_enable[0][5]),
      .avm_unnamed_processFPGA425_read(local_avm_aspace8_read[0][5]),
      .avm_unnamed_processFPGA425_write(local_avm_aspace8_write[0][5]),
      .avm_unnamed_processFPGA425_burstcount(local_avm_aspace8_burstcount[0][5]),
      .avm_unnamed_processFPGA425_address(local_avm_aspace8_address[0][5]),
      .avm_unnamed_processFPGA425_writedata(local_avm_aspace8_writedata[0][5]),
      .avm_unnamed_processFPGA425_byteenable(local_avm_aspace8_byteenable[0][5]),
      .avm_unnamed_processFPGA425_waitrequest(local_avm_aspace8_waitrequest[0][5]),
      .avm_unnamed_processFPGA425_readdata(local_avm_aspace8_readdata[0][5]),
      .avm_unnamed_processFPGA425_readdatavalid(local_avm_aspace8_readdatavalid[0][5]),
      .avm_unnamed_processFPGA425_writeack(local_avm_aspace8_writeack[0][5]),
      // AVM avm_memdep_14
      .avm_memdep_14_enable(local_avm_aspace9_enable[0][0]),
      .avm_memdep_14_read(local_avm_aspace9_read[0][0]),
      .avm_memdep_14_write(local_avm_aspace9_write[0][0]),
      .avm_memdep_14_burstcount(local_avm_aspace9_burstcount[0][0]),
      .avm_memdep_14_address(local_avm_aspace9_address[0][0]),
      .avm_memdep_14_writedata(local_avm_aspace9_writedata[0][0]),
      .avm_memdep_14_byteenable(local_avm_aspace9_byteenable[0][0]),
      .avm_memdep_14_waitrequest(local_avm_aspace9_waitrequest[0][0]),
      .avm_memdep_14_readdata(local_avm_aspace9_readdata[0][0]),
      .avm_memdep_14_readdatavalid(local_avm_aspace9_readdatavalid[0][0]),
      .avm_memdep_14_writeack(local_avm_aspace9_writeack[0][0]),
      // AVM avm_memdep_24
      .avm_memdep_24_enable(local_avm_aspace9_enable[0][1]),
      .avm_memdep_24_read(local_avm_aspace9_read[0][1]),
      .avm_memdep_24_write(local_avm_aspace9_write[0][1]),
      .avm_memdep_24_burstcount(local_avm_aspace9_burstcount[0][1]),
      .avm_memdep_24_address(local_avm_aspace9_address[0][1]),
      .avm_memdep_24_writedata(local_avm_aspace9_writedata[0][1]),
      .avm_memdep_24_byteenable(local_avm_aspace9_byteenable[0][1]),
      .avm_memdep_24_waitrequest(local_avm_aspace9_waitrequest[0][1]),
      .avm_memdep_24_readdata(local_avm_aspace9_readdata[0][1]),
      .avm_memdep_24_readdatavalid(local_avm_aspace9_readdatavalid[0][1]),
      .avm_memdep_24_writeack(local_avm_aspace9_writeack[0][1]),
      // AVM avm_memdep_37
      .avm_memdep_37_enable(local_avm_aspace9_enable[0][2]),
      .avm_memdep_37_read(local_avm_aspace9_read[0][2]),
      .avm_memdep_37_write(local_avm_aspace9_write[0][2]),
      .avm_memdep_37_burstcount(local_avm_aspace9_burstcount[0][2]),
      .avm_memdep_37_address(local_avm_aspace9_address[0][2]),
      .avm_memdep_37_writedata(local_avm_aspace9_writedata[0][2]),
      .avm_memdep_37_byteenable(local_avm_aspace9_byteenable[0][2]),
      .avm_memdep_37_waitrequest(local_avm_aspace9_waitrequest[0][2]),
      .avm_memdep_37_readdata(local_avm_aspace9_readdata[0][2]),
      .avm_memdep_37_readdatavalid(local_avm_aspace9_readdatavalid[0][2]),
      .avm_memdep_37_writeack(local_avm_aspace9_writeack[0][2]),
      // AVM avm_memdep_46
      .avm_memdep_46_enable(local_avm_aspace9_enable[0][3]),
      .avm_memdep_46_read(local_avm_aspace9_read[0][3]),
      .avm_memdep_46_write(local_avm_aspace9_write[0][3]),
      .avm_memdep_46_burstcount(local_avm_aspace9_burstcount[0][3]),
      .avm_memdep_46_address(local_avm_aspace9_address[0][3]),
      .avm_memdep_46_writedata(local_avm_aspace9_writedata[0][3]),
      .avm_memdep_46_byteenable(local_avm_aspace9_byteenable[0][3]),
      .avm_memdep_46_waitrequest(local_avm_aspace9_waitrequest[0][3]),
      .avm_memdep_46_readdata(local_avm_aspace9_readdata[0][3]),
      .avm_memdep_46_readdatavalid(local_avm_aspace9_readdatavalid[0][3]),
      .avm_memdep_46_writeack(local_avm_aspace9_writeack[0][3]),
      // AVM avm_memdep_7
      .avm_memdep_7_enable(local_avm_aspace9_enable[0][4]),
      .avm_memdep_7_read(local_avm_aspace9_read[0][4]),
      .avm_memdep_7_write(local_avm_aspace9_write[0][4]),
      .avm_memdep_7_burstcount(local_avm_aspace9_burstcount[0][4]),
      .avm_memdep_7_address(local_avm_aspace9_address[0][4]),
      .avm_memdep_7_writedata(local_avm_aspace9_writedata[0][4]),
      .avm_memdep_7_byteenable(local_avm_aspace9_byteenable[0][4]),
      .avm_memdep_7_waitrequest(local_avm_aspace9_waitrequest[0][4]),
      .avm_memdep_7_readdata(local_avm_aspace9_readdata[0][4]),
      .avm_memdep_7_readdatavalid(local_avm_aspace9_readdatavalid[0][4]),
      .avm_memdep_7_writeack(local_avm_aspace9_writeack[0][4]),
      // AVM avm_unnamed_processFPGA126
      .avm_unnamed_processFPGA126_enable(local_avm_aspace9_enable[0][5]),
      .avm_unnamed_processFPGA126_read(local_avm_aspace9_read[0][5]),
      .avm_unnamed_processFPGA126_write(local_avm_aspace9_write[0][5]),
      .avm_unnamed_processFPGA126_burstcount(local_avm_aspace9_burstcount[0][5]),
      .avm_unnamed_processFPGA126_address(local_avm_aspace9_address[0][5]),
      .avm_unnamed_processFPGA126_writedata(local_avm_aspace9_writedata[0][5]),
      .avm_unnamed_processFPGA126_byteenable(local_avm_aspace9_byteenable[0][5]),
      .avm_unnamed_processFPGA126_waitrequest(local_avm_aspace9_waitrequest[0][5]),
      .avm_unnamed_processFPGA126_readdata(local_avm_aspace9_readdata[0][5]),
      .avm_unnamed_processFPGA126_readdatavalid(local_avm_aspace9_readdatavalid[0][5]),
      .avm_unnamed_processFPGA126_writeack(local_avm_aspace9_writeack[0][5]),
      // AVM avm_unnamed_processFPGA230
      .avm_unnamed_processFPGA230_enable(local_avm_aspace9_enable[0][6]),
      .avm_unnamed_processFPGA230_read(local_avm_aspace9_read[0][6]),
      .avm_unnamed_processFPGA230_write(local_avm_aspace9_write[0][6]),
      .avm_unnamed_processFPGA230_burstcount(local_avm_aspace9_burstcount[0][6]),
      .avm_unnamed_processFPGA230_address(local_avm_aspace9_address[0][6]),
      .avm_unnamed_processFPGA230_writedata(local_avm_aspace9_writedata[0][6]),
      .avm_unnamed_processFPGA230_byteenable(local_avm_aspace9_byteenable[0][6]),
      .avm_unnamed_processFPGA230_waitrequest(local_avm_aspace9_waitrequest[0][6]),
      .avm_unnamed_processFPGA230_readdata(local_avm_aspace9_readdata[0][6]),
      .avm_unnamed_processFPGA230_readdatavalid(local_avm_aspace9_readdatavalid[0][6]),
      .avm_unnamed_processFPGA230_writeack(local_avm_aspace9_writeack[0][6]),
      // AVM avm_unnamed_processFPGA338
      .avm_unnamed_processFPGA338_enable(local_avm_aspace9_enable[0][7]),
      .avm_unnamed_processFPGA338_read(local_avm_aspace9_read[0][7]),
      .avm_unnamed_processFPGA338_write(local_avm_aspace9_write[0][7]),
      .avm_unnamed_processFPGA338_burstcount(local_avm_aspace9_burstcount[0][7]),
      .avm_unnamed_processFPGA338_address(local_avm_aspace9_address[0][7]),
      .avm_unnamed_processFPGA338_writedata(local_avm_aspace9_writedata[0][7]),
      .avm_unnamed_processFPGA338_byteenable(local_avm_aspace9_byteenable[0][7]),
      .avm_unnamed_processFPGA338_waitrequest(local_avm_aspace9_waitrequest[0][7]),
      .avm_unnamed_processFPGA338_readdata(local_avm_aspace9_readdata[0][7]),
      .avm_unnamed_processFPGA338_readdatavalid(local_avm_aspace9_readdatavalid[0][7]),
      .avm_unnamed_processFPGA338_writeack(local_avm_aspace9_writeack[0][7]),
      // AVM avm_unnamed_processFPGA400
      .avm_unnamed_processFPGA400_enable(local_avm_aspace9_enable[0][8]),
      .avm_unnamed_processFPGA400_read(local_avm_aspace9_read[0][8]),
      .avm_unnamed_processFPGA400_write(local_avm_aspace9_write[0][8]),
      .avm_unnamed_processFPGA400_burstcount(local_avm_aspace9_burstcount[0][8]),
      .avm_unnamed_processFPGA400_address(local_avm_aspace9_address[0][8]),
      .avm_unnamed_processFPGA400_writedata(local_avm_aspace9_writedata[0][8]),
      .avm_unnamed_processFPGA400_byteenable(local_avm_aspace9_byteenable[0][8]),
      .avm_unnamed_processFPGA400_waitrequest(local_avm_aspace9_waitrequest[0][8]),
      .avm_unnamed_processFPGA400_readdata(local_avm_aspace9_readdata[0][8]),
      .avm_unnamed_processFPGA400_readdatavalid(local_avm_aspace9_readdatavalid[0][8]),
      .avm_unnamed_processFPGA400_writeack(local_avm_aspace9_writeack[0][8]),
      // AVM avm_unnamed_processFPGA70
      .avm_unnamed_processFPGA70_enable(local_avm_aspace9_enable[0][9]),
      .avm_unnamed_processFPGA70_read(local_avm_aspace9_read[0][9]),
      .avm_unnamed_processFPGA70_write(local_avm_aspace9_write[0][9]),
      .avm_unnamed_processFPGA70_burstcount(local_avm_aspace9_burstcount[0][9]),
      .avm_unnamed_processFPGA70_address(local_avm_aspace9_address[0][9]),
      .avm_unnamed_processFPGA70_writedata(local_avm_aspace9_writedata[0][9]),
      .avm_unnamed_processFPGA70_byteenable(local_avm_aspace9_byteenable[0][9]),
      .avm_unnamed_processFPGA70_waitrequest(local_avm_aspace9_waitrequest[0][9]),
      .avm_unnamed_processFPGA70_readdata(local_avm_aspace9_readdata[0][9]),
      .avm_unnamed_processFPGA70_readdatavalid(local_avm_aspace9_readdatavalid[0][9]),
      .avm_unnamed_processFPGA70_writeack(local_avm_aspace9_writeack[0][9]),
      // AVM avm_memdep_13
      .avm_memdep_13_enable(local_avm_aspace10_enable[0][0]),
      .avm_memdep_13_read(local_avm_aspace10_read[0][0]),
      .avm_memdep_13_write(local_avm_aspace10_write[0][0]),
      .avm_memdep_13_burstcount(local_avm_aspace10_burstcount[0][0]),
      .avm_memdep_13_address(local_avm_aspace10_address[0][0]),
      .avm_memdep_13_writedata(local_avm_aspace10_writedata[0][0]),
      .avm_memdep_13_byteenable(local_avm_aspace10_byteenable[0][0]),
      .avm_memdep_13_waitrequest(local_avm_aspace10_waitrequest[0][0]),
      .avm_memdep_13_readdata(local_avm_aspace10_readdata[0][0]),
      .avm_memdep_13_readdatavalid(local_avm_aspace10_readdatavalid[0][0]),
      .avm_memdep_13_writeack(local_avm_aspace10_writeack[0][0]),
      // AVM avm_memdep_29
      .avm_memdep_29_enable(local_avm_aspace10_enable[0][1]),
      .avm_memdep_29_read(local_avm_aspace10_read[0][1]),
      .avm_memdep_29_write(local_avm_aspace10_write[0][1]),
      .avm_memdep_29_burstcount(local_avm_aspace10_burstcount[0][1]),
      .avm_memdep_29_address(local_avm_aspace10_address[0][1]),
      .avm_memdep_29_writedata(local_avm_aspace10_writedata[0][1]),
      .avm_memdep_29_byteenable(local_avm_aspace10_byteenable[0][1]),
      .avm_memdep_29_waitrequest(local_avm_aspace10_waitrequest[0][1]),
      .avm_memdep_29_readdata(local_avm_aspace10_readdata[0][1]),
      .avm_memdep_29_readdatavalid(local_avm_aspace10_readdatavalid[0][1]),
      .avm_memdep_29_writeack(local_avm_aspace10_writeack[0][1]),
      // AVM avm_memdep_36
      .avm_memdep_36_enable(local_avm_aspace10_enable[0][2]),
      .avm_memdep_36_read(local_avm_aspace10_read[0][2]),
      .avm_memdep_36_write(local_avm_aspace10_write[0][2]),
      .avm_memdep_36_burstcount(local_avm_aspace10_burstcount[0][2]),
      .avm_memdep_36_address(local_avm_aspace10_address[0][2]),
      .avm_memdep_36_writedata(local_avm_aspace10_writedata[0][2]),
      .avm_memdep_36_byteenable(local_avm_aspace10_byteenable[0][2]),
      .avm_memdep_36_waitrequest(local_avm_aspace10_waitrequest[0][2]),
      .avm_memdep_36_readdata(local_avm_aspace10_readdata[0][2]),
      .avm_memdep_36_readdatavalid(local_avm_aspace10_readdatavalid[0][2]),
      .avm_memdep_36_writeack(local_avm_aspace10_writeack[0][2]),
      // AVM avm_memdep_45
      .avm_memdep_45_enable(local_avm_aspace10_enable[0][3]),
      .avm_memdep_45_read(local_avm_aspace10_read[0][3]),
      .avm_memdep_45_write(local_avm_aspace10_write[0][3]),
      .avm_memdep_45_burstcount(local_avm_aspace10_burstcount[0][3]),
      .avm_memdep_45_address(local_avm_aspace10_address[0][3]),
      .avm_memdep_45_writedata(local_avm_aspace10_writedata[0][3]),
      .avm_memdep_45_byteenable(local_avm_aspace10_byteenable[0][3]),
      .avm_memdep_45_waitrequest(local_avm_aspace10_waitrequest[0][3]),
      .avm_memdep_45_readdata(local_avm_aspace10_readdata[0][3]),
      .avm_memdep_45_readdatavalid(local_avm_aspace10_readdatavalid[0][3]),
      .avm_memdep_45_writeack(local_avm_aspace10_writeack[0][3]),
      // AVM avm_unnamed_processFPGA150
      .avm_unnamed_processFPGA150_enable(local_avm_aspace10_enable[0][4]),
      .avm_unnamed_processFPGA150_read(local_avm_aspace10_read[0][4]),
      .avm_unnamed_processFPGA150_write(local_avm_aspace10_write[0][4]),
      .avm_unnamed_processFPGA150_burstcount(local_avm_aspace10_burstcount[0][4]),
      .avm_unnamed_processFPGA150_address(local_avm_aspace10_address[0][4]),
      .avm_unnamed_processFPGA150_writedata(local_avm_aspace10_writedata[0][4]),
      .avm_unnamed_processFPGA150_byteenable(local_avm_aspace10_byteenable[0][4]),
      .avm_unnamed_processFPGA150_waitrequest(local_avm_aspace10_waitrequest[0][4]),
      .avm_unnamed_processFPGA150_readdata(local_avm_aspace10_readdata[0][4]),
      .avm_unnamed_processFPGA150_readdatavalid(local_avm_aspace10_readdatavalid[0][4]),
      .avm_unnamed_processFPGA150_writeack(local_avm_aspace10_writeack[0][4]),
      // AVM avm_unnamed_processFPGA157
      .avm_unnamed_processFPGA157_enable(local_avm_aspace10_enable[0][5]),
      .avm_unnamed_processFPGA157_read(local_avm_aspace10_read[0][5]),
      .avm_unnamed_processFPGA157_write(local_avm_aspace10_write[0][5]),
      .avm_unnamed_processFPGA157_burstcount(local_avm_aspace10_burstcount[0][5]),
      .avm_unnamed_processFPGA157_address(local_avm_aspace10_address[0][5]),
      .avm_unnamed_processFPGA157_writedata(local_avm_aspace10_writedata[0][5]),
      .avm_unnamed_processFPGA157_byteenable(local_avm_aspace10_byteenable[0][5]),
      .avm_unnamed_processFPGA157_waitrequest(local_avm_aspace10_waitrequest[0][5]),
      .avm_unnamed_processFPGA157_readdata(local_avm_aspace10_readdata[0][5]),
      .avm_unnamed_processFPGA157_readdatavalid(local_avm_aspace10_readdatavalid[0][5]),
      .avm_unnamed_processFPGA157_writeack(local_avm_aspace10_writeack[0][5]),
      // AVM avm_unnamed_processFPGA251
      .avm_unnamed_processFPGA251_enable(local_avm_aspace10_enable[0][6]),
      .avm_unnamed_processFPGA251_read(local_avm_aspace10_read[0][6]),
      .avm_unnamed_processFPGA251_write(local_avm_aspace10_write[0][6]),
      .avm_unnamed_processFPGA251_burstcount(local_avm_aspace10_burstcount[0][6]),
      .avm_unnamed_processFPGA251_address(local_avm_aspace10_address[0][6]),
      .avm_unnamed_processFPGA251_writedata(local_avm_aspace10_writedata[0][6]),
      .avm_unnamed_processFPGA251_byteenable(local_avm_aspace10_byteenable[0][6]),
      .avm_unnamed_processFPGA251_waitrequest(local_avm_aspace10_waitrequest[0][6]),
      .avm_unnamed_processFPGA251_readdata(local_avm_aspace10_readdata[0][6]),
      .avm_unnamed_processFPGA251_readdatavalid(local_avm_aspace10_readdatavalid[0][6]),
      .avm_unnamed_processFPGA251_writeack(local_avm_aspace10_writeack[0][6]),
      // AVM avm_unnamed_processFPGA258
      .avm_unnamed_processFPGA258_enable(local_avm_aspace10_enable[0][7]),
      .avm_unnamed_processFPGA258_read(local_avm_aspace10_read[0][7]),
      .avm_unnamed_processFPGA258_write(local_avm_aspace10_write[0][7]),
      .avm_unnamed_processFPGA258_burstcount(local_avm_aspace10_burstcount[0][7]),
      .avm_unnamed_processFPGA258_address(local_avm_aspace10_address[0][7]),
      .avm_unnamed_processFPGA258_writedata(local_avm_aspace10_writedata[0][7]),
      .avm_unnamed_processFPGA258_byteenable(local_avm_aspace10_byteenable[0][7]),
      .avm_unnamed_processFPGA258_waitrequest(local_avm_aspace10_waitrequest[0][7]),
      .avm_unnamed_processFPGA258_readdata(local_avm_aspace10_readdata[0][7]),
      .avm_unnamed_processFPGA258_readdatavalid(local_avm_aspace10_readdatavalid[0][7]),
      .avm_unnamed_processFPGA258_writeack(local_avm_aspace10_writeack[0][7]),
      // AVM avm_unnamed_processFPGA300
      .avm_unnamed_processFPGA300_enable(local_avm_aspace10_enable[0][8]),
      .avm_unnamed_processFPGA300_read(local_avm_aspace10_read[0][8]),
      .avm_unnamed_processFPGA300_write(local_avm_aspace10_write[0][8]),
      .avm_unnamed_processFPGA300_burstcount(local_avm_aspace10_burstcount[0][8]),
      .avm_unnamed_processFPGA300_address(local_avm_aspace10_address[0][8]),
      .avm_unnamed_processFPGA300_writedata(local_avm_aspace10_writedata[0][8]),
      .avm_unnamed_processFPGA300_byteenable(local_avm_aspace10_byteenable[0][8]),
      .avm_unnamed_processFPGA300_waitrequest(local_avm_aspace10_waitrequest[0][8]),
      .avm_unnamed_processFPGA300_readdata(local_avm_aspace10_readdata[0][8]),
      .avm_unnamed_processFPGA300_readdatavalid(local_avm_aspace10_readdatavalid[0][8]),
      .avm_unnamed_processFPGA300_writeack(local_avm_aspace10_writeack[0][8]),
      // AVM avm_unnamed_processFPGA357
      .avm_unnamed_processFPGA357_enable(local_avm_aspace10_enable[0][9]),
      .avm_unnamed_processFPGA357_read(local_avm_aspace10_read[0][9]),
      .avm_unnamed_processFPGA357_write(local_avm_aspace10_write[0][9]),
      .avm_unnamed_processFPGA357_burstcount(local_avm_aspace10_burstcount[0][9]),
      .avm_unnamed_processFPGA357_address(local_avm_aspace10_address[0][9]),
      .avm_unnamed_processFPGA357_writedata(local_avm_aspace10_writedata[0][9]),
      .avm_unnamed_processFPGA357_byteenable(local_avm_aspace10_byteenable[0][9]),
      .avm_unnamed_processFPGA357_waitrequest(local_avm_aspace10_waitrequest[0][9]),
      .avm_unnamed_processFPGA357_readdata(local_avm_aspace10_readdata[0][9]),
      .avm_unnamed_processFPGA357_readdatavalid(local_avm_aspace10_readdatavalid[0][9]),
      .avm_unnamed_processFPGA357_writeack(local_avm_aspace10_writeack[0][9]),
      // AVM avm_memcoalesce_null_load_0
      .avm_memcoalesce_null_load_0_enable(local_avm_aspace11_enable[0][0]),
      .avm_memcoalesce_null_load_0_read(local_avm_aspace11_read[0][0]),
      .avm_memcoalesce_null_load_0_write(local_avm_aspace11_write[0][0]),
      .avm_memcoalesce_null_load_0_burstcount(local_avm_aspace11_burstcount[0][0]),
      .avm_memcoalesce_null_load_0_address(local_avm_aspace11_address[0][0]),
      .avm_memcoalesce_null_load_0_writedata(local_avm_aspace11_writedata[0][0]),
      .avm_memcoalesce_null_load_0_byteenable(local_avm_aspace11_byteenable[0][0]),
      .avm_memcoalesce_null_load_0_waitrequest(local_avm_aspace11_waitrequest[0][0]),
      .avm_memcoalesce_null_load_0_readdata(local_avm_aspace11_readdata[0][0]),
      .avm_memcoalesce_null_load_0_readdatavalid(local_avm_aspace11_readdatavalid[0][0]),
      .avm_memcoalesce_null_load_0_writeack(local_avm_aspace11_writeack[0][0]),
      // AVM avm_memcoalesce_null_load_0104
      .avm_memcoalesce_null_load_0104_enable(local_avm_aspace11_enable[0][1]),
      .avm_memcoalesce_null_load_0104_read(local_avm_aspace11_read[0][1]),
      .avm_memcoalesce_null_load_0104_write(local_avm_aspace11_write[0][1]),
      .avm_memcoalesce_null_load_0104_burstcount(local_avm_aspace11_burstcount[0][1]),
      .avm_memcoalesce_null_load_0104_address(local_avm_aspace11_address[0][1]),
      .avm_memcoalesce_null_load_0104_writedata(local_avm_aspace11_writedata[0][1]),
      .avm_memcoalesce_null_load_0104_byteenable(local_avm_aspace11_byteenable[0][1]),
      .avm_memcoalesce_null_load_0104_waitrequest(local_avm_aspace11_waitrequest[0][1]),
      .avm_memcoalesce_null_load_0104_readdata(local_avm_aspace11_readdata[0][1]),
      .avm_memcoalesce_null_load_0104_readdatavalid(local_avm_aspace11_readdatavalid[0][1]),
      .avm_memcoalesce_null_load_0104_writeack(local_avm_aspace11_writeack[0][1]),
      // AVM avm_memdep_20
      .avm_memdep_20_enable(local_avm_aspace11_enable[0][2]),
      .avm_memdep_20_read(local_avm_aspace11_read[0][2]),
      .avm_memdep_20_write(local_avm_aspace11_write[0][2]),
      .avm_memdep_20_burstcount(local_avm_aspace11_burstcount[0][2]),
      .avm_memdep_20_address(local_avm_aspace11_address[0][2]),
      .avm_memdep_20_writedata(local_avm_aspace11_writedata[0][2]),
      .avm_memdep_20_byteenable(local_avm_aspace11_byteenable[0][2]),
      .avm_memdep_20_waitrequest(local_avm_aspace11_waitrequest[0][2]),
      .avm_memdep_20_readdata(local_avm_aspace11_readdata[0][2]),
      .avm_memdep_20_readdatavalid(local_avm_aspace11_readdatavalid[0][2]),
      .avm_memdep_20_writeack(local_avm_aspace11_writeack[0][2]),
      // AVM avm_memdep_31
      .avm_memdep_31_enable(local_avm_aspace11_enable[0][3]),
      .avm_memdep_31_read(local_avm_aspace11_read[0][3]),
      .avm_memdep_31_write(local_avm_aspace11_write[0][3]),
      .avm_memdep_31_burstcount(local_avm_aspace11_burstcount[0][3]),
      .avm_memdep_31_address(local_avm_aspace11_address[0][3]),
      .avm_memdep_31_writedata(local_avm_aspace11_writedata[0][3]),
      .avm_memdep_31_byteenable(local_avm_aspace11_byteenable[0][3]),
      .avm_memdep_31_waitrequest(local_avm_aspace11_waitrequest[0][3]),
      .avm_memdep_31_readdata(local_avm_aspace11_readdata[0][3]),
      .avm_memdep_31_readdatavalid(local_avm_aspace11_readdatavalid[0][3]),
      .avm_memdep_31_writeack(local_avm_aspace11_writeack[0][3]),
      // AVM avm_memdep_42
      .avm_memdep_42_enable(local_avm_aspace12_enable[0][0]),
      .avm_memdep_42_read(local_avm_aspace12_read[0][0]),
      .avm_memdep_42_write(local_avm_aspace12_write[0][0]),
      .avm_memdep_42_burstcount(local_avm_aspace12_burstcount[0][0]),
      .avm_memdep_42_address(local_avm_aspace12_address[0][0]),
      .avm_memdep_42_writedata(local_avm_aspace12_writedata[0][0]),
      .avm_memdep_42_byteenable(local_avm_aspace12_byteenable[0][0]),
      .avm_memdep_42_waitrequest(local_avm_aspace12_waitrequest[0][0]),
      .avm_memdep_42_readdata(local_avm_aspace12_readdata[0][0]),
      .avm_memdep_42_readdatavalid(local_avm_aspace12_readdatavalid[0][0]),
      .avm_memdep_42_writeack(local_avm_aspace12_writeack[0][0]),
      // AVM avm_unnamed_processFPGA354
      .avm_unnamed_processFPGA354_enable(local_avm_aspace12_enable[0][1]),
      .avm_unnamed_processFPGA354_read(local_avm_aspace12_read[0][1]),
      .avm_unnamed_processFPGA354_write(local_avm_aspace12_write[0][1]),
      .avm_unnamed_processFPGA354_burstcount(local_avm_aspace12_burstcount[0][1]),
      .avm_unnamed_processFPGA354_address(local_avm_aspace12_address[0][1]),
      .avm_unnamed_processFPGA354_writedata(local_avm_aspace12_writedata[0][1]),
      .avm_unnamed_processFPGA354_byteenable(local_avm_aspace12_byteenable[0][1]),
      .avm_unnamed_processFPGA354_waitrequest(local_avm_aspace12_waitrequest[0][1]),
      .avm_unnamed_processFPGA354_readdata(local_avm_aspace12_readdata[0][1]),
      .avm_unnamed_processFPGA354_readdatavalid(local_avm_aspace12_readdatavalid[0][1]),
      .avm_unnamed_processFPGA354_writeack(local_avm_aspace12_writeack[0][1]),
      // AVM avm_memdep_44
      .avm_memdep_44_enable(local_avm_aspace13_enable[0][0]),
      .avm_memdep_44_read(local_avm_aspace13_read[0][0]),
      .avm_memdep_44_write(local_avm_aspace13_write[0][0]),
      .avm_memdep_44_burstcount(local_avm_aspace13_burstcount[0][0]),
      .avm_memdep_44_address(local_avm_aspace13_address[0][0]),
      .avm_memdep_44_writedata(local_avm_aspace13_writedata[0][0]),
      .avm_memdep_44_byteenable(local_avm_aspace13_byteenable[0][0]),
      .avm_memdep_44_waitrequest(local_avm_aspace13_waitrequest[0][0]),
      .avm_memdep_44_readdata(local_avm_aspace13_readdata[0][0]),
      .avm_memdep_44_readdatavalid(local_avm_aspace13_readdatavalid[0][0]),
      .avm_memdep_44_writeack(local_avm_aspace13_writeack[0][0]),
      // AVM avm_unnamed_processFPGA365
      .avm_unnamed_processFPGA365_enable(local_avm_aspace13_enable[0][1]),
      .avm_unnamed_processFPGA365_read(local_avm_aspace13_read[0][1]),
      .avm_unnamed_processFPGA365_write(local_avm_aspace13_write[0][1]),
      .avm_unnamed_processFPGA365_burstcount(local_avm_aspace13_burstcount[0][1]),
      .avm_unnamed_processFPGA365_address(local_avm_aspace13_address[0][1]),
      .avm_unnamed_processFPGA365_writedata(local_avm_aspace13_writedata[0][1]),
      .avm_unnamed_processFPGA365_byteenable(local_avm_aspace13_byteenable[0][1]),
      .avm_unnamed_processFPGA365_waitrequest(local_avm_aspace13_waitrequest[0][1]),
      .avm_unnamed_processFPGA365_readdata(local_avm_aspace13_readdata[0][1]),
      .avm_unnamed_processFPGA365_readdatavalid(local_avm_aspace13_readdatavalid[0][1]),
      .avm_unnamed_processFPGA365_writeack(local_avm_aspace13_writeack[0][1])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace5
      logic local_icm_arb_request [1][6];
      logic local_icm_arb_enable [1][6];
      logic local_icm_arb_read [1][6];
      logic local_icm_arb_write [1][6];
      logic local_icm_arb_burstcount [1][6];
      logic [12:0] local_icm_arb_address [1][6];
      logic [15:0] local_icm_arb_writedata [1][6];
      logic [1:0] local_icm_arb_byteenable [1][6];
      logic local_icm_arb_stall [1][6];
      logic local_icm_wrp_ack [1][6];
      logic local_icm_rrp_datavalid [1][6];
      logic [15:0] local_icm_rrp_data [1][6];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(16),
               .WRITEDATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(2)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace5_enable[__i][__j]),
               .avm_read(local_avm_aspace5_read[__i][__j]),
               .avm_write(local_avm_aspace5_write[__i][__j]),
               .avm_burstcount(local_avm_aspace5_burstcount[__i][__j]),
               .avm_address(local_avm_aspace5_address[__i][__j]),
               .avm_writedata(local_avm_aspace5_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace5_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace5_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace5_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace5_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace5_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [12:0] port_address [1:2];
            logic [15:0] port_writedata [1:2];
            logic [1:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [15:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(8192),
               .WIDTH(16),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [12:0] b_arb_address [1];
            logic [15:0] b_arb_writedata [1];
            logic [1:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [15:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(13),
               .BYTEENA_W(2),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [12:0] icm_in_arb_address [3];
            logic [15:0] icm_in_arb_writedata [3];
            logic [1:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [15:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [12:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of FPGANetSt_system_interconnect_0
            FPGANetSt_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [12:0] icm_in_arb_address [3];
            logic [15:0] icm_in_arb_writedata [3];
            logic [1:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [15:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [12:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[5].b_arb_read[0];
            assign icm_in_arb_write[2] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of FPGANetSt_system_interconnect_1
            FPGANetSt_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace6
      logic local_icm_arb_request [1][87];
      logic local_icm_arb_enable [1][87];
      logic local_icm_arb_read [1][87];
      logic local_icm_arb_write [1][87];
      logic local_icm_arb_burstcount [1][87];
      logic [11:0] local_icm_arb_address [1][87];
      logic [31:0] local_icm_arb_writedata [1][87];
      logic [3:0] local_icm_arb_byteenable [1][87];
      logic local_icm_arb_stall [1][87];
      logic local_icm_wrp_ack [1][87];
      logic local_icm_rrp_datavalid [1][87];
      logic [31:0] local_icm_rrp_data [1][87];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 87; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace6_enable[__j][__k]),
               .avm_read(local_avm_aspace6_read[__j][__k]),
               .avm_write(local_avm_aspace6_write[__j][__k]),
               .avm_burstcount(local_avm_aspace6_burstcount[__j][__k]),
               .avm_address(local_avm_aspace6_address[__j][__k]),
               .avm_writedata(local_avm_aspace6_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace6_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace6_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace6_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace6_readdatavalid[__j][__k]),
               .avm_writeack(local_avm_aspace6_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:8];
            logic port_read [1:8];
            logic port_write [1:8];
            logic [11:0] port_address [1:8];
            logic [31:0] port_writedata [1:8];
            logic [3:0] port_byteenable [1:8];
            logic port_waitrequest [1:8];
            logic [31:0] port_readdata [1:8];
            logic port_readdatavalid [1:8];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

            // INST mem1 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem1
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[5]),
               .avs_port1_read(port_read[5]),
               .avs_port1_write(port_write[5]),
               .avs_port1_address(port_address[5]),
               .avs_port1_writedata(port_writedata[5]),
               .avs_port1_byteenable(port_byteenable[5]),
               .avs_port1_waitrequest(port_waitrequest[5]),
               .avs_port1_readdata(port_readdata[5]),
               .avs_port1_readdatavalid(port_readdatavalid[5]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[6]),
               .avs_port2_read(port_read[6]),
               .avs_port2_write(port_write[6]),
               .avs_port2_address(port_address[6]),
               .avs_port2_writedata(port_writedata[6]),
               .avs_port2_byteenable(port_byteenable[6]),
               .avs_port2_waitrequest(port_waitrequest[6]),
               .avs_port2_readdata(port_readdata[6]),
               .avs_port2_readdatavalid(port_readdatavalid[6]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[7]),
               .avs_port3_read(port_read[7]),
               .avs_port3_write(port_write[7]),
               .avs_port3_address(port_address[7]),
               .avs_port3_writedata(port_writedata[7]),
               .avs_port3_byteenable(port_byteenable[7]),
               .avs_port3_waitrequest(port_waitrequest[7]),
               .avs_port3_readdata(port_readdata[7]),
               .avs_port3_readdatavalid(port_readdatavalid[7]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[8]),
               .avs_port4_read(port_read[8]),
               .avs_port4_write(port_write[8]),
               .avs_port4_address(port_address[8]),
               .avs_port4_writedata(port_writedata[8]),
               .avs_port4_byteenable(port_byteenable[8]),
               .avs_port4_waitrequest(port_waitrequest[8]),
               .avs_port4_readdata(port_readdata[8]),
               .avs_port4_readdatavalid(port_readdatavalid[8])
            );

         end

         for( __k = 0; __k < 87; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [14];
            logic icm_in_arb_enable [14];
            logic icm_in_arb_read [14];
            logic icm_in_arb_write [14];
            logic icm_in_arb_burstcount [14];
            logic [11:0] icm_in_arb_address [14];
            logic [31:0] icm_in_arb_writedata [14];
            logic [3:0] icm_in_arb_byteenable [14];
            logic icm_in_arb_stall [14];
            logic icm_in_wrp_ack [14];
            logic icm_in_rrp_datavalid [14];
            logic [31:0] icm_in_rrp_data [14];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[16].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[16].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[16].b_arb_read[0];
            assign icm_in_arb_write[0] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[16].b_arb_byteenable[0];
            assign router[16].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[16].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[16].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[16].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[17].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[17].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[17].b_arb_read[0];
            assign icm_in_arb_write[1] = router[17].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[17].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[17].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[17].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[17].b_arb_byteenable[0];
            assign router[17].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[17].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[17].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[17].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[19].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[19].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[19].b_arb_read[0];
            assign icm_in_arb_write[2] = router[19].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[19].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[19].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[19].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[19].b_arb_byteenable[0];
            assign router[19].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[19].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[19].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[19].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[20].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[20].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[20].b_arb_read[0];
            assign icm_in_arb_write[3] = router[20].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[20].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[20].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[20].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[20].b_arb_byteenable[0];
            assign router[20].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[20].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[20].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[20].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[22].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[22].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[22].b_arb_read[0];
            assign icm_in_arb_write[4] = router[22].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[22].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[22].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[22].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[22].b_arb_byteenable[0];
            assign router[22].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[22].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[22].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[22].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[24].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[24].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[24].b_arb_read[0];
            assign icm_in_arb_write[5] = router[24].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[24].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[24].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[24].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[24].b_arb_byteenable[0];
            assign router[24].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[24].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[24].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[24].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[26].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[26].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[26].b_arb_read[0];
            assign icm_in_arb_write[6] = router[26].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[26].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[26].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[26].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[26].b_arb_byteenable[0];
            assign router[26].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[26].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[26].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[26].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[29].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[29].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[29].b_arb_read[0];
            assign icm_in_arb_write[7] = router[29].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[29].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[29].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[29].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[29].b_arb_byteenable[0];
            assign router[29].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[29].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[29].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[29].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[30].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[30].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[30].b_arb_read[0];
            assign icm_in_arb_write[8] = router[30].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[30].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[30].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[30].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[30].b_arb_byteenable[0];
            assign router[30].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[30].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[30].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[30].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[32].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[32].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[32].b_arb_read[0];
            assign icm_in_arb_write[9] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[32].b_arb_byteenable[0];
            assign router[32].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[32].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[32].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[32].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[34].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[34].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[34].b_arb_read[0];
            assign icm_in_arb_write[10] = router[34].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[34].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[34].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[34].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[34].b_arb_byteenable[0];
            assign router[34].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[34].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[34].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[34].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[35].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[35].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[35].b_arb_read[0];
            assign icm_in_arb_write[11] = router[35].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[35].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[35].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[35].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[35].b_arb_byteenable[0];
            assign router[35].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[35].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[35].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[35].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[36].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[36].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[36].b_arb_read[0];
            assign icm_in_arb_write[12] = router[36].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[36].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[36].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[36].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[36].b_arb_byteenable[0];
            assign router[36].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[36].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[36].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[36].b_rrp_data[0] = icm_in_rrp_data[12];
            assign icm_in_arb_request[13] = router[38].b_arb_request[0];
            assign icm_in_arb_enable[13] = router[38].b_arb_enable[0];
            assign icm_in_arb_read[13] = router[38].b_arb_read[0];
            assign icm_in_arb_write[13] = router[38].b_arb_write[0];
            assign icm_in_arb_burstcount[13] = router[38].b_arb_burstcount[0];
            assign icm_in_arb_address[13] = router[38].b_arb_address[0];
            assign icm_in_arb_writedata[13] = router[38].b_arb_writedata[0];
            assign icm_in_arb_byteenable[13] = router[38].b_arb_byteenable[0];
            assign router[38].b_arb_stall[0] = icm_in_arb_stall[13];
            assign router[38].b_wrp_ack[0] = icm_in_wrp_ack[13];
            assign router[38].b_rrp_datavalid[0] = icm_in_rrp_datavalid[13];
            assign router[38].b_rrp_data[0] = icm_in_rrp_data[13];
            // INST data_ic of FPGANetSt_system_interconnect_2
            FPGANetSt_system_interconnect_2 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [13];
            logic icm_in_arb_enable [13];
            logic icm_in_arb_read [13];
            logic icm_in_arb_write [13];
            logic icm_in_arb_burstcount [13];
            logic [11:0] icm_in_arb_address [13];
            logic [31:0] icm_in_arb_writedata [13];
            logic [3:0] icm_in_arb_byteenable [13];
            logic icm_in_arb_stall [13];
            logic icm_in_wrp_ack [13];
            logic icm_in_rrp_datavalid [13];
            logic [31:0] icm_in_rrp_data [13];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[9].b_arb_read[0];
            assign icm_in_arb_write[2] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[18].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[18].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[18].b_arb_read[0];
            assign icm_in_arb_write[3] = router[18].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[18].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[18].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[18].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[18].b_arb_byteenable[0];
            assign router[18].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[18].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[18].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[18].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[21].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[21].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[21].b_arb_read[0];
            assign icm_in_arb_write[4] = router[21].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[21].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[21].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[21].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[21].b_arb_byteenable[0];
            assign router[21].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[21].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[21].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[21].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[23].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[23].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[23].b_arb_read[0];
            assign icm_in_arb_write[5] = router[23].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[23].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[23].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[23].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[23].b_arb_byteenable[0];
            assign router[23].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[23].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[23].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[23].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[25].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[25].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[25].b_arb_read[0];
            assign icm_in_arb_write[6] = router[25].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[25].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[25].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[25].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[25].b_arb_byteenable[0];
            assign router[25].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[25].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[25].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[25].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[27].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[27].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[27].b_arb_read[0];
            assign icm_in_arb_write[7] = router[27].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[27].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[27].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[27].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[27].b_arb_byteenable[0];
            assign router[27].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[27].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[27].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[27].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[31].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[31].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[31].b_arb_read[0];
            assign icm_in_arb_write[8] = router[31].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[31].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[31].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[31].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[31].b_arb_byteenable[0];
            assign router[31].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[31].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[31].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[31].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[33].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[33].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[33].b_arb_read[0];
            assign icm_in_arb_write[9] = router[33].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[33].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[33].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[33].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[33].b_arb_byteenable[0];
            assign router[33].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[33].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[33].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[33].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[37].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[37].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[37].b_arb_read[0];
            assign icm_in_arb_write[10] = router[37].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[37].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[37].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[37].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[37].b_arb_byteenable[0];
            assign router[37].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[37].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[37].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[37].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[40].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[40].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[40].b_arb_read[0];
            assign icm_in_arb_write[11] = router[40].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[40].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[40].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[40].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[40].b_arb_byteenable[0];
            assign router[40].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[40].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[40].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[40].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[44].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[44].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[44].b_arb_read[0];
            assign icm_in_arb_write[12] = router[44].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[44].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[44].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[44].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[44].b_arb_byteenable[0];
            assign router[44].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[44].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[44].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[44].b_rrp_data[0] = icm_in_rrp_data[12];
            // INST data_ic of FPGANetSt_system_interconnect_3
            FPGANetSt_system_interconnect_3 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port3bank0
            logic icm_in_arb_request [14];
            logic icm_in_arb_enable [14];
            logic icm_in_arb_read [14];
            logic icm_in_arb_write [14];
            logic icm_in_arb_burstcount [14];
            logic [11:0] icm_in_arb_address [14];
            logic [31:0] icm_in_arb_writedata [14];
            logic [3:0] icm_in_arb_byteenable [14];
            logic icm_in_arb_stall [14];
            logic icm_in_wrp_ack [14];
            logic icm_in_rrp_datavalid [14];
            logic [31:0] icm_in_rrp_data [14];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[7].b_arb_read[0];
            assign icm_in_arb_write[2] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[13].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[13].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[13].b_arb_read[0];
            assign icm_in_arb_write[3] = router[13].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[13].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[13].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[13].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[13].b_arb_byteenable[0];
            assign router[13].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[13].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[13].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[13].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[15].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[15].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[15].b_arb_read[0];
            assign icm_in_arb_write[4] = router[15].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[15].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[15].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[15].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[15].b_arb_byteenable[0];
            assign router[15].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[15].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[15].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[15].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[28].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[28].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[28].b_arb_read[0];
            assign icm_in_arb_write[5] = router[28].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[28].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[28].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[28].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[28].b_arb_byteenable[0];
            assign router[28].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[28].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[28].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[28].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[52].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[52].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[52].b_arb_read[0];
            assign icm_in_arb_write[6] = router[52].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[52].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[52].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[52].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[52].b_arb_byteenable[0];
            assign router[52].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[52].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[52].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[52].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[55].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[55].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[55].b_arb_read[0];
            assign icm_in_arb_write[7] = router[55].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[55].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[55].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[55].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[55].b_arb_byteenable[0];
            assign router[55].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[55].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[55].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[55].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[59].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[59].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[59].b_arb_read[0];
            assign icm_in_arb_write[8] = router[59].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[59].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[59].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[59].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[59].b_arb_byteenable[0];
            assign router[59].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[59].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[59].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[59].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[60].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[60].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[60].b_arb_read[0];
            assign icm_in_arb_write[9] = router[60].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[60].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[60].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[60].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[60].b_arb_byteenable[0];
            assign router[60].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[60].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[60].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[60].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[63].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[63].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[63].b_arb_read[0];
            assign icm_in_arb_write[10] = router[63].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[63].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[63].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[63].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[63].b_arb_byteenable[0];
            assign router[63].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[63].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[63].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[63].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[65].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[65].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[65].b_arb_read[0];
            assign icm_in_arb_write[11] = router[65].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[65].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[65].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[65].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[65].b_arb_byteenable[0];
            assign router[65].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[65].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[65].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[65].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[69].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[69].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[69].b_arb_read[0];
            assign icm_in_arb_write[12] = router[69].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[69].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[69].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[69].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[69].b_arb_byteenable[0];
            assign router[69].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[69].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[69].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[69].b_rrp_data[0] = icm_in_rrp_data[12];
            assign icm_in_arb_request[13] = router[72].b_arb_request[0];
            assign icm_in_arb_enable[13] = router[72].b_arb_enable[0];
            assign icm_in_arb_read[13] = router[72].b_arb_read[0];
            assign icm_in_arb_write[13] = router[72].b_arb_write[0];
            assign icm_in_arb_burstcount[13] = router[72].b_arb_burstcount[0];
            assign icm_in_arb_address[13] = router[72].b_arb_address[0];
            assign icm_in_arb_writedata[13] = router[72].b_arb_writedata[0];
            assign icm_in_arb_byteenable[13] = router[72].b_arb_byteenable[0];
            assign router[72].b_arb_stall[0] = icm_in_arb_stall[13];
            assign router[72].b_wrp_ack[0] = icm_in_wrp_ack[13];
            assign router[72].b_rrp_datavalid[0] = icm_in_rrp_datavalid[13];
            assign router[72].b_rrp_data[0] = icm_in_rrp_data[13];
            // INST data_ic of FPGANetSt_system_interconnect_4
            FPGANetSt_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port4bank0
            logic icm_in_arb_request [14];
            logic icm_in_arb_enable [14];
            logic icm_in_arb_read [14];
            logic icm_in_arb_write [14];
            logic icm_in_arb_burstcount [14];
            logic [11:0] icm_in_arb_address [14];
            logic [31:0] icm_in_arb_writedata [14];
            logic [3:0] icm_in_arb_byteenable [14];
            logic icm_in_arb_stall [14];
            logic icm_in_wrp_ack [14];
            logic icm_in_rrp_datavalid [14];
            logic [31:0] icm_in_rrp_data [14];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[41].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[41].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[41].b_arb_read[0];
            assign icm_in_arb_write[0] = router[41].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[41].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[41].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[41].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[41].b_arb_byteenable[0];
            assign router[41].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[41].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[41].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[41].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[45].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[45].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[45].b_arb_read[0];
            assign icm_in_arb_write[1] = router[45].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[45].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[45].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[45].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[45].b_arb_byteenable[0];
            assign router[45].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[45].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[45].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[45].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[48].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[48].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[48].b_arb_read[0];
            assign icm_in_arb_write[2] = router[48].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[48].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[48].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[48].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[48].b_arb_byteenable[0];
            assign router[48].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[48].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[48].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[48].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[50].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[50].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[50].b_arb_read[0];
            assign icm_in_arb_write[3] = router[50].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[50].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[50].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[50].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[50].b_arb_byteenable[0];
            assign router[50].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[50].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[50].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[50].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[53].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[53].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[53].b_arb_read[0];
            assign icm_in_arb_write[4] = router[53].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[53].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[53].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[53].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[53].b_arb_byteenable[0];
            assign router[53].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[53].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[53].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[53].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[56].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[56].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[56].b_arb_read[0];
            assign icm_in_arb_write[5] = router[56].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[56].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[56].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[56].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[56].b_arb_byteenable[0];
            assign router[56].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[56].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[56].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[56].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[58].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[58].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[58].b_arb_read[0];
            assign icm_in_arb_write[6] = router[58].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[58].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[58].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[58].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[58].b_arb_byteenable[0];
            assign router[58].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[58].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[58].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[58].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[61].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[61].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[61].b_arb_read[0];
            assign icm_in_arb_write[7] = router[61].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[61].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[61].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[61].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[61].b_arb_byteenable[0];
            assign router[61].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[61].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[61].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[61].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[64].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[64].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[64].b_arb_read[0];
            assign icm_in_arb_write[8] = router[64].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[64].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[64].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[64].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[64].b_arb_byteenable[0];
            assign router[64].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[64].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[64].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[64].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[66].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[66].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[66].b_arb_read[0];
            assign icm_in_arb_write[9] = router[66].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[66].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[66].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[66].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[66].b_arb_byteenable[0];
            assign router[66].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[66].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[66].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[66].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[75].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[75].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[75].b_arb_read[0];
            assign icm_in_arb_write[10] = router[75].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[75].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[75].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[75].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[75].b_arb_byteenable[0];
            assign router[75].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[75].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[75].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[75].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[77].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[77].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[77].b_arb_read[0];
            assign icm_in_arb_write[11] = router[77].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[77].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[77].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[77].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[77].b_arb_byteenable[0];
            assign router[77].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[77].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[77].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[77].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[80].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[80].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[80].b_arb_read[0];
            assign icm_in_arb_write[12] = router[80].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[80].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[80].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[80].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[80].b_arb_byteenable[0];
            assign router[80].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[80].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[80].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[80].b_rrp_data[0] = icm_in_rrp_data[12];
            assign icm_in_arb_request[13] = router[83].b_arb_request[0];
            assign icm_in_arb_enable[13] = router[83].b_arb_enable[0];
            assign icm_in_arb_read[13] = router[83].b_arb_read[0];
            assign icm_in_arb_write[13] = router[83].b_arb_write[0];
            assign icm_in_arb_burstcount[13] = router[83].b_arb_burstcount[0];
            assign icm_in_arb_address[13] = router[83].b_arb_address[0];
            assign icm_in_arb_writedata[13] = router[83].b_arb_writedata[0];
            assign icm_in_arb_byteenable[13] = router[83].b_arb_byteenable[0];
            assign router[83].b_arb_stall[0] = icm_in_arb_stall[13];
            assign router[83].b_wrp_ack[0] = icm_in_wrp_ack[13];
            assign router[83].b_rrp_datavalid[0] = icm_in_rrp_datavalid[13];
            assign router[83].b_rrp_data[0] = icm_in_rrp_data[13];
            // INST data_ic of FPGANetSt_system_interconnect_5
            FPGANetSt_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port5bank0
            logic icm_in_arb_request [14];
            logic icm_in_arb_enable [14];
            logic icm_in_arb_read [14];
            logic icm_in_arb_write [14];
            logic icm_in_arb_burstcount [14];
            logic [11:0] icm_in_arb_address [14];
            logic [31:0] icm_in_arb_writedata [14];
            logic [3:0] icm_in_arb_byteenable [14];
            logic icm_in_arb_stall [14];
            logic icm_in_wrp_ack [14];
            logic icm_in_rrp_datavalid [14];
            logic [31:0] icm_in_rrp_data [14];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[12].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[12].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[12].b_arb_read[0];
            assign icm_in_arb_write[0] = router[12].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[12].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[12].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[12].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[12].b_arb_byteenable[0];
            assign router[12].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[12].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[12].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[12].b_rrp_data[0] = icm_in_rrp_data[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[1] = router[17].b_arb_enable[0];
            assign icm_in_arb_request[1] = router[17].b_arb_request[0];
            assign icm_in_arb_read[1] = router[17].b_arb_read[0];
            assign icm_in_arb_write[1] = router[17].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[17].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[17].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[17].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[17].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[2] = router[19].b_arb_enable[0];
            assign icm_in_arb_request[2] = router[19].b_arb_request[0];
            assign icm_in_arb_read[2] = router[19].b_arb_read[0];
            assign icm_in_arb_write[2] = router[19].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[19].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[19].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[19].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[19].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[3] = router[20].b_arb_enable[0];
            assign icm_in_arb_request[3] = router[20].b_arb_request[0];
            assign icm_in_arb_read[3] = router[20].b_arb_read[0];
            assign icm_in_arb_write[3] = router[20].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[20].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[20].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[20].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[20].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[4] = router[22].b_arb_enable[0];
            assign icm_in_arb_request[4] = router[22].b_arb_request[0];
            assign icm_in_arb_read[4] = router[22].b_arb_read[0];
            assign icm_in_arb_write[4] = router[22].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[22].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[22].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[22].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[22].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[5] = router[24].b_arb_enable[0];
            assign icm_in_arb_request[5] = router[24].b_arb_request[0];
            assign icm_in_arb_read[5] = router[24].b_arb_read[0];
            assign icm_in_arb_write[5] = router[24].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[24].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[24].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[24].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[24].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[6] = router[26].b_arb_enable[0];
            assign icm_in_arb_request[6] = router[26].b_arb_request[0];
            assign icm_in_arb_read[6] = router[26].b_arb_read[0];
            assign icm_in_arb_write[6] = router[26].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[26].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[26].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[26].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[26].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[7] = router[29].b_arb_enable[0];
            assign icm_in_arb_request[7] = router[29].b_arb_request[0];
            assign icm_in_arb_read[7] = router[29].b_arb_read[0];
            assign icm_in_arb_write[7] = router[29].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[29].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[29].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[29].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[29].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[8] = router[30].b_arb_enable[0];
            assign icm_in_arb_request[8] = router[30].b_arb_request[0];
            assign icm_in_arb_read[8] = router[30].b_arb_read[0];
            assign icm_in_arb_write[8] = router[30].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[30].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[30].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[30].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[30].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[9] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[9] = router[32].b_arb_request[0];
            assign icm_in_arb_read[9] = router[32].b_arb_read[0];
            assign icm_in_arb_write[9] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[32].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[10] = router[34].b_arb_enable[0];
            assign icm_in_arb_request[10] = router[34].b_arb_request[0];
            assign icm_in_arb_read[10] = router[34].b_arb_read[0];
            assign icm_in_arb_write[10] = router[34].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[34].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[34].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[34].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[34].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[11] = router[35].b_arb_enable[0];
            assign icm_in_arb_request[11] = router[35].b_arb_request[0];
            assign icm_in_arb_read[11] = router[35].b_arb_read[0];
            assign icm_in_arb_write[11] = router[35].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[35].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[35].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[35].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[35].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[12] = router[36].b_arb_enable[0];
            assign icm_in_arb_request[12] = router[36].b_arb_request[0];
            assign icm_in_arb_read[12] = router[36].b_arb_read[0];
            assign icm_in_arb_write[12] = router[36].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[36].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[36].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[36].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[36].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[13] = router[38].b_arb_enable[0];
            assign icm_in_arb_request[13] = router[38].b_arb_request[0];
            assign icm_in_arb_read[13] = router[38].b_arb_read[0];
            assign icm_in_arb_write[13] = router[38].b_arb_write[0];
            assign icm_in_arb_burstcount[13] = router[38].b_arb_burstcount[0];
            assign icm_in_arb_address[13] = router[38].b_arb_address[0];
            assign icm_in_arb_writedata[13] = router[38].b_arb_writedata[0];
            assign icm_in_arb_byteenable[13] = router[38].b_arb_byteenable[0];
            // INST data_ic of FPGANetSt_system_interconnect_2
            FPGANetSt_system_interconnect_2 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[5] = icm_out_arb_enable;
            assign bank[0].port_read[5] = icm_out_arb_read;
            assign bank[0].port_write[5] = icm_out_arb_write;
            assign bank[0].port_address[5] = icm_out_arb_address;
            assign bank[0].port_writedata[5] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[5] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[5];
            assign icm_out_rrp_data = bank[0].port_readdata[5];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[5];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port6bank0
            logic icm_in_arb_request [14];
            logic icm_in_arb_enable [14];
            logic icm_in_arb_read [14];
            logic icm_in_arb_write [14];
            logic icm_in_arb_burstcount [14];
            logic [11:0] icm_in_arb_address [14];
            logic [31:0] icm_in_arb_writedata [14];
            logic [3:0] icm_in_arb_byteenable [14];
            logic icm_in_arb_stall [14];
            logic icm_in_wrp_ack [14];
            logic icm_in_rrp_datavalid [14];
            logic [31:0] icm_in_rrp_data [14];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[1] = router[18].b_arb_enable[0];
            assign icm_in_arb_request[1] = router[18].b_arb_request[0];
            assign icm_in_arb_read[1] = router[18].b_arb_read[0];
            assign icm_in_arb_write[1] = router[18].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[18].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[18].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[18].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[18].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[2] = router[21].b_arb_enable[0];
            assign icm_in_arb_request[2] = router[21].b_arb_request[0];
            assign icm_in_arb_read[2] = router[21].b_arb_read[0];
            assign icm_in_arb_write[2] = router[21].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[21].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[21].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[21].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[21].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[3] = router[23].b_arb_enable[0];
            assign icm_in_arb_request[3] = router[23].b_arb_request[0];
            assign icm_in_arb_read[3] = router[23].b_arb_read[0];
            assign icm_in_arb_write[3] = router[23].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[23].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[23].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[23].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[23].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[4] = router[25].b_arb_enable[0];
            assign icm_in_arb_request[4] = router[25].b_arb_request[0];
            assign icm_in_arb_read[4] = router[25].b_arb_read[0];
            assign icm_in_arb_write[4] = router[25].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[25].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[25].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[25].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[25].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[5] = router[27].b_arb_enable[0];
            assign icm_in_arb_request[5] = router[27].b_arb_request[0];
            assign icm_in_arb_read[5] = router[27].b_arb_read[0];
            assign icm_in_arb_write[5] = router[27].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[27].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[27].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[27].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[27].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[6] = router[31].b_arb_enable[0];
            assign icm_in_arb_request[6] = router[31].b_arb_request[0];
            assign icm_in_arb_read[6] = router[31].b_arb_read[0];
            assign icm_in_arb_write[6] = router[31].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[31].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[31].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[31].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[31].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[7] = router[33].b_arb_enable[0];
            assign icm_in_arb_request[7] = router[33].b_arb_request[0];
            assign icm_in_arb_read[7] = router[33].b_arb_read[0];
            assign icm_in_arb_write[7] = router[33].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[33].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[33].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[33].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[33].b_arb_byteenable[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[8] = router[37].b_arb_enable[0];
            assign icm_in_arb_request[8] = router[37].b_arb_request[0];
            assign icm_in_arb_read[8] = router[37].b_arb_read[0];
            assign icm_in_arb_write[8] = router[37].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[37].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[37].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[37].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[37].b_arb_byteenable[0];
            assign icm_in_arb_request[9] = router[54].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[54].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[54].b_arb_read[0];
            assign icm_in_arb_write[9] = router[54].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[54].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[54].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[54].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[54].b_arb_byteenable[0];
            assign router[54].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[54].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[54].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[54].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[62].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[62].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[62].b_arb_read[0];
            assign icm_in_arb_write[10] = router[62].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[62].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[62].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[62].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[62].b_arb_byteenable[0];
            assign router[62].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[62].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[62].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[62].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[67].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[67].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[67].b_arb_read[0];
            assign icm_in_arb_write[11] = router[67].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[67].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[67].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[67].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[67].b_arb_byteenable[0];
            assign router[67].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[67].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[67].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[67].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[73].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[73].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[73].b_arb_read[0];
            assign icm_in_arb_write[12] = router[73].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[73].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[73].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[73].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[73].b_arb_byteenable[0];
            assign router[73].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[73].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[73].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[73].b_rrp_data[0] = icm_in_rrp_data[12];
            assign icm_in_arb_request[13] = router[78].b_arb_request[0];
            assign icm_in_arb_enable[13] = router[78].b_arb_enable[0];
            assign icm_in_arb_read[13] = router[78].b_arb_read[0];
            assign icm_in_arb_write[13] = router[78].b_arb_write[0];
            assign icm_in_arb_burstcount[13] = router[78].b_arb_burstcount[0];
            assign icm_in_arb_address[13] = router[78].b_arb_address[0];
            assign icm_in_arb_writedata[13] = router[78].b_arb_writedata[0];
            assign icm_in_arb_byteenable[13] = router[78].b_arb_byteenable[0];
            assign router[78].b_arb_stall[0] = icm_in_arb_stall[13];
            assign router[78].b_wrp_ack[0] = icm_in_wrp_ack[13];
            assign router[78].b_rrp_datavalid[0] = icm_in_rrp_datavalid[13];
            assign router[78].b_rrp_data[0] = icm_in_rrp_data[13];
            // INST data_ic of FPGANetSt_system_interconnect_6
            FPGANetSt_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[6] = icm_out_arb_enable;
            assign bank[0].port_read[6] = icm_out_arb_read;
            assign bank[0].port_write[6] = icm_out_arb_write;
            assign bank[0].port_address[6] = icm_out_arb_address;
            assign bank[0].port_writedata[6] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[6] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[6];
            assign icm_out_rrp_data = bank[0].port_readdata[6];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[6];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port7bank0
            logic icm_in_arb_request [13];
            logic icm_in_arb_enable [13];
            logic icm_in_arb_read [13];
            logic icm_in_arb_write [13];
            logic icm_in_arb_burstcount [13];
            logic [11:0] icm_in_arb_address [13];
            logic [31:0] icm_in_arb_writedata [13];
            logic [3:0] icm_in_arb_byteenable [13];
            logic icm_in_arb_stall [13];
            logic icm_in_wrp_ack [13];
            logic icm_in_rrp_datavalid [13];
            logic [31:0] icm_in_rrp_data [13];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[8].b_arb_read[0];
            assign icm_in_arb_write[0] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[10].b_arb_read[0];
            assign icm_in_arb_write[1] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[1];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[2] = router[28].b_arb_enable[0];
            assign icm_in_arb_request[2] = router[28].b_arb_request[0];
            assign icm_in_arb_read[2] = router[28].b_arb_read[0];
            assign icm_in_arb_write[2] = router[28].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[28].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[28].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[28].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[28].b_arb_byteenable[0];
            assign icm_in_arb_request[3] = router[42].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[42].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[42].b_arb_read[0];
            assign icm_in_arb_write[3] = router[42].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[42].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[42].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[42].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[42].b_arb_byteenable[0];
            assign router[42].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[42].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[42].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[42].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[57].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[57].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[57].b_arb_read[0];
            assign icm_in_arb_write[4] = router[57].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[57].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[57].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[57].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[57].b_arb_byteenable[0];
            assign router[57].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[57].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[57].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[57].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[70].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[70].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[70].b_arb_read[0];
            assign icm_in_arb_write[5] = router[70].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[70].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[70].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[70].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[70].b_arb_byteenable[0];
            assign router[70].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[70].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[70].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[70].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[74].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[74].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[74].b_arb_read[0];
            assign icm_in_arb_write[6] = router[74].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[74].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[74].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[74].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[74].b_arb_byteenable[0];
            assign router[74].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[74].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[74].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[74].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[76].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[76].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[76].b_arb_read[0];
            assign icm_in_arb_write[7] = router[76].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[76].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[76].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[76].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[76].b_arb_byteenable[0];
            assign router[76].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[76].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[76].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[76].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[79].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[79].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[79].b_arb_read[0];
            assign icm_in_arb_write[8] = router[79].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[79].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[79].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[79].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[79].b_arb_byteenable[0];
            assign router[79].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[79].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[79].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[79].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[81].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[81].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[81].b_arb_read[0];
            assign icm_in_arb_write[9] = router[81].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[81].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[81].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[81].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[81].b_arb_byteenable[0];
            assign router[81].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[81].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[81].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[81].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[82].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[82].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[82].b_arb_read[0];
            assign icm_in_arb_write[10] = router[82].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[82].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[82].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[82].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[82].b_arb_byteenable[0];
            assign router[82].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[82].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[82].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[82].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[84].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[84].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[84].b_arb_read[0];
            assign icm_in_arb_write[11] = router[84].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[84].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[84].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[84].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[84].b_arb_byteenable[0];
            assign router[84].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[84].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[84].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[84].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[85].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[85].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[85].b_arb_read[0];
            assign icm_in_arb_write[12] = router[85].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[85].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[85].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[85].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[85].b_arb_byteenable[0];
            assign router[85].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[85].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[85].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[85].b_rrp_data[0] = icm_in_rrp_data[12];
            // INST data_ic of FPGANetSt_system_interconnect_7
            FPGANetSt_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[7] = icm_out_arb_enable;
            assign bank[0].port_read[7] = icm_out_arb_read;
            assign bank[0].port_write[7] = icm_out_arb_write;
            assign bank[0].port_address[7] = icm_out_arb_address;
            assign bank[0].port_writedata[7] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[7] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[7];
            assign icm_out_rrp_data = bank[0].port_readdata[7];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[7];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port8bank0
            logic icm_in_arb_request [13];
            logic icm_in_arb_enable [13];
            logic icm_in_arb_read [13];
            logic icm_in_arb_write [13];
            logic icm_in_arb_burstcount [13];
            logic [11:0] icm_in_arb_address [13];
            logic [31:0] icm_in_arb_writedata [13];
            logic [3:0] icm_in_arb_byteenable [13];
            logic icm_in_arb_stall [13];
            logic icm_in_wrp_ack [13];
            logic icm_in_rrp_datavalid [13];
            logic [31:0] icm_in_rrp_data [13];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[11].b_arb_read[0];
            assign icm_in_arb_write[2] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[14].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[14].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[14].b_arb_read[0];
            assign icm_in_arb_write[3] = router[14].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[14].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[14].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[14].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[14].b_arb_byteenable[0];
            assign router[14].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[14].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[14].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[14].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[39].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[39].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[39].b_arb_read[0];
            assign icm_in_arb_write[4] = router[39].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[39].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[39].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[39].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[39].b_arb_byteenable[0];
            assign router[39].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[39].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[39].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[39].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[43].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[43].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[43].b_arb_read[0];
            assign icm_in_arb_write[5] = router[43].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[43].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[43].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[43].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[43].b_arb_byteenable[0];
            assign router[43].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[43].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[43].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[43].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[46].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[46].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[46].b_arb_read[0];
            assign icm_in_arb_write[6] = router[46].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[46].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[46].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[46].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[46].b_arb_byteenable[0];
            assign router[46].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[46].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[46].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[46].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[47].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[47].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[47].b_arb_read[0];
            assign icm_in_arb_write[7] = router[47].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[47].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[47].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[47].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[47].b_arb_byteenable[0];
            assign router[47].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[47].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[47].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[47].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[49].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[49].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[49].b_arb_read[0];
            assign icm_in_arb_write[8] = router[49].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[49].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[49].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[49].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[49].b_arb_byteenable[0];
            assign router[49].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[49].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[49].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[49].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[51].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[51].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[51].b_arb_read[0];
            assign icm_in_arb_write[9] = router[51].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[51].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[51].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[51].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[51].b_arb_byteenable[0];
            assign router[51].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[51].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[51].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[51].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[68].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[68].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[68].b_arb_read[0];
            assign icm_in_arb_write[10] = router[68].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[68].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[68].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[68].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[68].b_arb_byteenable[0];
            assign router[68].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[68].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[68].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[68].b_rrp_data[0] = icm_in_rrp_data[10];
            assign icm_in_arb_request[11] = router[71].b_arb_request[0];
            assign icm_in_arb_enable[11] = router[71].b_arb_enable[0];
            assign icm_in_arb_read[11] = router[71].b_arb_read[0];
            assign icm_in_arb_write[11] = router[71].b_arb_write[0];
            assign icm_in_arb_burstcount[11] = router[71].b_arb_burstcount[0];
            assign icm_in_arb_address[11] = router[71].b_arb_address[0];
            assign icm_in_arb_writedata[11] = router[71].b_arb_writedata[0];
            assign icm_in_arb_byteenable[11] = router[71].b_arb_byteenable[0];
            assign router[71].b_arb_stall[0] = icm_in_arb_stall[11];
            assign router[71].b_wrp_ack[0] = icm_in_wrp_ack[11];
            assign router[71].b_rrp_datavalid[0] = icm_in_rrp_datavalid[11];
            assign router[71].b_rrp_data[0] = icm_in_rrp_data[11];
            assign icm_in_arb_request[12] = router[86].b_arb_request[0];
            assign icm_in_arb_enable[12] = router[86].b_arb_enable[0];
            assign icm_in_arb_read[12] = router[86].b_arb_read[0];
            assign icm_in_arb_write[12] = router[86].b_arb_write[0];
            assign icm_in_arb_burstcount[12] = router[86].b_arb_burstcount[0];
            assign icm_in_arb_address[12] = router[86].b_arb_address[0];
            assign icm_in_arb_writedata[12] = router[86].b_arb_writedata[0];
            assign icm_in_arb_byteenable[12] = router[86].b_arb_byteenable[0];
            assign router[86].b_arb_stall[0] = icm_in_arb_stall[12];
            assign router[86].b_wrp_ack[0] = icm_in_wrp_ack[12];
            assign router[86].b_rrp_datavalid[0] = icm_in_rrp_datavalid[12];
            assign router[86].b_rrp_data[0] = icm_in_rrp_data[12];
            // INST data_ic of FPGANetSt_system_interconnect_8
            FPGANetSt_system_interconnect_8 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[8] = icm_out_arb_enable;
            assign bank[0].port_read[8] = icm_out_arb_read;
            assign bank[0].port_write[8] = icm_out_arb_write;
            assign bank[0].port_address[8] = icm_out_arb_address;
            assign bank[0].port_writedata[8] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[8] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[8];
            assign icm_out_rrp_data = bank[0].port_readdata[8];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[8];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace7
      logic local_icm_arb_request [1][37];
      logic local_icm_arb_enable [1][37];
      logic local_icm_arb_read [1][37];
      logic local_icm_arb_write [1][37];
      logic local_icm_arb_burstcount [1][37];
      logic [11:0] local_icm_arb_address [1][37];
      logic [31:0] local_icm_arb_writedata [1][37];
      logic [3:0] local_icm_arb_byteenable [1][37];
      logic local_icm_arb_stall [1][37];
      logic local_icm_wrp_ack [1][37];
      logic local_icm_rrp_datavalid [1][37];
      logic [31:0] local_icm_rrp_data [1][37];

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 37; __l = __l + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace7_enable[__k][__l]),
               .avm_read(local_avm_aspace7_read[__k][__l]),
               .avm_write(local_avm_aspace7_write[__k][__l]),
               .avm_burstcount(local_avm_aspace7_burstcount[__k][__l]),
               .avm_address(local_avm_aspace7_address[__k][__l]),
               .avm_writedata(local_avm_aspace7_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace7_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace7_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace7_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace7_readdatavalid[__k][__l]),
               .avm_writeack(local_avm_aspace7_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [11:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __l = 0; __l < 37; __l = __l + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [11];
            logic icm_in_arb_enable [11];
            logic icm_in_arb_read [11];
            logic icm_in_arb_write [11];
            logic icm_in_arb_burstcount [11];
            logic [11:0] icm_in_arb_address [11];
            logic [31:0] icm_in_arb_writedata [11];
            logic [3:0] icm_in_arb_byteenable [11];
            logic icm_in_arb_stall [11];
            logic icm_in_wrp_ack [11];
            logic icm_in_rrp_datavalid [11];
            logic [31:0] icm_in_rrp_data [11];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[6].b_arb_read[0];
            assign icm_in_arb_write[0] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[7].b_arb_read[0];
            assign icm_in_arb_write[1] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[8].b_arb_read[0];
            assign icm_in_arb_write[2] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[9].b_arb_read[0];
            assign icm_in_arb_write[3] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[13].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[13].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[13].b_arb_read[0];
            assign icm_in_arb_write[4] = router[13].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[13].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[13].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[13].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[13].b_arb_byteenable[0];
            assign router[13].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[13].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[13].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[13].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[14].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[14].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[14].b_arb_read[0];
            assign icm_in_arb_write[5] = router[14].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[14].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[14].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[14].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[14].b_arb_byteenable[0];
            assign router[14].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[14].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[14].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[14].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[21].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[21].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[21].b_arb_read[0];
            assign icm_in_arb_write[6] = router[21].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[21].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[21].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[21].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[21].b_arb_byteenable[0];
            assign router[21].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[21].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[21].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[21].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[22].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[22].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[22].b_arb_read[0];
            assign icm_in_arb_write[7] = router[22].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[22].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[22].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[22].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[22].b_arb_byteenable[0];
            assign router[22].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[22].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[22].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[22].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[23].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[23].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[23].b_arb_read[0];
            assign icm_in_arb_write[8] = router[23].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[23].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[23].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[23].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[23].b_arb_byteenable[0];
            assign router[23].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[23].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[23].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[23].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[24].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[24].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[24].b_arb_read[0];
            assign icm_in_arb_write[9] = router[24].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[24].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[24].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[24].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[24].b_arb_byteenable[0];
            assign router[24].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[24].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[24].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[24].b_rrp_data[0] = icm_in_rrp_data[9];
            assign icm_in_arb_request[10] = router[25].b_arb_request[0];
            assign icm_in_arb_enable[10] = router[25].b_arb_enable[0];
            assign icm_in_arb_read[10] = router[25].b_arb_read[0];
            assign icm_in_arb_write[10] = router[25].b_arb_write[0];
            assign icm_in_arb_burstcount[10] = router[25].b_arb_burstcount[0];
            assign icm_in_arb_address[10] = router[25].b_arb_address[0];
            assign icm_in_arb_writedata[10] = router[25].b_arb_writedata[0];
            assign icm_in_arb_byteenable[10] = router[25].b_arb_byteenable[0];
            assign router[25].b_arb_stall[0] = icm_in_arb_stall[10];
            assign router[25].b_wrp_ack[0] = icm_in_wrp_ack[10];
            assign router[25].b_rrp_datavalid[0] = icm_in_rrp_datavalid[10];
            assign router[25].b_rrp_data[0] = icm_in_rrp_data[10];
            // INST data_ic of FPGANetSt_system_interconnect_9
            FPGANetSt_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [9];
            logic icm_in_arb_enable [9];
            logic icm_in_arb_read [9];
            logic icm_in_arb_write [9];
            logic icm_in_arb_burstcount [9];
            logic [11:0] icm_in_arb_address [9];
            logic [31:0] icm_in_arb_writedata [9];
            logic [3:0] icm_in_arb_byteenable [9];
            logic icm_in_arb_stall [9];
            logic icm_in_wrp_ack [9];
            logic icm_in_rrp_datavalid [9];
            logic [31:0] icm_in_rrp_data [9];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[2].b_arb_read[0];
            assign icm_in_arb_write[2] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[3].b_arb_read[0];
            assign icm_in_arb_write[3] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[4].b_arb_read[0];
            assign icm_in_arb_write[4] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[10].b_arb_read[0];
            assign icm_in_arb_write[5] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[17].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[17].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[17].b_arb_read[0];
            assign icm_in_arb_write[6] = router[17].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[17].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[17].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[17].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[17].b_arb_byteenable[0];
            assign router[17].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[17].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[17].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[17].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[18].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[18].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[18].b_arb_read[0];
            assign icm_in_arb_write[7] = router[18].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[18].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[18].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[18].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[18].b_arb_byteenable[0];
            assign router[18].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[18].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[18].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[18].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[36].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[36].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[36].b_arb_read[0];
            assign icm_in_arb_write[8] = router[36].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[36].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[36].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[36].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[36].b_arb_byteenable[0];
            assign router[36].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[36].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[36].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[36].b_rrp_data[0] = icm_in_rrp_data[8];
            // INST data_ic of FPGANetSt_system_interconnect_10
            FPGANetSt_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank0
            logic icm_in_arb_request [10];
            logic icm_in_arb_enable [10];
            logic icm_in_arb_read [10];
            logic icm_in_arb_write [10];
            logic icm_in_arb_burstcount [10];
            logic [11:0] icm_in_arb_address [10];
            logic [31:0] icm_in_arb_writedata [10];
            logic [3:0] icm_in_arb_byteenable [10];
            logic icm_in_arb_stall [10];
            logic icm_in_wrp_ack [10];
            logic icm_in_rrp_datavalid [10];
            logic [31:0] icm_in_rrp_data [10];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[11].b_arb_read[0];
            assign icm_in_arb_write[1] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[12].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[12].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[12].b_arb_read[0];
            assign icm_in_arb_write[2] = router[12].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[12].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[12].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[12].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[12].b_arb_byteenable[0];
            assign router[12].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[12].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[12].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[12].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[19].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[19].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[19].b_arb_read[0];
            assign icm_in_arb_write[3] = router[19].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[19].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[19].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[19].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[19].b_arb_byteenable[0];
            assign router[19].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[19].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[19].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[19].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[20].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[20].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[20].b_arb_read[0];
            assign icm_in_arb_write[4] = router[20].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[20].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[20].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[20].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[20].b_arb_byteenable[0];
            assign router[20].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[20].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[20].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[20].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[31].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[31].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[31].b_arb_read[0];
            assign icm_in_arb_write[5] = router[31].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[31].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[31].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[31].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[31].b_arb_byteenable[0];
            assign router[31].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[31].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[31].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[31].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[32].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[32].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[32].b_arb_read[0];
            assign icm_in_arb_write[6] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[32].b_arb_byteenable[0];
            assign router[32].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[32].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[32].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[32].b_rrp_data[0] = icm_in_rrp_data[6];
            assign icm_in_arb_request[7] = router[33].b_arb_request[0];
            assign icm_in_arb_enable[7] = router[33].b_arb_enable[0];
            assign icm_in_arb_read[7] = router[33].b_arb_read[0];
            assign icm_in_arb_write[7] = router[33].b_arb_write[0];
            assign icm_in_arb_burstcount[7] = router[33].b_arb_burstcount[0];
            assign icm_in_arb_address[7] = router[33].b_arb_address[0];
            assign icm_in_arb_writedata[7] = router[33].b_arb_writedata[0];
            assign icm_in_arb_byteenable[7] = router[33].b_arb_byteenable[0];
            assign router[33].b_arb_stall[0] = icm_in_arb_stall[7];
            assign router[33].b_wrp_ack[0] = icm_in_wrp_ack[7];
            assign router[33].b_rrp_datavalid[0] = icm_in_rrp_datavalid[7];
            assign router[33].b_rrp_data[0] = icm_in_rrp_data[7];
            assign icm_in_arb_request[8] = router[34].b_arb_request[0];
            assign icm_in_arb_enable[8] = router[34].b_arb_enable[0];
            assign icm_in_arb_read[8] = router[34].b_arb_read[0];
            assign icm_in_arb_write[8] = router[34].b_arb_write[0];
            assign icm_in_arb_burstcount[8] = router[34].b_arb_burstcount[0];
            assign icm_in_arb_address[8] = router[34].b_arb_address[0];
            assign icm_in_arb_writedata[8] = router[34].b_arb_writedata[0];
            assign icm_in_arb_byteenable[8] = router[34].b_arb_byteenable[0];
            assign router[34].b_arb_stall[0] = icm_in_arb_stall[8];
            assign router[34].b_wrp_ack[0] = icm_in_wrp_ack[8];
            assign router[34].b_rrp_datavalid[0] = icm_in_rrp_datavalid[8];
            assign router[34].b_rrp_data[0] = icm_in_rrp_data[8];
            assign icm_in_arb_request[9] = router[35].b_arb_request[0];
            assign icm_in_arb_enable[9] = router[35].b_arb_enable[0];
            assign icm_in_arb_read[9] = router[35].b_arb_read[0];
            assign icm_in_arb_write[9] = router[35].b_arb_write[0];
            assign icm_in_arb_burstcount[9] = router[35].b_arb_burstcount[0];
            assign icm_in_arb_address[9] = router[35].b_arb_address[0];
            assign icm_in_arb_writedata[9] = router[35].b_arb_writedata[0];
            assign icm_in_arb_byteenable[9] = router[35].b_arb_byteenable[0];
            assign router[35].b_arb_stall[0] = icm_in_arb_stall[9];
            assign router[35].b_wrp_ack[0] = icm_in_wrp_ack[9];
            assign router[35].b_rrp_datavalid[0] = icm_in_rrp_datavalid[9];
            assign router[35].b_rrp_data[0] = icm_in_rrp_data[9];
            // INST data_ic of FPGANetSt_system_interconnect_11
            FPGANetSt_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank0
            logic icm_in_arb_request [7];
            logic icm_in_arb_enable [7];
            logic icm_in_arb_read [7];
            logic icm_in_arb_write [7];
            logic icm_in_arb_burstcount [7];
            logic [11:0] icm_in_arb_address [7];
            logic [31:0] icm_in_arb_writedata [7];
            logic [3:0] icm_in_arb_byteenable [7];
            logic icm_in_arb_stall [7];
            logic icm_in_wrp_ack [7];
            logic icm_in_rrp_datavalid [7];
            logic [31:0] icm_in_rrp_data [7];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[15].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[15].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[15].b_arb_read[0];
            assign icm_in_arb_write[0] = router[15].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[15].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[15].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[15].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[15].b_arb_byteenable[0];
            assign router[15].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[15].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[15].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[15].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[16].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[16].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[16].b_arb_read[0];
            assign icm_in_arb_write[1] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[16].b_arb_byteenable[0];
            assign router[16].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[16].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[16].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[16].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[26].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[26].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[26].b_arb_read[0];
            assign icm_in_arb_write[2] = router[26].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[26].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[26].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[26].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[26].b_arb_byteenable[0];
            assign router[26].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[26].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[26].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[26].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[27].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[27].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[27].b_arb_read[0];
            assign icm_in_arb_write[3] = router[27].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[27].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[27].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[27].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[27].b_arb_byteenable[0];
            assign router[27].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[27].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[27].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[27].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[28].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[28].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[28].b_arb_read[0];
            assign icm_in_arb_write[4] = router[28].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[28].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[28].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[28].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[28].b_arb_byteenable[0];
            assign router[28].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[28].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[28].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[28].b_rrp_data[0] = icm_in_rrp_data[4];
            assign icm_in_arb_request[5] = router[29].b_arb_request[0];
            assign icm_in_arb_enable[5] = router[29].b_arb_enable[0];
            assign icm_in_arb_read[5] = router[29].b_arb_read[0];
            assign icm_in_arb_write[5] = router[29].b_arb_write[0];
            assign icm_in_arb_burstcount[5] = router[29].b_arb_burstcount[0];
            assign icm_in_arb_address[5] = router[29].b_arb_address[0];
            assign icm_in_arb_writedata[5] = router[29].b_arb_writedata[0];
            assign icm_in_arb_byteenable[5] = router[29].b_arb_byteenable[0];
            assign router[29].b_arb_stall[0] = icm_in_arb_stall[5];
            assign router[29].b_wrp_ack[0] = icm_in_wrp_ack[5];
            assign router[29].b_rrp_datavalid[0] = icm_in_rrp_datavalid[5];
            assign router[29].b_rrp_data[0] = icm_in_rrp_data[5];
            assign icm_in_arb_request[6] = router[30].b_arb_request[0];
            assign icm_in_arb_enable[6] = router[30].b_arb_enable[0];
            assign icm_in_arb_read[6] = router[30].b_arb_read[0];
            assign icm_in_arb_write[6] = router[30].b_arb_write[0];
            assign icm_in_arb_burstcount[6] = router[30].b_arb_burstcount[0];
            assign icm_in_arb_address[6] = router[30].b_arb_address[0];
            assign icm_in_arb_writedata[6] = router[30].b_arb_writedata[0];
            assign icm_in_arb_byteenable[6] = router[30].b_arb_byteenable[0];
            assign router[30].b_arb_stall[0] = icm_in_arb_stall[6];
            assign router[30].b_wrp_ack[0] = icm_in_wrp_ack[6];
            assign router[30].b_rrp_datavalid[0] = icm_in_rrp_datavalid[6];
            assign router[30].b_rrp_data[0] = icm_in_rrp_data[6];
            // INST data_ic of FPGANetSt_system_interconnect_12
            FPGANetSt_system_interconnect_12 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace8
      logic local_icm_arb_request [1][6];
      logic local_icm_arb_enable [1][6];
      logic local_icm_arb_read [1][6];
      logic local_icm_arb_write [1][6];
      logic local_icm_arb_burstcount [1][6];
      logic [12:0] local_icm_arb_address [1][6];
      logic [15:0] local_icm_arb_writedata [1][6];
      logic [1:0] local_icm_arb_byteenable [1][6];
      logic local_icm_arb_stall [1][6];
      logic local_icm_wrp_ack [1][6];
      logic local_icm_rrp_datavalid [1][6];
      logic [15:0] local_icm_rrp_data [1][6];

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         for( __m = 0; __m < 6; __m = __m + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(16),
               .WRITEDATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(2)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace8_enable[__l][__m]),
               .avm_read(local_avm_aspace8_read[__l][__m]),
               .avm_write(local_avm_aspace8_write[__l][__m]),
               .avm_burstcount(local_avm_aspace8_burstcount[__l][__m]),
               .avm_address(local_avm_aspace8_address[__l][__m]),
               .avm_writedata(local_avm_aspace8_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace8_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace8_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace8_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace8_readdatavalid[__l][__m]),
               .avm_writeack(local_avm_aspace8_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [12:0] port_address [1:2];
            logic [15:0] port_writedata [1:2];
            logic [1:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [15:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(8192),
               .WIDTH(16),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __m = 0; __m < 6; __m = __m + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [12:0] b_arb_address [1];
            logic [15:0] b_arb_writedata [1];
            logic [1:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [15:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(13),
               .BYTEENA_W(2),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [12:0] icm_in_arb_address [3];
            logic [15:0] icm_in_arb_writedata [3];
            logic [1:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [15:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [12:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of FPGANetSt_system_interconnect_13
            FPGANetSt_system_interconnect_13 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [12:0] icm_in_arb_address [3];
            logic [15:0] icm_in_arb_writedata [3];
            logic [1:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [15:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [12:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[5].b_arb_read[0];
            assign icm_in_arb_write[2] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of FPGANetSt_system_interconnect_14
            FPGANetSt_system_interconnect_14 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace9
      logic local_icm_arb_request [1][10];
      logic local_icm_arb_enable [1][10];
      logic local_icm_arb_read [1][10];
      logic local_icm_arb_write [1][10];
      logic local_icm_arb_burstcount [1][10];
      logic [6:0] local_icm_arb_address [1][10];
      logic [15:0] local_icm_arb_writedata [1][10];
      logic [1:0] local_icm_arb_byteenable [1][10];
      logic local_icm_arb_stall [1][10];
      logic local_icm_wrp_ack [1][10];
      logic local_icm_rrp_datavalid [1][10];
      logic [15:0] local_icm_rrp_data [1][10];

      for( __m = 0; __m < 1; __m = __m + 1 )
      begin:local_mem_group
         for( __n = 0; __n < 10; __n = __n + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(16),
               .WRITEDATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(2)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace9_enable[__m][__n]),
               .avm_read(local_avm_aspace9_read[__m][__n]),
               .avm_write(local_avm_aspace9_write[__m][__n]),
               .avm_burstcount(local_avm_aspace9_burstcount[__m][__n]),
               .avm_address(local_avm_aspace9_address[__m][__n]),
               .avm_writedata(local_avm_aspace9_writedata[__m][__n]),
               .avm_byteenable(local_avm_aspace9_byteenable[__m][__n]),
               .avm_waitrequest(local_avm_aspace9_waitrequest[__m][__n]),
               .avm_readdata(local_avm_aspace9_readdata[__m][__n]),
               .avm_readdatavalid(local_avm_aspace9_readdatavalid[__m][__n]),
               .avm_writeack(local_avm_aspace9_writeack[__m][__n]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__m][__n]),
               .ic_arb_enable(local_icm_arb_enable[__m][__n]),
               .ic_arb_read(local_icm_arb_read[__m][__n]),
               .ic_arb_write(local_icm_arb_write[__m][__n]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .ic_arb_address(local_icm_arb_address[__m][__n]),
               .ic_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .ic_arb_stall(local_icm_arb_stall[__m][__n]),
               .ic_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .ic_rrp_data(local_icm_rrp_data[__m][__n])
            );

         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [15:0] port_writedata [1:2];
            logic [1:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [15:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(16),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __n = 0; __n < 10; __n = __n + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [15:0] b_arb_writedata [1];
            logic [1:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [15:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(2),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__m][__n]),
               .m_arb_enable(local_icm_arb_enable[__m][__n]),
               .m_arb_read(local_icm_arb_read[__m][__n]),
               .m_arb_write(local_icm_arb_write[__m][__n]),
               .m_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .m_arb_address(local_icm_arb_address[__m][__n]),
               .m_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .m_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .m_arb_stall(local_icm_arb_stall[__m][__n]),
               .m_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .m_rrp_data(local_icm_rrp_data[__m][__n]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank0
            logic icm_in_arb_request [5];
            logic icm_in_arb_enable [5];
            logic icm_in_arb_read [5];
            logic icm_in_arb_write [5];
            logic icm_in_arb_burstcount [5];
            logic [6:0] icm_in_arb_address [5];
            logic [15:0] icm_in_arb_writedata [5];
            logic [1:0] icm_in_arb_byteenable [5];
            logic icm_in_arb_stall [5];
            logic icm_in_wrp_ack [5];
            logic icm_in_rrp_datavalid [5];
            logic [15:0] icm_in_rrp_data [5];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[2].b_arb_read[0];
            assign icm_in_arb_write[2] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[3].b_arb_read[0];
            assign icm_in_arb_write[3] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[4].b_arb_read[0];
            assign icm_in_arb_write[4] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[4];
            // INST data_ic of FPGANetSt_system_interconnect_15
            FPGANetSt_system_interconnect_15 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank0
            logic icm_in_arb_request [5];
            logic icm_in_arb_enable [5];
            logic icm_in_arb_read [5];
            logic icm_in_arb_write [5];
            logic icm_in_arb_burstcount [5];
            logic [6:0] icm_in_arb_address [5];
            logic [15:0] icm_in_arb_writedata [5];
            logic [1:0] icm_in_arb_byteenable [5];
            logic icm_in_arb_stall [5];
            logic icm_in_wrp_ack [5];
            logic icm_in_rrp_datavalid [5];
            logic [15:0] icm_in_rrp_data [5];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[7].b_arb_read[0];
            assign icm_in_arb_write[2] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[8].b_arb_read[0];
            assign icm_in_arb_write[3] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[9].b_arb_read[0];
            assign icm_in_arb_write[4] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[4];
            // INST data_ic of FPGANetSt_system_interconnect_16
            FPGANetSt_system_interconnect_16 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace10
      logic local_icm_arb_request [1][10];
      logic local_icm_arb_enable [1][10];
      logic local_icm_arb_read [1][10];
      logic local_icm_arb_write [1][10];
      logic local_icm_arb_burstcount [1][10];
      logic [6:0] local_icm_arb_address [1][10];
      logic [15:0] local_icm_arb_writedata [1][10];
      logic [1:0] local_icm_arb_byteenable [1][10];
      logic local_icm_arb_stall [1][10];
      logic local_icm_wrp_ack [1][10];
      logic local_icm_rrp_datavalid [1][10];
      logic [15:0] local_icm_rrp_data [1][10];

      for( __n = 0; __n < 1; __n = __n + 1 )
      begin:local_mem_group
         for( __o = 0; __o < 10; __o = __o + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(16),
               .WRITEDATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(2)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace10_enable[__n][__o]),
               .avm_read(local_avm_aspace10_read[__n][__o]),
               .avm_write(local_avm_aspace10_write[__n][__o]),
               .avm_burstcount(local_avm_aspace10_burstcount[__n][__o]),
               .avm_address(local_avm_aspace10_address[__n][__o]),
               .avm_writedata(local_avm_aspace10_writedata[__n][__o]),
               .avm_byteenable(local_avm_aspace10_byteenable[__n][__o]),
               .avm_waitrequest(local_avm_aspace10_waitrequest[__n][__o]),
               .avm_readdata(local_avm_aspace10_readdata[__n][__o]),
               .avm_readdatavalid(local_avm_aspace10_readdatavalid[__n][__o]),
               .avm_writeack(local_avm_aspace10_writeack[__n][__o]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__n][__o]),
               .ic_arb_enable(local_icm_arb_enable[__n][__o]),
               .ic_arb_read(local_icm_arb_read[__n][__o]),
               .ic_arb_write(local_icm_arb_write[__n][__o]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .ic_arb_address(local_icm_arb_address[__n][__o]),
               .ic_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .ic_arb_stall(local_icm_arb_stall[__n][__o]),
               .ic_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .ic_rrp_data(local_icm_rrp_data[__n][__o])
            );

         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [15:0] port_writedata [1:2];
            logic [1:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [15:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(16),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __o = 0; __o < 10; __o = __o + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [15:0] b_arb_writedata [1];
            logic [1:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [15:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(16),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(2),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__n][__o]),
               .m_arb_enable(local_icm_arb_enable[__n][__o]),
               .m_arb_read(local_icm_arb_read[__n][__o]),
               .m_arb_write(local_icm_arb_write[__n][__o]),
               .m_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .m_arb_address(local_icm_arb_address[__n][__o]),
               .m_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .m_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .m_arb_stall(local_icm_arb_stall[__n][__o]),
               .m_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .m_rrp_data(local_icm_rrp_data[__n][__o]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port1bank0
            logic icm_in_arb_request [5];
            logic icm_in_arb_enable [5];
            logic icm_in_arb_read [5];
            logic icm_in_arb_write [5];
            logic icm_in_arb_burstcount [5];
            logic [6:0] icm_in_arb_address [5];
            logic [15:0] icm_in_arb_writedata [5];
            logic [1:0] icm_in_arb_byteenable [5];
            logic icm_in_arb_stall [5];
            logic icm_in_wrp_ack [5];
            logic icm_in_rrp_datavalid [5];
            logic [15:0] icm_in_rrp_data [5];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[2].b_arb_read[0];
            assign icm_in_arb_write[2] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[3].b_arb_read[0];
            assign icm_in_arb_write[3] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[9].b_arb_read[0];
            assign icm_in_arb_write[4] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[4];
            // INST data_ic of FPGANetSt_system_interconnect_17
            FPGANetSt_system_interconnect_17 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port2bank0
            logic icm_in_arb_request [5];
            logic icm_in_arb_enable [5];
            logic icm_in_arb_read [5];
            logic icm_in_arb_write [5];
            logic icm_in_arb_burstcount [5];
            logic [6:0] icm_in_arb_address [5];
            logic [15:0] icm_in_arb_writedata [5];
            logic [1:0] icm_in_arb_byteenable [5];
            logic icm_in_arb_stall [5];
            logic icm_in_wrp_ack [5];
            logic icm_in_rrp_datavalid [5];
            logic [15:0] icm_in_rrp_data [5];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [15:0] icm_out_arb_writedata;
            logic [1:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [15:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[6].b_arb_read[0];
            assign icm_in_arb_write[2] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[7].b_arb_read[0];
            assign icm_in_arb_write[3] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[3];
            assign icm_in_arb_request[4] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[4] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[4] = router[8].b_arb_read[0];
            assign icm_in_arb_write[4] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[4] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[4] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[4] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[4] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[4];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[4];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[4];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[4];
            // INST data_ic of FPGANetSt_system_interconnect_16
            FPGANetSt_system_interconnect_16 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace11
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic [6:0] local_icm_arb_address [1][4];
      logic [63:0] local_icm_arb_writedata [1][4];
      logic [7:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [63:0] local_icm_rrp_data [1][4];

      for( __o = 0; __o < 1; __o = __o + 1 )
      begin:local_mem_group
         for( __p = 0; __p < 4; __p = __p + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace11_enable[__o][__p]),
               .avm_read(local_avm_aspace11_read[__o][__p]),
               .avm_write(local_avm_aspace11_write[__o][__p]),
               .avm_burstcount(local_avm_aspace11_burstcount[__o][__p]),
               .avm_address(local_avm_aspace11_address[__o][__p]),
               .avm_writedata(local_avm_aspace11_writedata[__o][__p]),
               .avm_byteenable(local_avm_aspace11_byteenable[__o][__p]),
               .avm_waitrequest(local_avm_aspace11_waitrequest[__o][__p]),
               .avm_readdata(local_avm_aspace11_readdata[__o][__p]),
               .avm_readdatavalid(local_avm_aspace11_readdatavalid[__o][__p]),
               .avm_writeack(local_avm_aspace11_writeack[__o][__p]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__o][__p]),
               .ic_arb_enable(local_icm_arb_enable[__o][__p]),
               .ic_arb_read(local_icm_arb_read[__o][__p]),
               .ic_arb_write(local_icm_arb_write[__o][__p]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .ic_arb_address(local_icm_arb_address[__o][__p]),
               .ic_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .ic_arb_stall(local_icm_arb_stall[__o][__p]),
               .ic_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .ic_rrp_data(local_icm_rrp_data[__o][__p])
            );

         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [63:0] port_writedata [1:2];
            logic [7:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [63:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(64),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __p = 0; __p < 4; __p = __p + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__o][__p]),
               .m_arb_enable(local_icm_arb_enable[__o][__p]),
               .m_arb_read(local_icm_arb_read[__o][__p]),
               .m_arb_write(local_icm_arb_write[__o][__p]),
               .m_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .m_arb_address(local_icm_arb_address[__o][__p]),
               .m_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .m_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .m_arb_stall(local_icm_arb_stall[__o][__p]),
               .m_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .m_rrp_data(local_icm_rrp_data[__o][__p]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [63:0] icm_in_arb_writedata [2];
            logic [7:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [63:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of FPGANetSt_system_interconnect_18
            FPGANetSt_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [63:0] icm_in_arb_writedata [2];
            logic [7:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [63:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of FPGANetSt_system_interconnect_19
            FPGANetSt_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace12
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [6:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __p = 0; __p < 1; __p = __p + 1 )
      begin:local_mem_group
         for( __q = 0; __q < 2; __q = __q + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace12_enable[__p][__q]),
               .avm_read(local_avm_aspace12_read[__p][__q]),
               .avm_write(local_avm_aspace12_write[__p][__q]),
               .avm_burstcount(local_avm_aspace12_burstcount[__p][__q]),
               .avm_address(local_avm_aspace12_address[__p][__q]),
               .avm_writedata(local_avm_aspace12_writedata[__p][__q]),
               .avm_byteenable(local_avm_aspace12_byteenable[__p][__q]),
               .avm_waitrequest(local_avm_aspace12_waitrequest[__p][__q]),
               .avm_readdata(local_avm_aspace12_readdata[__p][__q]),
               .avm_readdatavalid(local_avm_aspace12_readdatavalid[__p][__q]),
               .avm_writeack(local_avm_aspace12_writeack[__p][__q]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__p][__q]),
               .ic_arb_enable(local_icm_arb_enable[__p][__q]),
               .ic_arb_read(local_icm_arb_read[__p][__q]),
               .ic_arb_write(local_icm_arb_write[__p][__q]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .ic_arb_address(local_icm_arb_address[__p][__q]),
               .ic_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .ic_arb_stall(local_icm_arb_stall[__p][__q]),
               .ic_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .ic_rrp_data(local_icm_rrp_data[__p][__q])
            );

         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __q = 0; __q < 2; __q = __q + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__p][__q]),
               .m_arb_enable(local_icm_arb_enable[__p][__q]),
               .m_arb_read(local_icm_arb_read[__p][__q]),
               .m_arb_write(local_icm_arb_write[__p][__q]),
               .m_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .m_arb_address(local_icm_arb_address[__p][__q]),
               .m_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .m_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .m_arb_stall(local_icm_arb_stall[__p][__q]),
               .m_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .m_rrp_data(local_icm_rrp_data[__p][__q]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of FPGANetSt_system_interconnect_20
            FPGANetSt_system_interconnect_20 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of FPGANetSt_system_interconnect_21
            FPGANetSt_system_interconnect_21 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace13
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [6:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __q = 0; __q < 1; __q = __q + 1 )
      begin:local_mem_group
         for( __r = 0; __r < 2; __r = __r + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace13_enable[__q][__r]),
               .avm_read(local_avm_aspace13_read[__q][__r]),
               .avm_write(local_avm_aspace13_write[__q][__r]),
               .avm_burstcount(local_avm_aspace13_burstcount[__q][__r]),
               .avm_address(local_avm_aspace13_address[__q][__r]),
               .avm_writedata(local_avm_aspace13_writedata[__q][__r]),
               .avm_byteenable(local_avm_aspace13_byteenable[__q][__r]),
               .avm_waitrequest(local_avm_aspace13_waitrequest[__q][__r]),
               .avm_readdata(local_avm_aspace13_readdata[__q][__r]),
               .avm_readdatavalid(local_avm_aspace13_readdatavalid[__q][__r]),
               .avm_writeack(local_avm_aspace13_writeack[__q][__r]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__q][__r]),
               .ic_arb_enable(local_icm_arb_enable[__q][__r]),
               .ic_arb_read(local_icm_arb_read[__q][__r]),
               .ic_arb_write(local_icm_arb_write[__q][__r]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .ic_arb_address(local_icm_arb_address[__q][__r]),
               .ic_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .ic_arb_stall(local_icm_arb_stall[__q][__r]),
               .ic_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .ic_rrp_data(local_icm_rrp_data[__q][__r])
            );

         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __r = 0; __r < 2; __r = __r + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__q][__r]),
               .m_arb_enable(local_icm_arb_enable[__q][__r]),
               .m_arb_read(local_icm_arb_read[__q][__r]),
               .m_arb_write(local_icm_arb_write[__q][__r]),
               .m_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .m_arb_address(local_icm_arb_address[__q][__r]),
               .m_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .m_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .m_arb_stall(local_icm_arb_stall[__q][__r]),
               .m_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .m_rrp_data(local_icm_rrp_data[__q][__r]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of FPGANetSt_system_interconnect_20
            FPGANetSt_system_interconnect_20 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of FPGANetSt_system_interconnect_21
            FPGANetSt_system_interconnect_21 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_0
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_0
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [12:0] m_arb_address [3],
   input logic [15:0] m_arb_writedata [3],
   input logic [1:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [15:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [12:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .NUM_READ_MASTERS(2),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2),
         .NUM_READ_MASTERS(2),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = s.in_arb_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_1
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_1
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [12:0] m_arb_address [3],
   input logic [15:0] m_arb_writedata [3],
   input logic [1:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [15:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [12:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .NUM_READ_MASTERS(3),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2),
         .NUM_READ_MASTERS(3),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = s.in_arb_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_2
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_2
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [14],
   input logic m_arb_enable [14],
   input logic m_arb_read [14],
   input logic m_arb_write [14],
   input logic m_arb_burstcount [14],
   input logic [11:0] m_arb_address [14],
   input logic [31:0] m_arb_writedata [14],
   input logic [3:0] m_arb_byteenable [14],
   output logic m_arb_stall [14],
   output logic m_wrp_ack [14],
   output logic m_rrp_datavalid [14],
   output logic [31:0] m_rrp_data [14],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 14; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(13),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(13),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
      assign m[4].wrp_intf.ack = s.wrp_intf.ack;
      assign m[4].wrp_intf.id = s.wrp_intf.id;
      assign m[5].wrp_intf.ack = s.wrp_intf.ack;
      assign m[5].wrp_intf.id = s.wrp_intf.id;
      assign m[6].wrp_intf.ack = s.wrp_intf.ack;
      assign m[6].wrp_intf.id = s.wrp_intf.id;
      assign m[7].wrp_intf.ack = s.wrp_intf.ack;
      assign m[7].wrp_intf.id = s.wrp_intf.id;
      assign m[8].wrp_intf.ack = s.wrp_intf.ack;
      assign m[8].wrp_intf.id = s.wrp_intf.id;
      assign m[9].wrp_intf.ack = s.wrp_intf.ack;
      assign m[9].wrp_intf.id = s.wrp_intf.id;
      assign m[10].wrp_intf.ack = s.wrp_intf.ack;
      assign m[10].wrp_intf.id = s.wrp_intf.id;
      assign m[11].wrp_intf.ack = s.wrp_intf.ack;
      assign m[11].wrp_intf.id = s.wrp_intf.id;
      assign m[12].wrp_intf.ack = s.wrp_intf.ack;
      assign m[12].wrp_intf.id = s.wrp_intf.id;
      assign m[13].wrp_intf.ack = s.wrp_intf.ack;
      assign m[13].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[12].mout_intf.req;
   assign a[12].mout_intf.stall = s.in_arb_intf.stall;
   assign a[12].m0_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[12].m0_intf.stall;
   assign a[12].m1_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = a[12].m1_intf.stall;
   assign a[10].m0_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m1_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[11].m1_intf.stall;
   assign a[7].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[8].m1_intf.stall;
   assign a[9].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[9].m1_intf.stall;
   assign a[6].m0_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = m[13].arb_intf.req;
   assign m[13].arb_intf.stall = a[6].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_3
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_3
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [13],
   input logic m_arb_enable [13],
   input logic m_arb_read [13],
   input logic m_arb_write [13],
   input logic m_arb_burstcount [13],
   input logic [11:0] m_arb_address [13],
   input logic [31:0] m_arb_writedata [13],
   input logic [3:0] m_arb_byteenable [13],
   output logic m_arb_stall [13],
   output logic m_wrp_ack [13],
   output logic m_rrp_datavalid [13],
   output logic [31:0] m_rrp_data [13],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(5),
            .NUM_WRITE_MASTERS(8),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(5),
         .NUM_WRITE_MASTERS(8),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
      assign m[4].wrp_intf.ack = s.wrp_intf.ack;
      assign m[4].wrp_intf.id = s.wrp_intf.id;
      assign m[5].wrp_intf.ack = s.wrp_intf.ack;
      assign m[5].wrp_intf.id = s.wrp_intf.id;
      assign m[6].wrp_intf.ack = s.wrp_intf.ack;
      assign m[6].wrp_intf.id = s.wrp_intf.id;
      assign m[7].wrp_intf.ack = s.wrp_intf.ack;
      assign m[7].wrp_intf.id = s.wrp_intf.id;
      assign m[8].wrp_intf.ack = s.wrp_intf.ack;
      assign m[8].wrp_intf.id = s.wrp_intf.id;
      assign m[9].wrp_intf.ack = s.wrp_intf.ack;
      assign m[9].wrp_intf.id = s.wrp_intf.id;
      assign m[10].wrp_intf.ack = s.wrp_intf.ack;
      assign m[10].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[11].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[11].rrp_intf.data = s.rrp_intf.data;
      assign m[11].rrp_intf.id = s.rrp_intf.id;
      assign m[12].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[12].rrp_intf.data = s.rrp_intf.data;
      assign m[12].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 12; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = s.in_arb_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[11].m1_intf.stall;
   assign a[9].m0_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[9].m1_intf.stall;
   assign a[10].m0_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[10].m1_intf.stall;
   assign a[6].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[6].m1_intf.stall;
   assign a[7].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[8].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_4
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_4
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [14],
   input logic m_arb_enable [14],
   input logic m_arb_read [14],
   input logic m_arb_write [14],
   input logic m_arb_burstcount [14],
   input logic [11:0] m_arb_address [14],
   input logic [31:0] m_arb_writedata [14],
   input logic [3:0] m_arb_byteenable [14],
   output logic m_arb_stall [14],
   output logic m_wrp_ack [14],
   output logic m_rrp_datavalid [14],
   output logic [31:0] m_rrp_data [14],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 14; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(13),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(13),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[5].wrp_intf.ack = s.wrp_intf.ack;
      assign m[5].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
      assign m[10].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[10].rrp_intf.data = s.rrp_intf.data;
      assign m[10].rrp_intf.id = s.rrp_intf.id;
      assign m[11].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[11].rrp_intf.data = s.rrp_intf.data;
      assign m[11].rrp_intf.id = s.rrp_intf.id;
      assign m[12].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[12].rrp_intf.data = s.rrp_intf.data;
      assign m[12].rrp_intf.id = s.rrp_intf.id;
      assign m[13].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[13].rrp_intf.data = s.rrp_intf.data;
      assign m[13].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[12].mout_intf.req;
   assign a[12].mout_intf.stall = s.in_arb_intf.stall;
   assign a[12].m0_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[12].m0_intf.stall;
   assign a[12].m1_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = a[12].m1_intf.stall;
   assign a[10].m0_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m1_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[11].m1_intf.stall;
   assign a[7].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[8].m1_intf.stall;
   assign a[9].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[9].m1_intf.stall;
   assign a[6].m0_intf.req = m[13].arb_intf.req;
   assign m[13].arb_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[6].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_5
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_5
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [14],
   input logic m_arb_enable [14],
   input logic m_arb_read [14],
   input logic m_arb_write [14],
   input logic m_arb_burstcount [14],
   input logic [11:0] m_arb_address [14],
   input logic [31:0] m_arb_writedata [14],
   input logic [3:0] m_arb_byteenable [14],
   output logic m_arb_stall [14],
   output logic m_wrp_ack [14],
   output logic m_rrp_datavalid [14],
   output logic [31:0] m_rrp_data [14],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 14; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(14),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(14),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[5].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[5].rrp_intf.data = s.rrp_intf.data;
      assign m[5].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
      assign m[10].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[10].rrp_intf.data = s.rrp_intf.data;
      assign m[10].rrp_intf.id = s.rrp_intf.id;
      assign m[11].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[11].rrp_intf.data = s.rrp_intf.data;
      assign m[11].rrp_intf.id = s.rrp_intf.id;
      assign m[12].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[12].rrp_intf.data = s.rrp_intf.data;
      assign m[12].rrp_intf.id = s.rrp_intf.id;
      assign m[13].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[13].rrp_intf.data = s.rrp_intf.data;
      assign m[13].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[12].mout_intf.req;
   assign a[12].mout_intf.stall = s.in_arb_intf.stall;
   assign a[12].m0_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[12].m0_intf.stall;
   assign a[12].m1_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = a[12].m1_intf.stall;
   assign a[10].m0_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m1_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[11].m1_intf.stall;
   assign a[7].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[8].m1_intf.stall;
   assign a[9].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[9].m1_intf.stall;
   assign a[6].m0_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = m[13].arb_intf.req;
   assign m[13].arb_intf.stall = a[6].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_6
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_6
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [14],
   input logic m_arb_enable [14],
   input logic m_arb_read [14],
   input logic m_arb_write [14],
   input logic m_arb_burstcount [14],
   input logic [11:0] m_arb_address [14],
   input logic [31:0] m_arb_writedata [14],
   input logic [3:0] m_arb_byteenable [14],
   output logic m_arb_stall [14],
   output logic m_wrp_ack [14],
   output logic m_rrp_datavalid [14],
   output logic [31:0] m_rrp_data [14],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 14; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(6),
            .NUM_WRITE_MASTERS(8),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(6),
         .NUM_WRITE_MASTERS(8),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
      assign m[4].wrp_intf.ack = s.wrp_intf.ack;
      assign m[4].wrp_intf.id = s.wrp_intf.id;
      assign m[5].wrp_intf.ack = s.wrp_intf.ack;
      assign m[5].wrp_intf.id = s.wrp_intf.id;
      assign m[6].wrp_intf.ack = s.wrp_intf.ack;
      assign m[6].wrp_intf.id = s.wrp_intf.id;
      assign m[7].wrp_intf.ack = s.wrp_intf.ack;
      assign m[7].wrp_intf.id = s.wrp_intf.id;
      assign m[8].wrp_intf.ack = s.wrp_intf.ack;
      assign m[8].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
      assign m[10].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[10].rrp_intf.data = s.rrp_intf.data;
      assign m[10].rrp_intf.id = s.rrp_intf.id;
      assign m[11].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[11].rrp_intf.data = s.rrp_intf.data;
      assign m[11].rrp_intf.id = s.rrp_intf.id;
      assign m[12].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[12].rrp_intf.data = s.rrp_intf.data;
      assign m[12].rrp_intf.id = s.rrp_intf.id;
      assign m[13].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[13].rrp_intf.data = s.rrp_intf.data;
      assign m[13].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[12].mout_intf.req;
   assign a[12].mout_intf.stall = s.in_arb_intf.stall;
   assign a[12].m0_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[12].m0_intf.stall;
   assign a[12].m1_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = a[12].m1_intf.stall;
   assign a[10].m0_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m1_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[11].m1_intf.stall;
   assign a[7].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[8].m1_intf.stall;
   assign a[9].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[9].m1_intf.stall;
   assign a[6].m0_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[6].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[13].arb_intf.req;
   assign m[13].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_7
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_7
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [13],
   input logic m_arb_enable [13],
   input logic m_arb_read [13],
   input logic m_arb_write [13],
   input logic m_arb_burstcount [13],
   input logic [11:0] m_arb_address [13],
   input logic [31:0] m_arb_writedata [13],
   input logic [3:0] m_arb_byteenable [13],
   output logic m_arb_stall [13],
   output logic m_wrp_ack [13],
   output logic m_rrp_datavalid [13],
   output logic [31:0] m_rrp_data [13],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(12),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(12),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[5].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[5].rrp_intf.data = s.rrp_intf.data;
      assign m[5].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
      assign m[10].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[10].rrp_intf.data = s.rrp_intf.data;
      assign m[10].rrp_intf.id = s.rrp_intf.id;
      assign m[11].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[11].rrp_intf.data = s.rrp_intf.data;
      assign m[11].rrp_intf.id = s.rrp_intf.id;
      assign m[12].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[12].rrp_intf.data = s.rrp_intf.data;
      assign m[12].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 12; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = s.in_arb_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[11].m1_intf.stall;
   assign a[9].m0_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[9].m1_intf.stall;
   assign a[10].m0_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[10].m1_intf.stall;
   assign a[6].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[6].m1_intf.stall;
   assign a[7].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[8].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_8
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_8
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [13],
   input logic m_arb_enable [13],
   input logic m_arb_read [13],
   input logic m_arb_write [13],
   input logic m_arb_burstcount [13],
   input logic [11:0] m_arb_address [13],
   input logic [31:0] m_arb_writedata [13],
   input logic [3:0] m_arb_byteenable [13],
   output logic m_arb_stall [13],
   output logic m_wrp_ack [13],
   output logic m_rrp_datavalid [13],
   output logic [31:0] m_rrp_data [13],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 13; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(13),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(13),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[5].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[5].rrp_intf.data = s.rrp_intf.data;
      assign m[5].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
      assign m[10].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[10].rrp_intf.data = s.rrp_intf.data;
      assign m[10].rrp_intf.id = s.rrp_intf.id;
      assign m[11].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[11].rrp_intf.data = s.rrp_intf.data;
      assign m[11].rrp_intf.id = s.rrp_intf.id;
      assign m[12].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[12].rrp_intf.data = s.rrp_intf.data;
      assign m[12].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 12; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[11].mout_intf.req;
   assign a[11].mout_intf.stall = s.in_arb_intf.stall;
   assign a[11].m0_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = a[11].m0_intf.stall;
   assign a[11].m1_intf.req = a[10].mout_intf.req;
   assign a[10].mout_intf.stall = a[11].m1_intf.stall;
   assign a[9].m0_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[9].m1_intf.stall;
   assign a[10].m0_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[10].m0_intf.stall;
   assign a[10].m1_intf.req = m[12].arb_intf.req;
   assign m[12].arb_intf.stall = a[10].m1_intf.stall;
   assign a[6].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[6].m1_intf.stall;
   assign a[7].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[7].m1_intf.stall;
   assign a[8].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[8].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = m[11].arb_intf.req;
   assign m[11].arb_intf.stall = a[5].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_9
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_9
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [11],
   input logic m_arb_enable [11],
   input logic m_arb_read [11],
   input logic m_arb_write [11],
   input logic m_arb_burstcount [11],
   input logic [11:0] m_arb_address [11],
   input logic [31:0] m_arb_writedata [11],
   input logic [3:0] m_arb_byteenable [11],
   output logic m_arb_stall [11],
   output logic m_wrp_ack [11],
   output logic m_rrp_datavalid [11],
   output logic [31:0] m_rrp_data [11],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 11; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(7),
            .NUM_WRITE_MASTERS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(7),
         .NUM_WRITE_MASTERS(4),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[5].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[5].rrp_intf.data = s.rrp_intf.data;
      assign m[5].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
      assign m[10].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[10].rrp_intf.data = s.rrp_intf.data;
      assign m[10].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 10; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[9].mout_intf.req;
   assign a[9].mout_intf.stall = s.in_arb_intf.stall;
   assign a[9].m0_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = a[9].m0_intf.stall;
   assign a[9].m1_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[9].m1_intf.stall;
   assign a[8].m0_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[8].m1_intf.stall;
   assign a[7].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[7].m1_intf.stall;
   assign a[5].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[5].m1_intf.stall;
   assign a[6].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[6].m1_intf.stall;
   assign a[4].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[4].m1_intf.stall;
   assign a[0].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[10].arb_intf.req;
   assign m[10].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[3].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_10
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_10
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [9],
   input logic m_arb_enable [9],
   input logic m_arb_read [9],
   input logic m_arb_write [9],
   input logic m_arb_burstcount [9],
   input logic [11:0] m_arb_address [9],
   input logic [31:0] m_arb_writedata [9],
   input logic [3:0] m_arb_byteenable [9],
   output logic m_arb_stall [9],
   output logic m_wrp_ack [9],
   output logic m_rrp_datavalid [9],
   output logic [31:0] m_rrp_data [9],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 9; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(8),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(8),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[5].wrp_intf.ack = s.wrp_intf.ack;
      assign m[5].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 8; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = s.in_arb_intf.stall;
   assign a[7].m0_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[7].m1_intf.stall;
   assign a[6].m0_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[6].m1_intf.stall;
   assign a[4].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[5].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[3].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_11
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_11
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [10],
   input logic m_arb_enable [10],
   input logic m_arb_read [10],
   input logic m_arb_write [10],
   input logic m_arb_burstcount [10],
   input logic [11:0] m_arb_address [10],
   input logic [31:0] m_arb_writedata [10],
   input logic [3:0] m_arb_byteenable [10],
   output logic m_arb_stall [10],
   output logic m_wrp_ack [10],
   output logic m_rrp_datavalid [10],
   output logic [31:0] m_rrp_data [10],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [3:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 10; __i = __i + 1 )
      begin:m
         logic [3:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(4)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(4)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .NUM_READ_MASTERS(7),
            .NUM_WRITE_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(4)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(4)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(4),
         .NUM_READ_MASTERS(7),
         .NUM_WRITE_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[5].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[5].rrp_intf.data = s.rrp_intf.data;
      assign m[5].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
      assign m[7].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[7].rrp_intf.data = s.rrp_intf.data;
      assign m[7].rrp_intf.id = s.rrp_intf.id;
      assign m[8].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[8].rrp_intf.data = s.rrp_intf.data;
      assign m[8].rrp_intf.id = s.rrp_intf.id;
      assign m[9].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[9].rrp_intf.data = s.rrp_intf.data;
      assign m[9].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 9; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(4),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[8].mout_intf.req;
   assign a[8].mout_intf.stall = s.in_arb_intf.stall;
   assign a[8].m0_intf.req = a[7].mout_intf.req;
   assign a[7].mout_intf.stall = a[8].m0_intf.stall;
   assign a[8].m1_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[8].m1_intf.stall;
   assign a[7].m0_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = a[7].m0_intf.stall;
   assign a[7].m1_intf.req = a[6].mout_intf.req;
   assign a[6].mout_intf.stall = a[7].m1_intf.stall;
   assign a[4].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[4].m1_intf.stall;
   assign a[5].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[5].m1_intf.stall;
   assign a[6].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[6].m0_intf.stall;
   assign a[6].m1_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[6].m1_intf.stall;
   assign a[0].m0_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[7].arb_intf.req;
   assign m[7].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[8].arb_intf.req;
   assign m[8].arb_intf.stall = a[2].m1_intf.stall;
   assign a[3].m0_intf.req = m[9].arb_intf.req;
   assign m[9].arb_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[3].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_12
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_12
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [7],
   input logic m_arb_enable [7],
   input logic m_arb_read [7],
   input logic m_arb_write [7],
   input logic m_arb_burstcount [7],
   input logic [11:0] m_arb_address [7],
   input logic [31:0] m_arb_writedata [7],
   input logic [3:0] m_arb_byteenable [7],
   output logic m_arb_stall [7],
   output logic m_wrp_ack [7],
   output logic m_rrp_datavalid [7],
   output logic [31:0] m_rrp_data [7],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [2:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 7; __i = __i + 1 )
      begin:m
         logic [2:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(3)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(3)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3),
            .NUM_READ_MASTERS(7),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(3)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(3)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(3)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(3)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(3),
         .NUM_READ_MASTERS(7),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
      assign m[5].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[5].rrp_intf.data = s.rrp_intf.data;
      assign m[5].rrp_intf.id = s.rrp_intf.id;
      assign m[6].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[6].rrp_intf.data = s.rrp_intf.data;
      assign m[6].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 6; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(3),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[5].mout_intf.req;
   assign a[5].mout_intf.stall = s.in_arb_intf.stall;
   assign a[5].m0_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = a[5].m0_intf.stall;
   assign a[5].m1_intf.req = a[4].mout_intf.req;
   assign a[4].mout_intf.stall = a[5].m1_intf.stall;
   assign a[3].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[3].m1_intf.stall;
   assign a[4].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[4].m0_intf.stall;
   assign a[4].m1_intf.req = m[6].arb_intf.req;
   assign m[6].arb_intf.stall = a[4].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
   assign a[2].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = m[5].arb_intf.req;
   assign m[5].arb_intf.stall = a[2].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_13
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_13
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [12:0] m_arb_address [3],
   input logic [15:0] m_arb_writedata [3],
   input logic [1:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [15:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [12:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = s.in_arb_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_14
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_14
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [12:0] m_arb_address [3],
   input logic [15:0] m_arb_writedata [3],
   input logic [1:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [15:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [12:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(2),
         .ID_W(2),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(2),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = s.in_arb_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_15
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_15
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [5],
   input logic m_arb_enable [5],
   input logic m_arb_read [5],
   input logic m_arb_write [5],
   input logic m_arb_burstcount [5],
   input logic [6:0] m_arb_address [5],
   input logic [15:0] m_arb_writedata [5],
   input logic [1:0] m_arb_byteenable [5],
   output logic m_arb_stall [5],
   output logic m_wrp_ack [5],
   output logic m_rrp_datavalid [5],
   output logic [15:0] m_rrp_data [5],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [2:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 5; __i = __i + 1 )
      begin:m
         logic [2:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(3)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(3)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(5),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(3)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(3)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(5),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
      assign m[4].wrp_intf.ack = s.wrp_intf.ack;
      assign m[4].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = s.in_arb_intf.stall;
   assign a[3].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[3].m1_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_16
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_16
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [5],
   input logic m_arb_enable [5],
   input logic m_arb_read [5],
   input logic m_arb_write [5],
   input logic m_arb_burstcount [5],
   input logic [6:0] m_arb_address [5],
   input logic [15:0] m_arb_writedata [5],
   input logic [1:0] m_arb_byteenable [5],
   output logic m_arb_stall [5],
   output logic m_wrp_ack [5],
   output logic m_rrp_datavalid [5],
   output logic [15:0] m_rrp_data [5],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [2:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 5; __i = __i + 1 )
      begin:m
         logic [2:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(3)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(3)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3),
            .NUM_READ_MASTERS(5),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(3)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(3)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3),
         .NUM_READ_MASTERS(5),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = s.in_arb_intf.stall;
   assign a[3].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[3].m1_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_17
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_17
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [5],
   input logic m_arb_enable [5],
   input logic m_arb_read [5],
   input logic m_arb_write [5],
   input logic m_arb_burstcount [5],
   input logic [6:0] m_arb_address [5],
   input logic [15:0] m_arb_writedata [5],
   input logic [1:0] m_arb_byteenable [5],
   output logic m_arb_stall [5],
   output logic m_wrp_ack [5],
   output logic m_rrp_datavalid [5],
   output logic [15:0] m_rrp_data [5],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [15:0] mout_arb_writedata,
   output logic [1:0] mout_arb_byteenable,
   output logic [2:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [15:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 5; __i = __i + 1 )
      begin:m
         logic [2:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(3)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(16),
            .ID_W(3)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(3)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(16),
         .ID_W(3)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(16),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(2),
         .ID_W(3),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(4),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[4].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[4].rrp_intf.data = s.rrp_intf.data;
      assign m[4].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(16),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(2),
            .ID_W(3),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[3].mout_intf.req;
   assign a[3].mout_intf.stall = s.in_arb_intf.stall;
   assign a[3].m0_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = a[3].m0_intf.stall;
   assign a[3].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[3].m1_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = m[4].arb_intf.req;
   assign m[4].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_18
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_18
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [6:0] m_arb_address [2],
   input logic [63:0] m_arb_writedata [2],
   input logic [7:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [63:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_19
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_19
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [6:0] m_arb_address [2],
   input logic [63:0] m_arb_writedata [2],
   input logic [7:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [63:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_MASTERS(2),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_MASTERS(2),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(8),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_20
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_20
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE FPGANetSt_system_interconnect_21
/////////////////////////////////////////////////////////////////
module FPGANetSt_system_interconnect_21
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

